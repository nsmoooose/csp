SimData release change log.  See CHANGES.current for the latest updates
to CVS.

Version 0.3.5 (2003-10-19)
===========================

2003-10-09: onsight
            Backported a couple fixes from the b0_4_0 branch:
	      * #include inside simdata namespace in Date.cpp
	      * snprintf replaced with stringstream in Real.cpp

2003-09-16: onsight
            Changed Parse.py to handle misinstalled zlib modules
	    (usually under windows) more gracefully.

2003-08-20: onsight
            Tagged r0_3_4, version 0_3_5 started.
	    Version 0.4.0 branch started.


Version 0.3.4 (2003-08-20)
===========================

2003-08-20: onsight
            Fixed typo in Vector3.h

2003-08-19: onsight
            Added documentation.

	    Made BaseType::asString and BaseType::typeString pure virtual
	    to force them to be defined in each derived type.

	    Implemented typeString in LUT, Table, and Curve.

	    Added more complete error messages (including variable types)
	    to the TypeAdapter functions.

	    Added additional error information to the MemberAccessor
	    classes to include the name of the variable being set if
	    TypeAdapter throws an exception.

	    Added an 'addMessage()' method to Exception, which prepends
	    a newline-terminated string to the existing message.  The
	    original 'appendMessage()' is unchanged.

	    Added typeString to the SWIG interface for LUT to prevent
	    SWIG from thinking its is an abstract class.


2003-08-18: onsight
            More Doxygen fixes, reorganization, and added
	    documentation.

2003-08-17: onsight
            Fixed assertion range errors in Matrix3.h

	    Moved template metaprogramming structs into the
	    'meta' namespace in PTS.h.

	    Removed GlibCsp.h includes in GeoPos.cpp and 
	    DataArchive.cpp, with associated fixups.

	    Added byte-order tests to Uniform.h.

	    Tried adding template-meta-programming-style fixed
	    integer size typedef mappings (e.g. uint32), but
	    SWIG chokes on these so it's back to hard-coded
	    typedefs.  For now these should work on most systems 
	    that SimData is likely to run on.  Autoconf is the
	    obvious alternative, but I'd rather not use it at
	    this point.

2003-08-16: onsight
            Replaced several old-school buffer allocations with
	    std::vector equivalents in DataArchive.

2003-08-15: onsight
            More Doxygen work.

	    Move loadcheck to BaseType.cpp, which is much more
	    likely to be linked to any application using SimData.
	    The load message can be disabled by building with
	    SIMDATA_NOLOADCHECK defined.

	    Changed a couple sprintf/printf's to iostreams.

            Prefixed internal macro names in Object.h with 'SIMDATA'.

	    Changed hash_string from a macro to an inline function
	    in the simdata namespace.

	    Added Utility.h, removed GlibCSP.h from the setup.py
	    installation.

	    Minor improvements to the DataArchive internal structures.
	    There more to do here, such as using std::vector instead
	    of hand-rolled allocations.

2003-08-14: onsight
            Doxygen comment fixes.

	    Removed GlibCsp, replacing what little we used with
	    a few typedefs in Uniform.h (now in the simdata
	    namespace).  Eliminates many macro definitions and
	    unqualified names.

	    Cleaned up HashUtility.h, eliminating dead code and
	    superfluous typemaps.

	    Moved timing code inside the simdata namespace.

2003-08-13: onsight
            Complete rewrite of the Enumeration classes, using Enum
	    templates, simdata::Ref, and an overall better design.  The
	    new code allows the parent Enumerations to be bound to 
	    member variable *types* duing static construction, so that
	    the possible values for a type can be querried without
	    instantiating the parent class.  This is very useful for
	    introspecting classes, allowing a SimData XML editor to
	    determine a list of possible values for an Enum directly
	    from an ObjectInterface without creating an instance of
	    the corresponding class.  The Python bindings for the
	    Enum classes have also been redesigned and improved.

	    Changed some DataArchive and hash methods to use
	    std::string const& instead of const char*.

	    Fixed some bugs in Date.h and Matrix.h that '-pedantic'
	    uncovered.  Added more base class ctor calls to satisfy
	    '-pedantic' as well.

	    Added isSubclass() method to ObjectInterface (and the
	    InterfaceProxy clases) to test the inherintance chain
	    using interfaces without creating object instances.  The
	    class relationships used in the test are based on the
	    classes listed in the SIMDATA_XML_INTERFACE() macros, not
	    the full C++ class hierarchy.

	    Added SIMDATA_SUBEXCEPTION macro for creating exception
	    hierarchies.

	    Changed the default version string to report the build 
	    date and time, which provides a helpful sanity check when
	    more than one version of the SimData is in your library 
	    search path.

2003-08-10: onsight
            Minor fixes/pragmas to reduce useless warning messages under
	    VS 2003.

	    Added support to the object registry, object interfaces,
	    and member accessors for member variable type introspection.
	    BaseTypes other than Object must now override typeString()
	    to return a string identifier for their type (which should
	    start with "type::").  Other prefix convensions are as
	    follows:
	      * Type strings for builtin types (like 'float') start with 
	        'builtin::'.  See ObjectInterface.h for a complete list.
              * Type strings for BaseTypes other than Object start with 
	        'type::', followed by the name of the type (e.g. Date).
	      * Type strings for Objects are just the classname of the 
	        object.  
	      * Type strings for std::vectors start with 'vector::'.  
	      * Type strings for templated classes are followed by the 
	        template type (e.g. type::Link::SomeObjectClass).

	    Added object interface lookup based on object id to DataArchive
	    and DataManager.  Given an object ID (or path) you can now
	    determine the object class and introspect the member variables
	    without creating an instance of the object.

2003-08-07: onsight
            Added SIMDATA_EXPORT to classes in Random.h

	    Fixed #include <float.h> bug in Math.h under Windows

	    Moved some inline friend declarations out of the Vector3
	    class declaration to help MSVC find them.

2003-08-06: onsight
            Removed Math.i and Vector3.inl from setup.py.

2003-08-05: onsight
            Replaced Random, Vector3, Matrix3, and Quaternion classes with
	    GPL'd code.  The APIs for these classes have changed significatly,
	    although the overall functionality should be similar.

	    Copyright notices updated.

	    ns-simdata.h renamed Namespace.h.

	    NAMESPACE_END renamed NAMESPACE_SIMDATA_END

	    A couple double/float comparison fixes.

	    Fixed Marsenne -> Mersenne typos.

==========> VS USERS: remove Quaternion.cpp from the project and add Quat.cpp

2003-08-04: onsight
            Tagged r0_3_3, version 0.3.4 started.


Version 0.3.3 (2003-08-04)
===========================

2003-07-26: onsight
            Added SConstruct and SConscript scripts for building and
	    installing with SCons <http://www.scons.org>.  Some helper
	    routines are in construct.py.  This SCons build system 
	    testing and evaluation purposes only at this point.  Give
	    it a try if you like and report problems, suggestions, or
	    patches to <http://csp.sourceforge.net/forum>.  Note that
	    no tests have yet been done under Windows, and while it
	    should work in principle there will certainly be some
	    significant problems early on.

2003-07-24: onsight
            Removed (commented) type conversion operators in TypeAdapter.
	    These were dodgey at best, if not outright dangerous.  They
	    are not needed in any existing code, and yet were being
	    called implicitly at times.  The rules for implicit calls
	    apparently changed somewhat between gcc 3.2 and 3.3, resulting
	    in an exception during string assignment to object interfaces.
	   
==========> WINDOWS USERS: check that this change doesn't adversely affect
            existing projects.
	    
2003-07-22: onsight
            Fixed a bug in unpack(string) which could trip an assertion
	    for corrupt archives rather than throwing an exception.

	    Added GPL headers to Include/SimData/*.i

	    Removed Source/main.cpp (not used)

2003-07-22: onsight
            Applied a patch by Verok Istvan to setup.py which improves the
            installation path handling under Linux. This changes the default
            static library path from /usr/local/lib to 
	    {PYTHONLIBPATH}/site-packages/SimData. 
		
            The install currently depends on Python, but one goal of SimData
            is that it should be able to operate as a standalone library
            independent of Python. Subsequent changes to the Makefile
            installation will be needed to achieve this, probably involving
            a new install target such as install_nopython.

	    Fixed ospath::dirname, which was truncating the last couple
	    characters.

	    Added getError method to ExceptionBase, which returns a
	    string that combines the error type and message.

2003-07-21: onsight
            COPYING now correctly contains the GPL license, not the
	    LGPL licence.

	    Moved PTS copyright/license notice back to ObjectRegistry.h
	    where the code actually resides.  Added a GPL notice to
	    PTS.h.  

2003-07-19: delta
	    Merged Onsight changes. 
	    Updated vc project.

2003-07-18: onsight
            Separated the __PTS_SIM__ definition into PTS.h.  Partial
	    template specialization must be simulated on msvc.net
	    version prior to vc.net 2003.  This is currently done for
	    the ObjectRegistry classes.  If PTS_SIM is required, the 
	    new LUT classes are disabled since I don't want to spend 
	    the (considerable) time that would be required to make them
	    work with PTS_SIM.  

2003-07-18: onsight
            Enabled method attribute for specifying the interpolation
	    method for LUT's.  Valid methods are right now are LINEAR 
	    or SPLINE (case insensitive).  The default is linear.

	    For example:
	          <Table1 name="foo" method="spline">
		      <Breaks0> .... etc.

2003-07-17: onsight
            Moved non-inlined LUT methods and ancillary classes out
	    of the header and into LUT.cpp.  Since these are template 
	    classes the code now specifically instantiates three 
	    versions:

	          LUT<1,float> = Table1
	          LUT<2,float> = Table2
	          LUT<3,float> = Table3

	    Added packing and unpacking of LUT's.

	    Added XML support for LUTS classes.  The format is very
	    similar to <Curve> and <Table>, but the <XBreaks> and 
	    <YBreaks> tags are now generalized to <BreaksN> where N
	    is a 0, 1, or 2.   So <Table1> needs a <Breaks0> subfield,
	    while <Table2> needs both <Breaks0> and <Breaks1>.
	    Interpolation mode is not yes supported (it always uses 
	    linear interpolation).

	    Modified Makefile and setup.py to build and install LUT.cpp.

==========> VC USERS: add LUT.cpp to the project.

2003-07-17: brandon
            Changed hash_map.h and HashUtility.h to support
            MSVC 2003 by updating the version numbers >=1300
            Changed interpolate.cpp and removed the
            InterpolatedData<T> from the find function param to prevent
            MSVC 2003 from erroring on that.

2003-07-16: onsight
            Tweaked TypeAdapter constructors to disambiguate the copy
	    constructor.  The build now works with g++-3.3.

	    New lookup table classes in LUT.h.  The code is not yet
	    complete and should not be used for anything other than
	    testing at this point.

	    Added new Key data type, which is just a string converted
	    to and stored as a 32-bit hash value.

==========> VC USERS: add Key.cpp to the project.

            Added date comparison methods.

2003-07-01: delta
	    Added a SWIG_GLOBAL define on cSimData_wrap.cpp to enable log level.

2003-06-19: onsight
            Fixed a bug in Link::unpack(). The Object::postCreate() method
            was not being called correctly for immediate Objects (those
            declared directly in the XML stream rather than by reference to
            an external xml file). This primarily affected Link<T>::vector
            members, where T was a class derived from Object and the <Object>
            tag occured inside the <List> tag in a single XML file.

2003-06-11: delta
	    Removed help methods ... from Math.h.
	    Added help methods to Conversions.h.
	    Added Conversions.h to .net project ;)

2003-05-24: delta
	    Added help methods to convert feet to meters and pounds to newtons
	    in Math.h.

2003-05-14: onsight
            Added LLA, UTM, and ECEF classes.  This some functionality is 
	    inclueded in GeoPos, but that class is a bit bloated.  Eventually
	    GeoPos will be rewritten as an ECEF derived class that contains
	    LLA and UTM members with lazy evaluation.

	    Added <LLA>, <UTM>, and <ECEF> XML tags to the parser.  These
	    can be used interchangeably with variables of any of the three
	    corresponding types.

            Finally fixed the SWIG warning about Referenced.

	    Added setLogClasses method to LogStream.

2003-05-13: onsight
            Added exception handling to file copying in setup.py.  Copy errors
	    will be printed as warnings, and the installation will continue.

2003-05-13: delta
	    Added a post built step to copy VisualStudio/cSimData.py to SimData.
	    Corrected a vc project bug (Ref.cpp)

2003-05-08: onsight
            Added a dummy 'pass()' method to Interface to prevent warning
	    messages when a class defines an empty interface.

2003-05-04: delta
	    Updated .net project. 
	    Finally added some pragma to get ride of dll interface warnings ...		

2003-05-03: onsight
            Made static log variables into class members, so that multiple logs
	    can exist in one application.  Since SimData itself uses the logging
	    classes, this was necessary for it to be useful as a library class
	    (and just makes much more sense).
	   
            Changed the log method set_output() to setOutput().


Version 0.3.2 (2003-05-02)
===========================

2003-04-26: onsight
            Removed exception surpression from Link<>.  If a link isn't
	    found in the archive, the exception will now propagate out
	    of SimData.  Beware that this can leave objects in an
	    inconsistent state.  It may be necessary to do exception
	    handling in the unpack() method if you want to gracefully
	    recover.

            Added cleanStatics() methods to DataArchive and DataManager
	    that purge any cached objects not in use.  Calling this
	    method after you delete many objects can free up unused
	    memory.

            Fixed a date rollover bug in SimData that cause the clock to
	    advance by one day for every update call after midnight!

	    Fixed some other date bugs related to the number of seconds
	    in a day (some methods were using 86000 instead of 86400).

            The XML parser now supports hex notation for integers, such
	    as '0xF00' and '0x9a'.

            Added support for char and short data types. This is primarily
            to allow more memory efficient object types. There are no plans
            to support unsigned versions of char, short, and int at this
            point. The same XML tag (<Int>) is used for all the types, and
            no range checking is done, although this could be easily added
            to TypeAdapter::set().

            Added support for bit-packed booleans. In the interface
            definition use:

	       SIMDATA_BIT("var_name", class::memvar, mask, req)

            instead of the usual SIMDATA_XML. The data type for memvar can
            be either char, short, or int. The mask field is the bit mask
            that will be or'd with memvar if the boolean is true. If the
            boolean is false, the mask complement is and'd with memvar. So
            for instance, you might have:

	       SIMDATA_BIT("flag0", myclass::flags, 0x01, false)
	       SIMDATA_BIT("flag1", myclass::flags, 0x02, false)
	       SIMDATA_BIT("flag2", myclass::flags, 0x04, false)

	    In the xml data, if you specify:

	       <Bool name="flag0">true</Bool>
	       <Bool name="flag2">true</Bool>

            then flags will be set to 5, assuming it was zero to begin with.
            Since bits are set and cleared by true and false XML tags, you
            can specify default bit settings (both true and false) by
            initializing flags in the myclass ctor.

            *** NOTE: Bit-packed booleans are *not* supported under VC6 by
            the partial template specialization (PTS) hack. Since the
            arrival of VC.net, PTS is deprecated and I have no plans to add
            new enhancements (such as bit-packed booleans) to it.

2003-04-25: onsight
            Added != operator to Ref<>.

            Added MakeModifiedEulerAnglesFromQ() method to Quaternion to
            provide direct support CSP's coordinate frame. This is still
            experimental and may not ultimately be needed.

2003-04-25: delta
	    Updated .net project file.

2003-04-24: onsight
            Fix for Object::operator=() return value.

	    Added list and vector typedefs to class Ref.

2003-04-22: onsight
            Data archive files now store the parent/child relationship
	    between object paths, so it is possible to search for all
	    objects in a given path.   The full list of human-readable
	    paths is also stored now, allowing path hash values to be
	    converted to more informative debugging messages.

	    Various methods have been added to DataArchive to access
	    this new information:

	      getChildren, getPathString, hasObject, getAllPathStrings

	    Integrated these changes with the DataManager class.

            *** WARNING: ALL DAR FILES MUST NOW BE REBUILT ***

2003-04-21: onsight
            Abstracted the reference counting interface from class Object 
	    to class Referenced.  
	    
	    Added a Ref<> smart-pointer for Referenced objects.

	    Renamed PointerBase and Pointer<> to LinkBase and Link.  Moved
	    them out of Path.h/cpp into Link.h/cpp.

2003-04-21: delta
	    Removed RadiansToDegrees and DegreesToRadians calls in 
	    Quaternion::MakeQFromEulerAngles and 
	    Quaternion::MakeEulerAnglesFromQ; now you must specify your 
	    angles in radians. 

	    Cleaned the code in these functions.

2003-04-20: onsight
            Fix for a nasty little bug in ObjectInterface.h that could
	    cause memory corruption during data compiling.   Rebuild
	    SimData, install it, then rebuild CSPSim from scratch (just
	    to be sure).

2003-04-19: delta
	    Use swig 1.3.19 on windows now so need to change custom build.


2003-04-18: onsight
            Wrote a specialized vector rotation method for quaternions
	    that should be a little bit faster.
	    
	    Added DataManager.* to setup.py so it is now installed
	    properly.  DataManager is also wrapped by SWIG now.

	    More documentation in Quaternion.h.



Version 0.3.1 (2003-04-18)
===========================

2003-04-15: onsight
            Added vector rotation and inverse rotation methods to
	    Quaternion (in addition to QVRotate).

	    Made many Quaternion methods inline.

2003-04-12: onsight
            Changed all the #ifndef/#define blocks surrounding the
	    headers to use __SIMDATA_ as a prefix.  This should ensure 
	    the identifiers are unique when the headers are used in
	    another project.

	    Moved Exception to ExceptionBase for use in other projects
	    and added an Exception subclass to serve as the base class
	    for all SimData exceptions.

2003-04-11: onsight
            Updated setup.py to install FileUtility.h.

	    Minor changes to log macro and fatal error function.
            
2003-04-11: delta
	    Finally got the changes from Onsight compile on .net ;-)
	    ^- aah, it wasn't that bad ;-) --OS

2003-03-29: onsight
            Added a DataManager class to combine access to multiple data
	    archives simultaneously and transparently.

            *** ANY MSVC USERS: PLEASE UPDATE THE PROJECT FILE TO INCLUDE ***
	    *** DATAMANAGER.CPP                                           ***

	    Added Quaternion as a base type.  It now has Python bindings
	    and an XML interface that can specify either a 3x3 matrix
	    or the 4 quaternion parameters.  The XML tag is <Quat>

	    Moved the ospath routines from CSPSim's Platform.h to
	    SimData.  They are now in FileUtility.h.

2003-03-28: delta
	    updated .net project (release mode is maintained)

	    Once SimData is compiled, in command line, type:
	    setup.py make_install_win
	    from APPLICATIONS/SimData to copy all headers and binaries needed
	    for csp.

2003-03-27: onsight
            Added push_back() methods for int, double, and string to 
	    InterfaceRegistry.  These are needed for XML <List>'s of these
	    basic types.  Lists of objects derived from BaseType already
	    worked.
	    
2003-03-26: onsight
            Modified setup.py to byte compile the python scripts during
	    installation, and to set the file permissions of these to
	    0644.

	    Added '-v' and '--verbose' flags to make_install* commands
	    of setup.py.  If set then all the copy operations will be
	    displayed.

	    Partial rewrite of the Enum/Enumeration class to share a
	    reference counted instance that hold the string to int and
	    int to string lookups.  This way, stray Enums can exist
	    happily after their Enumeration parent has died.  Probably
	    not to common, but much more pleasing aesthetically.

	    Added doxygen comments to Enum.h, Random.h, and Real.h.

	    Moved some SWIG/Python special methods to SWIG %extend
	    directives.  Still more to be done.

2003-03-26: delta
	    Removed Spread.cpp and added Noise.cpp and Real.cpp

	    Added export symbol to Table and InterpolatedData classes.

2003-03-25: onsight
            Changed #define types for InterpolatedData to class typedefs.
	    
	    Made several methods const, and added a const iterator typedef.

	    Preliminary implementation of a one-dimensional perlin noise
	    class.

	    Added some basic unit connversion functions.

	    More documentation of date classes, and a couple bug fixes in
	    Zulu.

	    Renamed Spread to Real.

	    Removed Integer and (the old) Real, which were just placeholders
	    for int and double that didn't appear to serve any purpose.

	    Added Doc directory with DOxygen config file and makefile.  Make
	    doc now runs doxygen.

2003-03-22: delta
	    Minor changes to setup.py under make_install_win

2003-03-21: onsight
            Moved Python include path setting to the main Makefile.

            Added export modifiers to Spread and enumeration classes.

            Fixed pack(unsigned) in ObjectInterface.h with static cast for
            windows.

            Got rid of generic template set() method in TypeAdapter that was
            causing problems under windows (ambiguity between set(T&) and
            set(Pointer<T>&)). Now all the set(BaseType&) methods are
            written explicitly, and must be updated by hand whenever new
            types are added.

	    Added Python version check to setup.py (also called from
	    Makefile).

	    Makefile gets Python include path automatically.

	    To facilitate the build under Windows, setup.py now copies 
	    cSimData.py from Source to SimData for make_install_win.

2003-03-20: delta
	    Fixes for msvc.

2003-03-20: onsight
            Fixed const cast in matrix * vector routines. Why doesn't gcc
            3.2.1 -Wall catch this? (!)

            Changed cSimData.i in Source to include the main version in
            Include/SimData. These differ in their %module directive. The
            main one uses SimData.cSimData, which is needed for 3rd party
            apps than import the SimData interface for SWIG. The version
            used to build SimData (in Source) uses just %module SimData.

2003-03-19: onsight
            Changed Enumeration implementation to use std::map<> instead
	    of (non-)std::hash_map<>.

	    Enumeration __getattr__ in Python now returns new Enum objects 
	    to prevent const subversion (the Enumeration members were
	    mutable from Python).  The logic for __getattr__ is more robust
	    as well.

            Added __mul__ and __rmul__ operators to Vector3 and Matrix3 to
            allow: V*V, M*M, V*M, M*V, M*F, F*M, V*F, F*V.

            Optimized Matrix3*Vector3 and Vector3*Matrix3 slightly by using
            vector members instead of integer indexing (which required nine
            extra function calls). Access to the matrix elements is also
            faster using pointer arithmatic, and the for loops have been
            unrolled by hand.

            Fixed setup.py to preserve file and directory permissions during
            installation.

            Added make_install target to setup.py which is used by the
            standard Makefile to install SimData (make install).
	    
2003-03-17: onsight
            Fixes to MS VC.net fixes.  Lather, rinse, repeat... ;-)
	    
2003-03-17: delta
            Fixes for building with MS VC.Net

	    Changes to hash stuff to make it compile with native stl .net
	    Restructured some header files

	    Added .net project

            Added a test on using stlport with msvc <= 6.0 in hash_map.h

2003-03-16: onsight
            Created a new setup.py script to allow SimData to be build and
            installed using Python DistUtils. This works on Linux/GCC but
            needs to be tested on other platforms. The Makefile will remain
            as a backup until the setup.py script is stable.

            Restructured the installation as a SimData packages, with the
            extension module (cSimData) and tools (DataCompiler) underneath.
            SimData/__init__.py now contains the code that was in
            SimData.py. The net effect is that you just import SimData as
            usual, but the data compiler is now SimData.Compiler. I'm moving
            away from a standalone compiler approach, since it depends on
            the external library that you are compiling for. Instead, the
            external program should load SimData, register its object
            interfaces, and run the compiler if needed by creating an
            instance of class Compile (from SimData.Compiler).

            Restructured the argument processing and usage messages of
            Compiler.Compile to interact better with the calling code (when
            not used as a standalone compiler). The main application should
            process any command line arguments it recognizes and pass the
            rest to Compile.parse(), catching any exceptions that are
            raised.
           
2003-03-13: onsight
            Fixed several bugs related to std::vector types
	    
	    Fix to allow inplace (anonymous) object definitions in xml

            Added a logging facility so we can filter and redirect messages
            to a file. The syntax is similar to that used in CSP:

            SIMDATA_LOG(type, severity, msg)

            Where type is one of (LOG_TYPE, LOG_ARCHIVE, LOG_REGISTRY, ...)
            and severity is one of (LOG_TRACE, LOG_DEBUG, LOG_INFO,
            LOG_WARN, LOG_ALERT, LOG_ERROR). The msg field can include the
            usual ostream operators (<<).
	    
            *** BUILD CHANGE ***
	    Added Source/LogStream.cpp to do logging.

	    *** NEW FEATURE ***
            *** POTENTIAL INCOMPATIBILITY ***
            Added a new postCreate() method in Object which is called after
            unpack() is complete. You can extend this to do additional
            object setup once the data is loaded. From now on, unpack() must
            be the exact inverse operation of pack().

	    *** NEW FEATURE ***
            Data compiler enhancements, mainly the ability to only reparse
            xml files that have changed since the archive was last
            generated. This significantly speeds up the processing.
            Specifying '--rebuild' on the command line will rebuild the
            entire archive from scratch.

            *** POTENTIAL INCOMPATIBILITY ***
            Big simplification of the various smart pointer types.
            PathPointer<T> is gone; now just use Pointer<T> for all object
            references. PathPointerBase is now PointerBase, and what was
            originally PointerBase is now ReferencedPointer (although you
            shouldn't need to use these classed directly).


Version 0.3.0 (2003-03-14)
===========================
2003-03-14: onsight
            CHANGES and CHANGES.current started. First tagged version of
            SimData: 0.3.0

