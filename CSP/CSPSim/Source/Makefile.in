TOPDIR = ../..

BIN = $(TOPDIR)/CSPSim/Bin

SUBDIRS = Theater SimNet Views Systems

DEMETER_PREFIX = $(TOPDIR)/Demeter
DEMETER_INCLUDE = -I$(DEMETER_PREFIX)
DEMETER_LIBRARY = -L$(DEMETER_PREFIX) -ldemeter_csp 

CHUNKLOD_PREFIX = $(TOPDIR)/CSPChunkLod
CHUNKLOD_LIBRARY = -L$(CHUNKLOD_PREFIX)/lib -losgChunkLod_csp
CHUNKLOD_INCLUDE = -I$(CHUNKLOD_PREFIX)/include

SIMDATA_PREFIX = $(TOPDIR)/SimData
SIMDATA_LIBRARY = -L$(SIMDATA_PREFIX)/SimData -lSimData
SIMDATA_INCLUDE = -I$(SIMDATA_PREFIX)/Include

SPATIALINDEX_PREFIX = $(TOPDIR)/SpatialIndex
SPATIALINDEX_LIBRARY = -L$(SPATIALINDEX_PREFIX) -lspatialindex
SPATIALINDEX_INCLUDE = -I$(TOPDIR)

LIBS = $(DEMETER_LIBRARY) $(CHUNKLOD_LIBRARY) $(SPATIALINDEX_LIBRARY) -lccgnu2

INCLUDE = \
	-I$(TOPDIR)/CSPSim/Include \
	$(SIMDATA_INCLUDE) \
	$(DEMETER_INCLUDE) \
	$(CHUNKLOD_INCLUDE) \
	$(SPATIALINDEX_INCLUDE) \
	-I@PYTHON_INCLUDE@

BASEFL = $(GDEBUGF) $(GCFLAGS) $(INCLUDE) @SDL_FLAGS@ @SIGC_FLAGS@ @CCGNU2_FLAGS@
CFLAGS = $(filter-out -I/usr/local/include, $(BASEFL))
SWCXXF = $(GDEBUGF) $(GCFLAGS) $(INCLUDE) @SIGC_FLAGS@ @CCGNU2_FLAGS@
LDOPTS = -Wl,-z,lazyload $(GLDOPTS) @LIBS@
SWOPTS = $(GSWOPTS) $(INCLUDE) 
EXTERN_LIBS = @LIBS@

SHARED_LIB = libcspsim.so
STATIC_LIB = libcspsim_static.a
WRAPED_LIB = _cCSP.so

INTERFACES = \
	cCSP.i

SOURCES = \
	Systems/AircraftFlightSensors.cpp \
	Systems/AircraftInputSystem.cpp \
	Systems/AircraftSimpleFCS.cpp \
	AircraftObject.cpp \
	AircraftPhysicsModel.cpp \
	Animation.cpp \
	Atmosphere.cpp \
	BaseDynamics.cpp \
	BaseScreen.cpp \
	ChunkLodTerrain.cpp \
	ClientNode.cpp \
	Collision.cpp \
	Colorspace.cpp \
	Config.cpp \
	Console.cpp \
	ConsoleCommands.cpp \
	CSPSim.cpp \
	DemeterTerrain.cpp \
	DispatchCenter.cpp \
	DynamicObject.cpp \
	DynamicalSystem.cpp \
	EchoServerNode.cpp \
	Engine.cpp \
	EventMapIndex.cpp \
	EventMapping.cpp \
	Exception.cpp \
	FlightDynamics.cpp \
	FlightModel.cpp \
	GameScreen.cpp \
	HID.cpp \
	InputEvent.cpp \
	InputInterface.cpp \
	KineticsChannels.cpp \
	LandingGear.cpp \
	LogoScreen.cpp \
	MenuScreen.cpp \
 	Message.cpp \
	SimNet/NetworkNode.cpp \
	SimNet/NetworkMessage.cpp \
	SimNet/ObjectUpdateMessage.cpp \
	SimNet/NetworkMessenger.cpp \
	SimNet/PrintMessageHandler.cpp \
	SimNet/RedirectMessageHandler.cpp \
	SimNet/EchoMessageHandler.cpp \
	SimNet/DispatchMessageHandler.cpp \
	NumericalMethod.cpp \
	ObjectModel.cpp \
	PhysicsModel.cpp \
	RedirectServerNode.cpp \
	ScreenInfo.cpp \
	ScreenInfoManager.cpp \
	SimpleSceneManager.cpp \
	Sky.cpp \
	SmokeEffects.cpp \
	System.cpp \
	SystemsModel.cpp \
	TankObject.cpp \
	TerrainObject.cpp \
	Theater.cpp \
	Theater/CustomLayoutModel.cpp \
	Theater/ElevationCorrection.cpp \
	Theater/Feature.cpp \
	Theater/FeatureGroup.cpp \
	Theater/FeatureGroupList.cpp \
	Theater/FeatureLayout.cpp \
	Theater/FeatureObjectModel.cpp \
	Theater/FeatureQuad.cpp \
	Theater/FeatureSceneModel.cpp \
	Theater/LayoutTransform.cpp \
	Theater/Objective.cpp \
	Theater/RandomBillboardModel.cpp \
	Theater/RandomForestModel.cpp \
	Views/CameraAgent.cpp \
	Views/CameraKinematics.cpp \
	Views/View.cpp \
	VirtualScene.cpp

OBJDIR = .objs
OBJECTS = $(SOURCES:%.cpp=$(OBJDIR)/%.o) 
OBJ_MAGIC := $(shell mkdir $(OBJDIR) $(addprefix $(OBJDIR)/,$(SUBDIRS)) > /dev/null 2>&1 || :)

DEPDIR = .deps
MKDEP = $(CXX) -M $(CFLAGS)
SWDEP = $(SWIG) -M $(SWOPTS)
DEPFILES = $(addprefix $(DEPDIR)/,$(addsuffix .d, $(SOURCES))) \
           $(addprefix $(DEPDIR)/,$(addsuffix .swigd, $(INTERFACES)))
DEPFILTER = | sed -n 's/^\(.*:\)/$(subst /,\/,$@) $(OBJDIR)\/\1/;p'
DEP_MAGIC := $(shell mkdir $(DEPDIR) $(addprefix $(DEPDIR)/,$(SUBDIRS)) > /dev/null 2>&1 || :)

.PHONY: clean-deps clean all default

default:
	@echo "run make from top-level directory only"
	
clean-objects:
	${RM} -fr $(OBJDIR)
	${RM} -f lib*.a
	${RM} -f $(BIN)/_cCSP.so $(BIN)/cCSP.py cCSP_wrap.*

clean-deps clean-dependencies:
	find $(DEPDIR) -name *.d -exec ${RM} {} \;
	find $(DEPDIR) -name *.swigd -exec ${RM} {} \;

clean: clean-deps clean-objects

ifeq ($(findstring clean,$(MAKECMDGOALS)),)
ifneq ($(strip $(DEPFILES)),)
-include $(DEPFILES)
endif
endif

$(DEPDIR)/%.d : %
	@echo "Computing dependencies for $<..."
	@$(MKDEP) $< $(DEPFILTER) > $@
	
$(DEPDIR)/%.swigd : %
	@echo "Computing dependencies for $<..."
	@$(SWDEP) -o $(<:.i=_wrap.cpp) $< $(DEPFILTER) > $@

$(WRAPED_LIB) : $(OBJECTS) cCSP_wrap.o
	$(CXX) $(LDOPTS) -o$@ $^ $(LIBS)
	cp $(WRAPED_LIB) $(BIN)/$(WRAPED_LIB)
	
$(STATIC_LIB): $(OBJECTS)
	rm -rf $(BIN)/$(STATIC_LIB)
	$(AR) rc $(BIN)/$(STATIC_LIB) $(OBJECTS)
	rm -rf $(BIN)/$(SHARED_LIB)
	$(CXX) -shared $(OBJECTS) -o $(BIN)/$(SHARED_LIB)
	
#CSPapp: $(OBJECTS) main.o
#	$(CXX) -lswigpy -lpython2.2 -o$@ $^ $(LIBS)

cCSP_wrap.cpp: cCSP.i
	$(SWIG) $(SWOPTS) -o $@ $< 
	mv cCSP.py $(BIN)

cCSP_wrap.o: cCSP_wrap.cpp
	$(CXX) -c $(SWCXXF) $(@:.o=.cpp)


#clientNode: ClientNodeDriver.o 
#	$(CXX) $(EXTERN_LIBS) $(OBJECTS) $(SIMDATA_LIBRARY) -o$@ $^ $(LIBS)

#serverNode: ServerNodeDriver.o
#	$(CXX) $(EXTERN_LIBS) $(OBJECTS) $(SIMDATA_LIBRARY) -o$@ $^ $(LIBS)
		

test: clientNode serverNode


$(OBJDIR)/%.o: %.cpp 
	$(CXX) -c $(CFLAGS) -o $@ $<

$(OBJDIR)/AeroDynamics.o: AeroDynamics.cpp
	$(CXX) -c $(CFLAGS) -O3 -o $@ $<
	
#ClientNodeDriver.o: ClientNodeDriver.cpp
#	$(CXX) -c $(CFLAGS) $(INCLUDE) -o ClientNodeDriver.o ClientNodeDriver.cpp

#ServerNodeDriver.o: ServerNodeDriver.cpp
#	$(CXX) -c $(CFLAGS) $(INCLUDE) -o ServerNodeDriver.o ServerNodeDriver.cpp

Makefile: Makefile.in
	cd $(TOPDIR)/CSPSim && ./configure

all: Makefile $(WRAPED_LIB) #$(STATIC_LIB) test #CSPapp

