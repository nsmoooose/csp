THE BIG PICTURE
-----------------------------------------------------------------------

This version is incomplete in the sense of being BETA, but also in a
more fundamental sense.

The original concept for SimData relied on Python/SWIG (with special
support for cross-language polymorphism) to provide an interface for
dynamically setting class member variables as indicated by the source
XML stream. While this approach worked, it forced the application using
SimData to wrap all classes that loaded external data with SWIG.

Somewhere (well) along the way, I thought of a less intrusive way to
allow SimData to access class member variables in the target
application. The application still must define a minimal Python module
in order to initialize the class interfaces, but this is much less
onerous than the previous approach. The downside is this new method
relies on nested classes to provide XML interfaces. Since SWIG does not
currently support nested classes, it is no longer possible to extend XML
interfaces of application classes using Python. Also, much of the Python
code developed to assist in such extension is now obsolete. Once a 
future version of SWIG supports nested classes (which appears to be a 
priority for SWIG's developers), new Python code will need to be written 
to bridge the object interface and registry code into Python.

Another option I've been considering is using Boost::Python to provide
bindings. Boost supports nested classes and polymorphism, but requires
more hands-on wrapping. A new project called Pyste promises to provide
much more automated wrapping capabilities to Boost, using an interface
design that is very similar to SWIG. This is still a bit too immature
for use in SimData, but it may be a viable option before long.  On the
downside, tests I've made with Boost generated wrappers that were as 
much as 10 times larger than the SWIG equivalents.


OTHER 
-----------------------------------------------------------------------

    * Improve the build on Linux and Windows.  This has already
      gotten considerably better, but there's always more work
      to do.

    * Refine and extend the data classes; improve the Python bindings

    * Add examples to the doxygen file comments for each type class.

    * Add doxygen comments to uncommented methods

    * Improve the SimData wiki documentation

    * Eliminate unnecessary inline code from headers.
    
    * Check for unnecessary header includes.
    
    * Bug Dave about adding nested class support to SWIG
    
    * Add filename parameter and reporting to data archive exceptions
    
    * Eliminate excessive header interdependencies
    
    * Consider eliminating pack/unpack object methods, instead using the 
      interface proxy classes to serialize objects. This may be much less 
      error-prone. (but perhaps too inflexible?)

    > This is now partially implemented.  I'm holding off on completing
      this feature for the time being.
      


