Version 0.4.0 (in progress)
===========================
2003-12-30: delta
  * Added an environment variable to the project in lieu of 
    hardcoded Python path; windows users must have defined 
    PYTHONPATH variable pointing to the current Python install 
    dir root.
    
  * Removed link onto useless specific windows libs. Tweaked 
    the project file (release build) toward speed optimizations 
    (note: enabling sse2 optimizations leads to a dll loading 
    failed on an athlon XP2k+).
    
2003-12-25: delta
  * Updated msvc 7.1 project file with a post built step 
    (PostBuild.bat) to install SimData and run tests.
    
  * Added const& qualifiers in hash string functor parameters
    (inherited from stdext::hash_compare) for vs.net. 
    
2003-11-02: onsight
  * Added #include <algorithm> in InterfaceRegistry.cpp (as 
    suggested by delta).

2003-11-01: onsight
  * Some tweaking of the Scons scripts.  Added a platform-specific
    configuration (see build_config.py).  Seems to work well under
    Linux, but the MSVC side is untested.

  * Changed the SCons swig version check to reject versions 1.3.18 
    and 1.3.19.

2003-10-25: onsight
  * Added a unit conversion test and tweaked some of the conversion
    functions to be more accurate.  The test ensures that inverse
    conversions are accurate to at least one part in 10^6.

2003-10-24: onsight
  * Moved some inline set() methods out of TypeAdapter.h to avoid
    including all the data type headers.  Code using SimData that
    implicitly relies on these data type headers will now need to
    exclicitly include the required types.

  * Added a C++ testing framework under SimData/Tests.  Any file
    named test_*.cpp is treated as a test, and can be built and
    run from a toplevel 'make tests'.  Failed tests should exit
    with a non-zero status code.

  * Expanded test_Objects.cpp test to check the interface
    registry and object introspection.
    
2003-10-23: onsight
  * Separated Singleton class into Singleton.h (was InterfaceRegistry.h).

  * Added Trace.h for generating callstack back traces on error.

2003-10-22: onsight
  * Fixed a few of the (many) warnings generated by msvc 7.1 /W4.

2003-10-21: onsight
  * Fixed InterfaceRegistry ctor to properly initialize the registry
    pointers to zero.

2003-10-21: onsight
  * Changed Packer to accept PackFile instead of FILE*.  PackFile is
    a thin wrapper around FILE* which shouldn't affect other c++ code
    (it allows coercion to and from FILE*), but prevents Python code
    from passing file objects to Packer.  The latter is necessary,
    since under windows Python is currently built with MSVC 1200, and
    SimData is built with MSVC 1310+.  The runtime libraries for these
    two versions of MSVC are incompatible with respect to certain FILE* 
    operations, causing segfaults.  Using PackFile ensures that FILE*
    are created and used only by the MSVC 1310 library when dealing
    with data archives.

  * Started adding new data type unit tests.  Key and some SimDate
    tests so far.

2003-10-20: onsight
  * Removed Pack.cpp from the vcproj file.

  * Removed the __NO_LUT__ define from swig command line in the vcproj
    file.  This flag was used to prevent errors with older versions of 
    MSVC during testing of the new lookup table code.

  * Changed the default path to swig to c:\Program Files\swig-1.3.17
    in vcproj.  The previous path was to swig-1.3.19, but this version
    of swig has a bug that causes problems with simdata.

  * Started a new test suite for data type functionality

  * Added SIMDATA_API_VERSION define to Version.h.  This number will
    be bumped for all backwards-incompatible API changes.

  * Updated README

2003-10-20: onsight
  * Added a log message when the interface registry is destroyed.

2003-10-19: onsight
  * Merged b0_4_0 into the trunk.  The old head was tagged as r0_3_5,
    then branched to b0_3.

2003-10-19: onsight
  * Fixed error message in data compiler for the deprecated <Table> tag.

2003-10-13: onsight
  * Changed the 'static' property of Objects from an object property to a
    class property.  The use of the 'static' attribute in Object xml tags 
    is now deprecated.  To specify a static Object class, use the
    SIMDATA_STATIC_OBJECT macro instead of SIMDATA_OBJECT.

  * Added '--force' option to Compile.py, allowing warnings to be ignored.

  * Added a deprecation warning to 'static' attribute of the Object tag.

  * Added a more informative message in Compile.py if there are warnings
    that exceed the current warning level, explaining how to use the
    '--warn=X' option.

  * Changed the format of the CHANGES.current file.  Main points are now
    prefixed by a '*', and subpoints by a '+'.  Indent is now 2 spaces,
    and the max line width is 78.  A syntax highlighting file for vim to
    support this format can be downloaded from:
           http://csp.sourceforge.net/downloads/CHANGES.vim

  * Added deprecation warnings for <Curve> and <Table> xml tags.

  * Improved and added some doxygen comments.

  * Made InterfaceRegistry::addInterface private.
   
  * Made Referenced copy and assignment operators private (and 
    unimplemented).

==> NOTE all data archives must be fully rebuilt to use these changes.

2003-10-09: onsight
  * Added simdata:: prefix to Ref<N> in class FindVisitor and FindAllVisitor
    (Composite.h) to fix msvc namespace resolution problems.

  * Renamed 'interface' variables in InterfaceRegistry to 'objectinterface'
    to avoid a msvc reserved keyword.

2003-09-27: onsight
  * Added the VisualStudio2003 directory from the main trunk, along with
    Stormbringer's patches to the project file.

2003-09-17: onsight
  * Changed Real::asString() to use std::stringstream instead of snprintf.

  * Changed DataArchive to use std::stringstream for an error message.

  * Fixed including std headers into simdata namespace in Date.cpp.

  * Fixed numerous double->float conversions (mostly in LUT.cpp).

  * Fixed numerous shadowed variables/methods in Quat, Matrix, Vector, UTM, 
    GeoPos, and others.

  * Added additional warning flags for g++.

==> NOTE changes to the ObjectInterface templates trigger a regression in 
    swig 1.3.19. Use either 1.3.16 or the most recent cvs (pre-1.3.20).

==> NOTE that Quaternion.h/cpp are now Quat.h/cpp

2003-09-07: onsight
  * Fixed signed/unsigned comparisons in Composite.h

2003-09-05: onsight
  * Added Composite.h, which contains template classes for implementing 
    the Composite/Visitor design pattern.

  * Improved doxygen comments, small bug fixes, added isContainer and 
    canBeAdded properties, adding logging of warning messages.

2003-09-04: onsight
  * Changed Referenced from a nonvirtual to a virtual base class of Object.

2003-08-25: onsight
  * Refactored InterfaceProxy, moving most of the functionality into the 
    InterfaceProxyBase class.  The base class now maintains a list of 
    ObjectInterface instances that is used to access externalized member 
    variables.  MemberAccessor classes are now fully encapsulated within 
    the templated ObjectInterface classes, so that the ObjectInterfaceBase
    class can be extended in Python without any of the template meta-
    programming trickery that C++ demands.  

  * ObjectInterfaceBase now also keeps track of the object interface 
    hierarchy (both by class name and hash).

  * Access to the ObjectInterface corresponding to a particular member 
    variable name is now via a std::map lookup, which should be faster than 
    the previous implementation involving a linear search via base class 
    method calls.

2003-08-21: onsight
  * Convertied from pack/unpack to serialize for BaseType serialization:
    + Removed Pack.i, Pack.h, Pack.cpp
    + Added Archive.h, Archive.i
    + Appropriate changes to  setup.py and Source/Makefile

  * Object classes should now only implement serialize(Archive&) to save 
    and load themselves from data archives.  The Archive parameter is a 
    functor, which handles both saving and loading transparently.  So 
    instead of one list of Packer.pack(...) methods, and another identical 
    list of UnPacker.unpack(..) methods, you now just make one list of
    archive(..) calls:
   
     void MyClass::serialize(Archive& archive) {
        MyBaseClass::serialize(archive);
         archive(member_var1);
         archive(member_var2);
         ...
     }

    See the basic data type implementations for additional examples.
    Note however that the basic data types generally have more complicated 
    serialization routines than most object classes will require.  Many 
    basic data types test whether the archive is loading or saving and 
    respond differently depending on the situation.  For object classes 
    this should almost always be unnecessary.
   
  * Added equality and inequality operators to several base types.

  * Modified the Python serialization interface (still subject to further 
    changes).

  * Added a unit testing framework based on Python's unittest module:
    + runtests.py runs all the tests (not many so far)
    + SimData/Tests contains the unit test modules
    + SimData/Tests/ArchiveTests tests storage and retrieval
      of many basic data types (not complete yet)

2003-08-20: onsight
  * Tagged r0_3_4, version 0_3_5 started.
  * Version 0.4.0 branch started.
