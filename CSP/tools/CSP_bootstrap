# -*-python-*-
#
# Combat Simulator Project Workspace Setup Script
# Copyright (C) 2004 The Combat Simulator Project
# http://csp.sourceforge.net
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

"""
This is a bootstrap loader for the Combat Simulator Project.
It is intended to be placed into the Python path (typically
in site-packages).  When loaded, it replaces itself with the
CSP package from the current workspace (if possible).
"""

import os
import os.path
import sys
import string

# save the path
old_path = sys.path[:]

# remove this module from sys.modules
self = sys.modules['CSP']
del sys.modules['CSP']

# on windows it isn't uncommon/difficult to accidentally check out
# the repository under 'csp' instead of 'CSP'.  we go to some trouble
# here to detect this problem and complain accordingly.  this requires
# a case insensitive search for the root directory under windows.
# this isn't necessary (or desirable) under linux, but nevertheless
# we do the same in order to help keep the windows and linux development
# environments in sync.  For example, adding a directory 'csp' below the
# root CSP directory is a bad thing, and we will catch it on either
# platform.

# look for the root of the current workspace (first 'CSP' directory
# above cwd).
cwd = os.getcwd()
parts = cwd.split(os.sep)
if not 'CSP' in map(string.upper, parts):
	print
	print 'Error: trying to import CSP from outside of a workspace.'
	print 'Current working directory is %s' % cwd
	sys.exit(1)
while parts[-1].upper() != 'CSP':
	parts = parts[:-1]

# hmm, found some mixed or lower-case variant of 'CSP'.  the user
# probably made a mistake when checking out the repository.
if parts[-1] != 'CSP' and parts[-1].upper() == 'CSP':
	print
	print 'Error: the current workspace appears to be under a directory named "csp"'
	print '       ==> %s' % os.path.join(*parts)
	print
	print 'The correct top-level directory should be all uppercase ("CSP").  You may'
	print 'have made a mistake when checking out the repository (which is easy to do'
	print 'with TortoiseSVN and other GUI clients).  Please rename "csp" to "CSP" and'
	print 'try again.'
	sys.exit(1)

CSP_PATH = os.path.sep.join(parts[:-1])
ROOT = os.path.join(CSP_PATH, 'CSP')

if not os.path.exists(os.path.join(ROOT, '.svn')):
	print
	print 'Warning: %s does not contain .svn and may not be a valid CSP workspace.' % ROOT

# load the real CSP package.  we strip away the original sys.path to
# prevent this module from being loaded recursively on failure.  the
# only problem is that the real CSP package __init__ needs to the
# full path to import dl.  the expedient (but ugly, ugly) workaround
# is to cache the full path in sys.CSP_PATH, which the CSP module
# uses to restore the full path (after which it deletes sys.CSP_PATH).
sys.path = [CSP_PATH]
sys.CSP_PATH = [CSP_PATH] + old_path

try:
	import CSP
except ImportError, e:
	# cleanup, notify, and pass the error along.
	del sys.CSP_PATH
	sys.path = old_path
	print
	print 'Unable to bootstrap a CSP module space from the current working directory.'
	raise

# restore the path
sys.path = [CSP_PATH] + old_path

