/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_STRING_UTILS_H
#define OSGEARTH_STRING_UTILS_H 1

#include <osgEarth/Common>
#include <string>

namespace osgEarth
{
    static std::string&
    replaceIn( std::string& s, const std::string& sub, const std::string& other)
    {
        if ( sub.empty() ) return s;
        size_t b=0;
        for( ; ; )
        {
            b = s.find( sub, b );
            if ( b == s.npos ) break;
            s.replace( b, sub.size(), other );
            b += other.size();
        }
        return s;
    }

    // by Rodrigo C F Dias
    // http://www.codeproject.com/KB/stl/stdstringtrim.aspx
    static
    std::string trim( const std::string& in )
    {
        std::string whitespace (" \t\f\v\n\r");
        std::string str = in;
        std::string::size_type pos = str.find_last_not_of( whitespace );
        if(pos != std::string::npos) {
            str.erase(pos + 1);
            pos = str.find_first_not_of( whitespace );
            if(pos != std::string::npos) str.erase(0, pos);
        }
        else str.erase(str.begin(), str.end());
        return str;
    }

    static
    bool startsWith( const std::string& ref, const std::string& pattern )
    {
        return ref.find( pattern ) == 0;
    }

    // http://stackoverflow.com/questions/53849/how-do-i-tokenize-a-string-in-c
    class StringTokenizer 
    {
    public:
        StringTokenizer(const std::string& s)
            : _string(s), _offset(0), _delimiters(" \t\n\r") { }
        StringTokenizer(const std::string& s, const std::string& delimiters)
            : _string(s), _offset(0), _delimiters(delimiters) { }
        bool nextToken() {
            return nextToken( _delimiters ); }
        bool nextToken(const std::string& delimiters) {
            size_t i = _string.find_first_not_of(delimiters, _offset);
            if (std::string::npos == i) {
                _offset = _string.length();
                return false;
            }
            size_t j = _string.find_first_of(delimiters, i);
            if (std::string::npos == j) {
                _token = _string.substr(i);
                _offset = _string.length();
                return true;
            }
            _token = _string.substr(i, j - i);
            _offset = j;
            return true;
        }
        std::string token() const { 
            return trim( _token );
        }
    protected:
        size_t _offset;
        const std::string _string;
        std::string _token;
        std::string _delimiters;
    };

    static
    void split( const std::string& input, const std::string& delims, std::vector<std::string>& output, bool allowEmpties =true )
    {
        StringTokenizer t(input, delims);
        while( t.nextToken() )
            if ( allowEmpties || !t.token().empty() )
                output.push_back( t.token() );
    }
}

#endif // OSGEARTH_STRING_UTILS_H

