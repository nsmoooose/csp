NOTE that the second point under GENERAL below has been implemented
in this version.  The resulting CHU files are incompatible with the
original demo.  The new format uses version number 10, which is in
no way officially allocated, so it is likely to coincide with
newer official formats.  Once the official chunk lod tools support
an efficient toc, this version of heightfield_chunker should be 
replaced. --Onsight 10/2003

ORIGINAL TODO FROM TU'S DEMO (osgChunkLod-0.1.tar.gz):
======================================================================

GENERAL

* rationalize the executable names.

* change the chunk file format: put the table-of-contents in the
  beginning (or end), with file offsets to the chunk data itself (so
  chunkdemo doesn't have to scan the entire chunk file at startup).

* Adaptive detail.  This is a compression approach where less detail
  is used in areas that it's known that the viewpoint will stay far
  away from.  Like in Soul Ride, and my adaptive quadtree demo (and
  virtually every game since the beginning of time...).  This is
  mostly a matter of describing the desired LOD info to the chunker,
  and letting it prune the chunk tree.

* demonstrate putting several chunks next to each other -- most
  big-terrain games want this kind of functionality for paging
  purposes.  Also it's easier to handle really giant datasets in
  pieces, because otherwise you run into filesystem limitations and
  processing time nightmares.


HEIGHTFIELD CHUNKER

* automatically determine a good tree depth.

* percentage done estimate

* support multiple input datasets at different resolutions, and be
  able to specify variable LOD.

* georeferencing?

* localized, bottom up processing?  more VM friendly; try a swizzled
  format?  Generally make the chunking process quicker.


CHUNKDEMO

* Command-line args for the starting viewpoint & direction

* Delve into the window bit depth some more -- I don't think we're
  always actually getting 32 bits when it claims we are.

* IMPORTANT OPTIMIZATION TARGET:
  wglShareLists/whatever-the-X-equivalent is, so that the textures can
  be built by the loader thread.  Short of that, maybe a homemade
  alternative to grody gluBuild2DMipmaps() would cut down on latency.
  As it is, even with threading, there are still some annoying
  framerate hitches that are not entirely necessary.

* Investigate the growing heap -- Bug?  Fragmentation?
  Win32-specific?

* try a vertex shader for lerping.  (NOTE: The demo can someimes
  achieve near-maximum triangle throughput on my 1GHz machine, even
  with the substantial per-vertex CPU processing that goes on during
  streaming, so the vertex shader may not be worth it for apps that
  aren't CPU limited.)

* No collision-detection right now!  The chunk data is render-friendly
  but collision-query unfriendly.  The options as I see it are:

  1) Implement some kind of indexing acceleration structure, to direct
     collision queries to the appropriate faces in the vertex data.  A
     grid of lists would probably be fine.  This isn't too bad,
     possibly.  I'm pretty sure it'll have substandard speed for
     queries, but maybe not too bad.  I think this is what John
     Ratcliff once said he was doing for Planetside.

  2) Use separate collision info.  Perhaps use a compressed linear
     quadtree per chunk; these should use a small fraction of the
     render data size, give quick queries, and allow different
     representation of collidable and visible (e.g. for some games you
     may not need any collide geometry at all in large inaccessible
     areas; for a flight sim maybe you only need low-res collision
     data).  Also you can easily encode surface-type data in an
     alternate representation.

* Doll it up with a skydome, fog, trees, etc.

* Make a fun game :)


HEIGHTFIELD SHADER

* This thing is basically one big hack at the moment.  It's not fast,
  nor is it flexible.

* Use Lua configuration to specify shaders.  Would be nice to do the
  standard tricks, like choose an "ecosystem" based on slope &
  altitude & curvature.

* Noise, blending, etc.

* Better lighting, with shadows, and possibly some crude secondary
  lighting.

MAKETQT

* Try higher fidelity base-level tiles
