# -*-python-*-
#
# Combat Simulator Project Workspace Setup Script
# Copyright (C) 2004 The Combat Simulator Project
# http://csp.sourceforge.net
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

"""
This is a bootstrap loader for the Combat Simulator Project.
It is intended to be placed into the Python path (typically
in site-packages).  When loaded, it replaces itself with the
csp package from the current workspace (if possible).
"""

import os
import sys

BOOTSTRAP_VERSION = 2

# save the path
old_path = sys.path[:]

# remove this module from sys.modules
self = sys.modules['csp']
del sys.modules['csp']

# note that we use os.sep and normal string splitting/joining instead
# of os.path.split/join since the latter behaves a bit strangely under
# windows.  for example, os.path.split('c:\\csp') gives ['c:\\csp']
# rather than ['c:', 'csp'].  actually, neither one is ideal ;-)

# look for the root of the current workspace (first 'csp' directory
# above cwd).
cwd = os.getcwd()
parts = cwd.split(os.sep)
if not 'csp' in parts:
	print
	print 'Error: trying to import csp from outside of a workspace.'
	print 'Current working directory is %s' % cwd
	sys.exit(1)
while parts[-1].lower() != 'csp':
	parts = parts[:-1]

CSP_PATH = os.sep.join(parts[:-1])
ROOT = os.sep.join([CSP_PATH, 'csp'])

if not os.path.exists(os.sep.join([ROOT, '.svn'])):
	print
	print 'Warning: %s does not contain .svn and may not be a valid CSP workspace.' % ROOT

# load the real csp package.  we strip away the original sys.path to
# prevent this module from being loaded recursively on failure.  the
# only problem is that the real csp package __init__ needs to the
# full path to import dl.  the expedient (but ugly, ugly) workaround
# is to cache the full path in sys.CSP_PATH, which the csp module
# uses to restore the full path (after which it deletes sys.CSP_PATH).
sys.path = [CSP_PATH]
sys.CSP_PATH = [CSP_PATH] + old_path

try:
	import csp
except ImportError, e:
	# cleanup, notify, and pass the error along.
	del sys.CSP_PATH
	sys.path = old_path
	print
	print 'Unable to bootstrap a csp module space from the current working directory.'
	raise

csp.BOOTSTRAP_VERSION = BOOTSTRAP_VERSION

# restore the path
sys.path = [CSP_PATH] + old_path

