.TH "SharedMemPager" 3 "22 May 2003" "CommonC++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SharedMemPager \- The shared mempager uses a mutex to protect key access methods. mutex protected memory pager. 
.SH SYNOPSIS
.br
.PP
\fC#include <misc.h>\fP
.PP
Inherits \fBMemPager\fP, and \fBMutex\fP.
.PP
.SS "Protected Methods"

.in +1c
.ti -1c
.RI "\fBSharedMemPager\fP (int pagesize=4096)"
.br
.RI "\fICreate a mempager mutex pool.\fP"
.ti -1c
.RI "void \fBpurge\fP (void)"
.br
.RI "\fIPurge the memory pool while locked.\fP"
.ti -1c
.RI "void * \fBfirst\fP (size_t \fBsize\fP)"
.br
.RI "\fIGet the first memory page after locking.\fP"
.ti -1c
.RI "void * \fBalloc\fP (size_t \fBsize\fP)"
.br
.RI "\fIGet the last memory page after locking.\fP"
.in -1c
.SH "DETAILED DESCRIPTION"
.PP 
The shared mempager uses a mutex to protect key access methods. mutex protected memory pager.
.PP
This class is used when a mempager will be shared by multiple threads.
.PP
\fBAuthor: \fP
.in +1c
David Sugar <dyfet@ostel.com> 
.PP
.SH "CONSTRUCTOR & DESTRUCTOR DOCUMENTATION"
.PP 
.SS "SharedMemPager::SharedMemPager (int pagesize = 4096)\fC [protected]\fP"
.PP
Create a mempager mutex pool.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIpagesize\fP\fP
page size for allocation. 
.SH "MEMBER FUNCTION DOCUMENTATION"
.PP 
.SS "void* SharedMemPager::alloc (size_t size)\fC [protected, virtual]\fP"
.PP
Get the last memory page after locking.
.PP
\fBReturns: \fP
.in +1c
allocated memory space. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIsize\fP\fP
of request. 
.PP
Reimplemented from \fBMemPager\fP.
.SS "void* SharedMemPager::first (size_t size)\fC [protected, virtual]\fP"
.PP
Get the first memory page after locking.
.PP
\fBReturns: \fP
.in +1c
allocated memory space. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIsize\fP\fP
of request. 
.PP
Reimplemented from \fBMemPager\fP.
.SS "void SharedMemPager::purge (void)\fC [protected]\fP"
.PP
Purge the memory pool while locked.
.PP
Reimplemented from \fBMemPager\fP.

.SH "AUTHOR"
.PP 
Generated automatically by Doxygen for CommonC++ from the source code.
