/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_COMMON_H
#define OSGEARTH_COMMON_H 1

#include <osgEarth/Export>
#include <osgEarth/Notify>
#include <osg/Referenced>
#include <osg/ref_ptr>
#include <string>
#include <sstream>
#include <osg/io_utils>
#include <map>
#include <algorithm>

//#ifdef WIN32
//#  include <windows.h>
//#endif


namespace osgEarth
{
    // general-purpose name/value pair set.
    struct Properties : public std::map<std::string,std::string> {
        std::string get( const std::string& key ) const {
            std::map<std::string,std::string>::const_iterator i = find(key);
            return i != end()? i->second : std::string();
        }
    };

    // converts a string to primitive using serialization
    template<typename T> inline T
    as( const std::string& str, T default_value )
    {
        T temp = default_value;
        std::istringstream strin( str );
        if ( !strin.eof() ) strin >> temp;
        return temp;
    }

    // template specialization for a bool
    template<> inline bool
    as<bool>( const std::string& str, bool default_value )
    {
        std::string temp = str;
        std::transform( temp.begin(), temp.end(), temp.begin(), ::tolower );
        return
            temp == "true" || temp == "yes" || temp == "on" ? true :
            temp == "false" || temp == "no" || temp == "off" ? false :
            default_value;
    }

    // template specialization for string
    template<> inline std::string
    as<std::string>( const std::string& str, std::string default_value )
    {
        return str;
    }

    // converts a primitive to a string
    // TODO: precision??
    template<typename T> inline std::string
    toString(const T value)
    {
        std::stringstream out;
        out << value;
        std::string outStr;
        outStr = out.str();
        return outStr;
    }

    // template speciallization for a bool to print out "true" or "false"
    template<> inline std::string
    toString<bool>(const bool value)
    {
      return value ? "true" : "false";
    }

    template<typename T> struct optional {
        optional() : _set(false), _value(T()), _defaultValue(T()) { }
        optional(T defaultValue) : _set(false), _value(defaultValue), _defaultValue(defaultValue) { }
        optional(T defaultValue, T value) : _set(true), _value(value), _defaultValue(defaultValue) { }
        optional(const optional<T>& rhs) { (*this)=rhs; }
        virtual ~optional() { }
        optional<T>& operator =(const optional<T>& rhs) { _set=rhs._set; _value=rhs._value; _defaultValue=rhs._defaultValue; return *this; }
        const T& operator =(const T& value) { _set=true; _value=value; return _value; }
        bool operator ==(const optional<T>& rhs) const { return _set && rhs._set && _value==rhs._value; }
        bool operator !=(const optional<T>& rhs) const { return !( (*this)==rhs); }
        bool operator ==(const T& value) const { return _value==value; }
        bool operator !=(const T& value) const { return _value!=value; }
        bool isSetTo(const T& value) const { return _set && _value==value; } // differs from == in that the value must be explicity set
        bool isSet() const { return _set; }
        void unset() { _set = false; _value=_defaultValue; }

        //T& get() { return _value; }
        const T& get() const { return _value; }
        const T& value() const { return _value; }
        const T& defaultValue() const { return _defaultValue; }

        //operator T* () const { _set=true; return &_value; }
        operator const T*() const { return &_value; }

        T* operator ->() { _set=true; return &_value; }
        const T* operator ->() const { return &_value; }

    private:
        bool _set;
        T _value;
        T _defaultValue;
        typedef T* optional::*unspecified_bool_type;

    public:
        operator unspecified_bool_type() const { return 0; } //return valid()? &ref_ptr::_ptr : 0; }
    };

}



#endif // OSGEARTH_COMMON_H
