SimData - A library for efficient use of data XML in simulations.

Release 0.4.0

Copyright (C) 2002, 2003 Mark Rose <mrose@stm.lbl.gov>

See COPYING for details.

----------------------------------------------------------------------

CAVEATS

This library is ALPHA! Do not expect it to be polished in any way. It
does work, at least under the proper conditions, which is why it has
been released. Only through testing and use will it evolve into a robust
and stable platform for utilizing XML data in simulations.

SimData is written primarily for the Combat Simulator Project (CSP)
<http://csp.sourceforge.net>. It is, nonetheless, intended to be a fully
independent library that can be used with any application desiring fast
runtime access to large, static XML data sets.

SimData was initially developed under Linux using GCC 2.95 and 3.0.
Current development occurs mainly under GCC 3.2. The library also
receives routine testing under MS VC6 and now .NET as part of the Combat
Simulator Project. If you encounter problems, please report them (with
patches if possible) to the CSP developer's forum at
http://csp.sourceforge.net/forum.


REQUIREMENTS

Minimally, SimData can operate as a standalone library that provides
a number of C++ data classes useful for simulations.  In this mode
there are no external dependencies.

To use the XML interface and data archiving features, however, requires
both SWIG and Python.  SWIG is available from http://www.swig.org, and
should be version 1.3.16 or newer.  Python is preinstalled on many
Linux systems, and prepackaged distributions for both Windows and
Linux are available from http://www.python.org.  Python version 2.2 or
newer is required.  Under Windows, be sure to add the Python path to 
your global path so that VC can find it.

If you are using MS VC6 you will also need have at least SP5 installed
and a functional STL implementation, such as STLport (version 4.5.3 or
newer).


BUILDING: ANNOUNCEMENT

The build process is currently depends on Makefiles (Linux) and VC
project files (Windows), but will likely transition to Python's
DistUtils soon.  Stay tuned....


BUILDING: LINUX

On Linux, edit the top level Makefile to customize any settings to your
particular system. The path to the Python headers is an example of a
parameter you might want to check.

Next, just run make in the top-level directory. If all goes well this
will create cSimData.py, _cSimData.so, and libSimData.a in the Source
directory.


BUILDING: VC6/.NET

Load SimDataMSVC.dsw and build it in release mode. In the process, it
should create a new file called cSimData_wrap.cpp (this file name should
already be in project/Source) from cSimData.i which is parsed by SWIG.


TESTING

As a quick test, change to the Source directory and run Python. Try
typing "import SimData". You should see a line similar to "loaded @
0x4883012". If not, something went wrong... post to the CSP developer's
forum and we can try to find the problem.


INSTALLING AND USING SIMDATA

Currently you should not do anything to install SimData.  CSPSim expects
SimData to be in the same relative path as it is in the CVS tree.  This
situation is not optimal and will change as soon as the DistUtils 
installer is working.


