.TH "ThreadKey" 3 "22 May 2003" "CommonC++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ThreadKey \- This class allows the creation of a thread context unique 'pointer' that can be set and retrieved and can be used to create thread specific data areas for implementing 'thread safe' library routines. container for thread specific data storage. 
.SH SYNOPSIS
.br
.PP
\fC#include <thread.h>\fP
.PP
.SS "Public Methods"

.in +1c
.ti -1c
.RI "\fBThreadKey\fP ()"
.br
.RI "\fICreate a unique thread specific container.\fP"
.ti -1c
.RI "virtual \fB~ThreadKey\fP ()"
.br
.RI "\fIDestroy a thread specific container and any contents reserved.\fP"
.ti -1c
.RI "void * \fBgetKey\fP (void)"
.br
.RI "\fIGet the value of the pointer for the thread specific data container.\fP"
.ti -1c
.RI "void \fBsetKey\fP (void *)"
.br
.RI "\fISet the value of the pointer for the current thread specific execution context.\fP"
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBThreadImpl\fP"
.br
.in -1c
.SH "DETAILED DESCRIPTION"
.PP 
This class allows the creation of a thread context unique 'pointer' that can be set and retrieved and can be used to create thread specific data areas for implementing 'thread safe' library routines. container for thread specific data storage.
.PP
Finally, Common C++ supports a thread-safe '\fBAtomicCounter\fP' class. This can often be used for reference counting without having to protect the counter with a separate \fBMutex\fP counter. This lends to lighter-weight code.
.PP
\fBAuthor: \fP
.in +1c
David Sugar <dyfet@ostel.com> 
.PP
.SH "CONSTRUCTOR & DESTRUCTOR DOCUMENTATION"
.PP 
.SS "ThreadKey::ThreadKey ()"
.PP
Create a unique thread specific container.
.PP
.SS "virtual ThreadKey::~ThreadKey ()\fC [virtual]\fP"
.PP
Destroy a thread specific container and any contents reserved.
.PP
.SH "MEMBER FUNCTION DOCUMENTATION"
.PP 
.SS "void* ThreadKey::getKey (void)"
.PP
Get the value of the pointer for the thread specific data container.
.PP
A unique pointer can be set for each execution context.
.PP
\fBReturns: \fP
.in +1c
a unique void * for each execution context. 
.SS "void ThreadKey::setKey (void *)"
.PP
Set the value of the pointer for the current thread specific execution context.
.PP
This can be used to store thread context specific data.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fI-\fP\fP
ptr to thread context specific data. 
.SH "FRIENDS AND RELATED FUNCTION DOCUMENTATION"
.PP 
.SS "friend class ThreadImpl\fC [friend]\fP"
.PP


.SH "AUTHOR"
.PP 
Generated automatically by Doxygen for CommonC++ from the source code.
