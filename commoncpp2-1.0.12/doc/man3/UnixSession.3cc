.TH "UnixSession" 3 "22 May 2003" "CommonC++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
UnixSession \- The Unix domain session is used to primarily to represent a client connection that can be managed on a seperate thread. Threaded streamable unix domain socket with non-blocking constructor. 
.SH SYNOPSIS
.br
.PP
\fC#include <unix.h>\fP
.PP
Inherits \fBUnixStream\fP, and \fBThread\fP.
.PP
.SS "Public Methods"

.in +1c
.ti -1c
.RI "\fBUnixSession\fP (const char *pathname, int \fBsize\fP=512, int pri=0, int stack=0)"
.br
.RI "\fICreate a Unix domain socket that will be connected to a local server server and that will execute under it's own thread.\fP"
.ti -1c
.RI "\fBUnixSession\fP (\fBUnixSocket\fP &server, int \fBsize\fP=512, int pri=0, int stack=0)"
.br
.RI "\fICreate a Unix domain socket from a bound Unix domain server by accepting a pending connection from that server and execute a thread for the accepted connection.\fP"
.in -1c
.SS "Protected Methods"

.in +1c
.ti -1c
.RI "int \fBwaitConnection\fP (\fBtimeout_t\fP \fBtimeout\fP=TIMEOUT_INF)"
.br
.RI "\fINormally called during the thread Initial() method by default, this will wait for the socket connection to complete when connecting to a remote socket.\fP"
.ti -1c
.RI "\fBCCXX_MEMBER\fP (void) initial(void)"
.br
.RI "\fIThe initial method is used to esablish a connection when delayed completion is used.\fP"
.ti -1c
.RI "\fBCCXX_MEMBER\fP (void) final(void)"
.br
.RI "\fIUnixSession derived objects can be freely created with 'new' and safely terminate their 'Run' method on their own by self-deleting when the thread terminates.\fP"
.in -1c
.SH "DETAILED DESCRIPTION"
.PP 
The Unix domain session is used to primarily to represent a client connection that can be managed on a seperate thread. Threaded streamable unix domain socket with non-blocking constructor.
.PP
The Unix domain session also supports a non-blocking connection scheme which prevents blocking during the constructor and moving the process of completing a connection into the thread that executes for the session.
.PP
\fBAuthor: \fP
.in +1c
Alex Pavloff <alex@pavloff.net> 
.PP
.SH "CONSTRUCTOR & DESTRUCTOR DOCUMENTATION"
.PP 
.SS "UnixSession::UnixSession (const char * pathname, int size = 512, int pri = 0, int stack = 0)"
.PP
Create a Unix domain socket that will be connected to a local server server and that will execute under it's own thread.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIpathname\fP\fP
path to socket 
.TP
\fB\fIsize\fP\fP
of streaming buffer. 
.TP
\fB\fIpri\fP\fP
execution priority relative to parent. 
.TP
\fB\fIstack\fP\fP
allocation needed on some platforms. 
.SS "UnixSession::UnixSession (\fBUnixSocket\fP & server, int size = 512, int pri = 0, int stack = 0)"
.PP
Create a Unix domain socket from a bound Unix domain server by accepting a pending connection from that server and execute a thread for the accepted connection.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIserver\fP\fP
unix domain socket to accept a connection from. 
.TP
\fB\fIsize\fP\fP
of streaming buffer. 
.TP
\fB\fIpri\fP\fP
execution priority relative to parent. 
.TP
\fB\fIstack\fP\fP
allocation needed on some platforms. 
.SH "MEMBER FUNCTION DOCUMENTATION"
.PP 
.SS "UnixSession::CCXX_MEMBER (void)\fC [inline, protected]\fP"
.PP
UnixSession derived objects can be freely created with 'new' and safely terminate their 'Run' method on their own by self-deleting when the thread terminates.
.PP
.SS "UnixSession::CCXX_MEMBER (void)\fC [protected]\fP"
.PP
The initial method is used to esablish a connection when delayed completion is used.
.PP
This assures the constructor terminates without having to wait for a connection request to complete. 
.SS "int UnixSession::waitConnection (\fBtimeout_t\fP timeout = TIMEOUT_INF)\fC [protected]\fP"
.PP
Normally called during the thread Initial() method by default, this will wait for the socket connection to complete when connecting to a remote socket.
.PP
One might wish to use \fBsetCompletion()\fP to change the socket back to blocking I/O calls after the connection completes. To implement the session one must create a derived class which implements Run().
.PP
\fBReturns: \fP
.in +1c
0 if successful, -1 if timed out. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fItimeout\fP\fP
to wait for completion in milliseconds. 

.SH "AUTHOR"
.PP 
Generated automatically by Doxygen for CommonC++ from the source code.
