# -*-python-*-
#
# Copyright 2004 Mark Rose <mkrose@users.sourceforge.net>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
print('COMBAT SIMULATOR PROJECT - Build System')

EnsureSConsVersion(4, 6, 0)

# several global targets (e.g. 'all') are shared between copied subenvironments;
# this is ok and the warning is annoying. This warning is shown when building
# doxygen documentation where the target is index.html for both csplib and cspsim.
import SCons.Warnings
SCons.Warnings.suppressWarningClass(SCons.Warnings.DuplicateEnvironmentWarning)

import os
import sys
from tools import build

is_windows = sys.platform == 'win32'
is_linux = sys.platform == 'linux'

build.CheckPythonVersion('3.10')
build.CheckWXVersion('2.6')
build.CheckLXMLVersion()

build.ExternalLibrary(
    name = 'jpeg',
    config = [
        build.UnixLibConfig(lib='libjpeg', symbol='jpeg_resync_to_restart'),
        build.WindowsLibConfig('user32'),
    ])

build.ExternalLibrary(
    name = 'opengl',
    config = [
        build.WindowsLibConfig('glu32'),
        build.WindowsLibConfig('opengl32'),
    ])

build.ExternalLibrary(
    name = 'windows',
    config = [
        build.WindowsLibConfig('advapi32'),
        build.WindowsLibConfig('ws2_32'),
    ])

build.ExternalLibrary(
    name = 'sound',
    config = [
        build.UnixLibConfig(lib='openalpp'),
        build.PkgConfig(package='freealut', version='0.2'),
        build.PkgConfig(package='vorbisfile', version='1.1.0'),
    ])

build.ExternalLibrary(
    name = 'sigc',
    config = [
        build.PkgConfig(package='sigc++-2.0', version='2.0.6', label='sigc'),
    ])

build.ExternalLibrary(
    name = 'osg',
    config = [
        build.PkgConfig(package='openscenegraph', version='3.0.1'),
        build.PkgConfig(package='openthreads', version='2.3'),
        # build.PkgConfig(package='osgal', version='0.6.1'),
        build.UnixLibConfig(lib='libosgAL'),
    ])

build.ExternalLibrary(
    name = 'sdl',
    config = [
        build.PkgConfig(package='sdl', version='1.2.5'),
    ])

# TODO check if boost_system is needed on linux
# TODO check if -mt is also present in Linux.

build.ExternalLibrary(
    name = 'boost',
    config = [
        # build.UnixLibConfig(lib='libboost_system', label='boost system'),
        build.UnixLibConfig(lib='libboost_filesystem-mt', label='boost filesystem'),
    ])

build.ExternalLibrary(
    name = 'python',
    config = [
        build.UnixLibConfig(lib='python%d.%d' % tuple(sys.version_info[:2]), label='python library'),
    ])


Help("""
COMMON TARGETS:

  scons config           check for necessary headers and libraries
  scons all              build everything
  scons all debug=1      build everything in debug mode (windows, linux)
  scons all debug=2      build everything in full debug mode (windows)
  scons cspsim           build the main flight simulator client
  scons layout           build the theater layout tool version 1
  scons layout2          build the theater layout tool version 2
  scons googlemaps       build the googlemaps tool

  scons dox              generate doxygen documentation

  scons tests            build all unittests
  scons runtests         build and run all unittests
  scons csplib.runtests  build and run all unittests in csplib

  scons examples         build all examples
""")

INCLUDE = [
    '#/..',
    build.GetPythonInclude(),
]

PLATFORM="linux"
if is_windows:
    PLATFORM="mingw"

env = Environment(PLATFORM=PLATFORM, tools=['default', 'swig'])
env.PrependENVPath("PATH", [r"C:\msys64\ucrt64\bin"])
env.Replace(CXXFILESUFFIX='.cpp')
env.Replace(CPPPATH=INCLUDE)
env.Replace(SWIGFLAGS=Split('-python -c++'))
env.Replace(SWIGPATH=INCLUDE)

debug = ARGUMENTS.get('debug', 0)
if int(debug) == 0:
    print('Building release configuration')
    gcc = build.GetGCCVersion()
    env.Replace(CXXFLAGS=Split('-std=gnu++17 -O2 -W -Wall -pedantic -fno-strict-aliasing -fvisibility=hidden -Wno-unused-local-typedefs'))
    env.Replace(SWIGCXXFLAGS=Split('-O2 -g'))
    env.Replace(ARFLAGS=Split('cr'))
elif int(debug) == 1:
    print('Building debug configuration (no optimizations)')
    gcc = build.GetGCCVersion()
    env.Replace(CXXFLAGS=Split('-std=gnu++17 -O0 -g -W -Wall -pedantic -fno-strict-aliasing -fvisibility=hidden -Wno-unused-local-typedefs'))
    env.Replace(SWIGCXXFLAGS=Split('-O2 -g'))
    env.Replace(ARFLAGS=Split('cr'))

    # Disable inlining to prevent valgrind to be confused.
    env.AppendUnique(CXXFLAGS=Split('-fno-inline'))
    env.AppendUnique(CXXFLAGS=Split('-fno-builtin'))

    # Some stack protection mechanisms can initialize stack variables,
    # hiding uninitialized memory issues from Valgrind.
    env.AppendUnique(CXXFLAGS=Split('-fno-stack-protector'))

    # LTO can inline functions across translation units, making
    # Valgrindâ€™s checks less effective.
    env.AppendUnique(CXXFLAGS=Split('-fno-lto'))

build.GlobalSetup(env)

# Make it possible for clang to set its tools. This makes it possible to use
# scan-build tool to analyze the code. Instructions to set this up:
# https://stackoverflow.com/a/9305378
env["CC"] = os.getenv("CC") or env["CC"]
env["CXX"] = os.getenv("CXX") or env["CXX"]
env["ENV"].update(x for x in os.environ.items() if x[0].startswith("CCC_"))

env.SConscript('csplib/SConscript', duplicate=0, exports='env build', variant_dir="csplib/.bin")
env.SConscript('cspsim/SConscript', duplicate=0, exports='env build', variant_dir="cspsim/.bin")
env.SConscript('cspwf/SConscript', duplicate=0, exports='env build', variant_dir="cspwf/.bin")
env.SConscript('modules/SConscript', duplicate=0, exports='env build', variant_dir="modules/.bin")
env.SConscript('examples/clouds/SConscript', duplicate=0, exports='env build', variant_dir="examples/clouds/.bin")
env.SConscript('examples/clouds-scene/SConscript', duplicate=0, exports='env build', variant_dir="examples/clouds-scene/.bin")
env.SConscript('examples/objectmodel/SConscript', duplicate=0, exports='env build', variant_dir="examples/objectmodel/.bin")
env.SConscript('examples/osgviewer_sdlinput/SConscript', duplicate=0, exports='env build', variant_dir="examples/osgviewer_sdlinput/.bin")
# env.SConscript('examples/sdl-viewer/SConscript', duplicate=0, exports='env build', variant_dir="examples/sdl-viewer/.bin")
env.SConscript('examples/sky/SConscript', duplicate=0, exports='env build', variant_dir="examples/sky/.bin")
env.SConscript('examples/terrain-demeter/SConscript', duplicate=0, exports='env build', variant_dir="examples/terrain-demeter/.bin")
env.SConscript('examples/wf-listbox/SConscript', duplicate=0, exports='env build', variant_dir="examples/wf-listbox/.bin")
env.SConscript('examples/wf-scrollbars/SConscript', duplicate=0, exports='env build', variant_dir="examples/wf-scrollbars/.bin")
env.SConscript('examples/wf-signals/SConscript', duplicate=0, exports='env build', variant_dir="examples/wf-signals/.bin")
env.SConscript('examples/wf-window/SConscript', duplicate=0, exports='env build', variant_dir="examples/wf-window/.bin")
env.SConscript('tools/canopy/SConscript', duplicate=0, exports='env build', variant_dir="tools/canopy/.bin")
# env.SConscript('tools/layout/SConscript', duplicate=0, exports='env build', variant_dir="tools/layout/.bin")
env.SConscript('tools/layout2/SConscript', duplicate=0, exports='env build', variant_dir="tools/layout2/.bin")
env.SConscript('tools/googlemaps/SConscript', duplicate=0, exports='env build', variant_dir="tools/googlemaps/.bin")

env.FinalizePackages()

Default("all")
