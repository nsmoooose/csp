.TH "Event" 3 "22 May 2003" "CommonC++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Event \- The Event class implements a feature originally found in the WIN32 API; event notification. \fBThread\fP synchornization on event notification. 
.SH SYNOPSIS
.br
.PP
\fC#include <thread.h>\fP
.PP
.SS "Public Methods"

.in +1c
.ti -1c
.RI "\fBEvent\fP ()"
.br
.ti -1c
.RI "virtual \fB~Event\fP ()"
.br
.ti -1c
.RI "void \fBreset\fP (void)"
.br
.RI "\fIOnce signaled, the Event class must be 'reset' before responding to a new signal.\fP"
.ti -1c
.RI "void \fBsignal\fP (void)"
.br
.RI "\fISignal the event for the waiting thread.\fP"
.ti -1c
.RI "bool \fBwait\fP (\fBtimeout_t\fP timer)"
.br
.RI "\fIWait either for the event to be signaled by another thread or for the specified timeout duration.\fP"
.ti -1c
.RI "bool \fBwait\fP (void)"
.br
.in -1c
.SH "DETAILED DESCRIPTION"
.PP 
The Event class implements a feature originally found in the WIN32 API; event notification. \fBThread\fP synchornization on event notification.
.PP
A target thread waits on a resetable Event, and one or more other threads can then signal the waiting thread to resume  execution. A timeout can be used to specify a wait duration in  milliseconds. The Event class must be reset before it can be used again  as a trigger. These event objects use a trigger/reset mechanism and are related to low level conditional variables.
.PP
@author: David Sugar <dyfet@ostel.com> 
.PP
.SH "CONSTRUCTOR & DESTRUCTOR DOCUMENTATION"
.PP 
.SS "Event::Event ()"
.PP
.SS "virtual Event::~Event ()\fC [virtual]\fP"
.PP
.SH "MEMBER FUNCTION DOCUMENTATION"
.PP 
.SS "void Event::reset (void)"
.PP
Once signaled, the Event class must be 'reset' before responding to a new signal.
.PP
\fBSee also: \fP
.in +1c
\fBsignal\fP 
.SS "void Event::signal (void)"
.PP
Signal the event for the waiting thread.
.PP
.SS "bool Event::wait (void)"
.PP
.SS "bool Event::wait (\fBtimeout_t\fP timer)"
.PP
Wait either for the event to be signaled by another thread or for the specified timeout duration.
.PP
\fBSee also: \fP
.in +1c
\fBsignal\fP 
.PP
\fBReturns: \fP
.in +1c
true if signaled, false if timed out. 
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fItimer\fP\fP
timeout in milliseconds to wait for a signal. 

.SH "AUTHOR"
.PP 
Generated automatically by Doxygen for CommonC++ from the source code.
