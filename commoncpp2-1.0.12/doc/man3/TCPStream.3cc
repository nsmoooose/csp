.TH "TCPStream" 3 "22 May 2003" "CommonC++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
TCPStream \- TCP streams are used to represent TCP client connections to a server by TCP protocol servers for accepting client connections. streamable TCP socket connection. 
.SH SYNOPSIS
.br
.PP
\fC#include <socket.h>\fP
.PP
Inherits \fBSocket\fP.
.PP
Inherited by \fBTCPSession\fP, \fBtcpstream\fP, and \fBURLStream\fP.
.PP
.SS "Public Methods"

.in +1c
.ti -1c
.RI "\fBTCPStream\fP (\fBTCPSocket\fP &server, int \fBsize\fP=512, bool throwflag=true, \fBtimeout_t\fP \fBtimeout\fP=0)"
.br
.RI "\fICreate a TCP stream by accepting a connection from a bound TCP socket acting as a server.\fP"
.ti -1c
.RI "\fBTCPStream\fP (const \fBInetHostAddress\fP &host, \fBtpport_t\fP port, int \fBsize\fP=512, bool throwflag=true, \fBtimeout_t\fP \fBtimeout\fP=0)"
.br
.RI "\fICreate a TCP stream by connecting to a TCP socket (on a remote machine).\fP"
.ti -1c
.RI "void \fBsetTimeout\fP (\fBtimeout_t\fP to)"
.br
.RI "\fISet the I/O operation timeout for socket I/O operations.\fP"
.ti -1c
.RI "\fBTCPStream\fP (const TCPStream &source)"
.br
.RI "\fIA copy constructor creates a new stream buffer.\fP"
.ti -1c
.RI "virtual \fB~TCPStream\fP ()"
.br
.RI "\fIFlush and empty all buffers, and then remove the allocated buffers.\fP"
.ti -1c
.RI "int \fBsync\fP (void)"
.br
.RI "\fIFlushes the stream input and output buffers, writes pending output.\fP"
.ti -1c
.RI "bool \fBisPending\fP (\fBPending\fP pend, \fBtimeout_t\fP \fBtimeout\fP=TIMEOUT_INF)"
.br
.RI "\fIGet the status of pending stream data.\fP"
.ti -1c
.RI "int \fBgetBufferSize\fP (void) const"
.br
.RI "\fIReturn the size of the current stream buffering used.\fP"
.in -1c
.SS "Protected Methods"

.in +1c
.ti -1c
.RI "\fBTCPStream\fP (bool throwflag=true)"
.br
.RI "\fIThe constructor required for 'tcpstream', a more C++ style version of the TCPStream class.\fP"
.ti -1c
.RI "void \fBallocate\fP (int \fBsize\fP)"
.br
.RI "\fIUsed to allocate the buffer space needed for iostream operations.\fP"
.ti -1c
.RI "void \fBendStream\fP (void)"
.br
.RI "\fIUsed to terminate the buffer space and cleanup the socket connection.\fP"
.ti -1c
.RI "int \fBunderflow\fP ()"
.br
.RI "\fIThis streambuf method is used to load the input buffer through the established tcp socket connection.\fP"
.ti -1c
.RI "int \fBuflow\fP ()"
.br
.RI "\fIThis streambuf method is used for doing unbuffered reads through the establish tcp socket connection when in interactive mode.\fP"
.ti -1c
.RI "int \fBoverflow\fP (int ch)"
.br
.RI "\fIThis streambuf method is used to write the output buffer through the established tcp connection.\fP"
.ti -1c
.RI "void \fBconnect\fP (const \fBInetHostAddress\fP &host, \fBtpport_t\fP port, int \fBsize\fP)"
.br
.RI "\fICreate a TCP stream by connecting to a TCP socket (on a remote machine).\fP"
.ti -1c
.RI "std::iostream * \fBtcp\fP (void)"
.br
.RI "\fIUsed in derived classes to refer to the current object via it's iostream.\fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBtimeout_t\fP \fBtimeout\fP"
.br
.ti -1c
.RI "int \fBbufsize\fP"
.br
.ti -1c
.RI "char * \fBgbuf\fP"
.br
.ti -1c
.RI "char * \fBpbuf\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "TCPStream & \fBcrlf\fP (TCPStream &)"
.br
.ti -1c
.RI "TCPStream & \fBlfcr\fP (TCPStream &)"
.br
.in -1c
.SH "DETAILED DESCRIPTION"
.PP 
TCP streams are used to represent TCP client connections to a server by TCP protocol servers for accepting client connections. streamable TCP socket connection.
.PP
The TCP stream is a C++ 'stream' class, and can accept streaming of data to and from other C++ objects using the << and >> operators.
.PP
TCPStream itself can be formed either by connecting to a bound network address of a TCP server, or can be created when 'accepting' a network connection from a TCP server.
.PP
\fBAuthor: \fP
.in +1c
David Sugar <dyfet@ostel.com> 
.PP
.SH "CONSTRUCTOR & DESTRUCTOR DOCUMENTATION"
.PP 
.SS "TCPStream::TCPStream (bool throwflag = true)\fC [protected]\fP"
.PP
The constructor required for 'tcpstream', a more C++ style version of the TCPStream class.
.PP
.SS "TCPStream::TCPStream (\fBTCPSocket\fP & server, int size = 512, bool throwflag = true, \fBtimeout_t\fP timeout = 0)"
.PP
Create a TCP stream by accepting a connection from a bound TCP socket acting as a server.
.PP
This performs an 'accept' call.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIserver\fP\fP
socket listening 
.TP
\fB\fIsize\fP\fP
of streaming input and output buffers. 
.TP
\fB\fIthrowflag\fP\fP
flag to throw errors. 
.TP
\fB\fItimeout\fP\fP
for all operations. 
.SS "TCPStream::TCPStream (const \fBInetHostAddress\fP & host, \fBtpport_t\fP port, int size = 512, bool throwflag = true, \fBtimeout_t\fP timeout = 0)"
.PP
Create a TCP stream by connecting to a TCP socket (on a remote machine).
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIhost\fP\fP
address of remote TCP server. 
.TP
\fB\fIport\fP\fP
number to connect. 
.TP
\fB\fIsize\fP\fP
of streaming input and output buffers. 
.TP
\fB\fIthrowflag\fP\fP
flag to throw errors. 
.TP
\fB\fItimeout\fP\fP
for all operations. 
.SS "TCPStream::TCPStream (const TCPStream & source)"
.PP
A copy constructor creates a new stream buffer.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIsource\fP\fP
of copy. 
.SS "virtual TCPStream::~TCPStream ()\fC [inline, virtual]\fP"
.PP
Flush and empty all buffers, and then remove the allocated buffers.
.PP
.SH "MEMBER FUNCTION DOCUMENTATION"
.PP 
.SS "void TCPStream::allocate (int size)\fC [protected]\fP"
.PP
Used to allocate the buffer space needed for iostream operations.
.PP
This function is called by the constructor.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIsize\fP\fP
of stream buffers from constructor. 
.SS "void TCPStream::connect (const \fBInetHostAddress\fP & host, \fBtpport_t\fP port, int size)\fC [protected]\fP"
.PP
Create a TCP stream by connecting to a TCP socket (on a remote machine).
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIhost\fP\fP
address of remote TCP server. 
.TP
\fB\fIport\fP\fP
number to connect. 
.TP
\fB\fIsize\fP\fP
of streaming input and output buffers. 
.SS "void TCPStream::endStream (void)\fC [protected]\fP"
.PP
Used to terminate the buffer space and cleanup the socket connection.
.PP
This fucntion is called by the destructor. 
.SS "int TCPStream::getBufferSize (void) const\fC [inline]\fP"
.PP
Return the size of the current stream buffering used.
.PP
\fBReturns: \fP
.in +1c
size of stream buffers. 
.SS "bool TCPStream::isPending (\fBPending\fP pend, \fBtimeout_t\fP timeout = TIMEOUT_INF)\fC [virtual]\fP"
.PP
Get the status of pending stream data.
.PP
This can be used to examine if input or output is waiting, or if an error or disconnect has occured on the stream. If a read buffer contains data then input is ready and if write buffer contains data it is first flushed and then checked. 
.PP
Reimplemented from \fBSocket\fP.
.SS "int TCPStream::overflow (int ch)\fC [protected]\fP"
.PP
This streambuf method is used to write the output buffer through the established tcp connection.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIch\fP\fP
char to push through. 
.PP
\fBReturns: \fP
.in +1c
char pushed through. 
.SS "void TCPStream::setTimeout (\fBtimeout_t\fP to)\fC [inline]\fP"
.PP
Set the I/O operation timeout for socket I/O operations.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIto\fP\fP
timeout to set. 
.PP
Reimplemented in \fBURLStream\fP.
.SS "int TCPStream::sync (void)"
.PP
Flushes the stream input and output buffers, writes pending output.
.PP
\fBReturns: \fP
.in +1c
0 on success. 
.SS "std::iostream* TCPStream::tcp (void)\fC [inline, protected]\fP"
.PP
Used in derived classes to refer to the current object via it's iostream.
.PP
For example, to send a set of characters in a derived method, one might use *\fBtcp()\fP << 'test'.
.PP
\fBReturns: \fP
.in +1c
stream pointer of this object. 
.SS "int TCPStream::uflow ()\fC [protected]\fP"
.PP
This streambuf method is used for doing unbuffered reads through the establish tcp socket connection when in interactive mode.
.PP
Also this method will handle proper use of buffers if not in interative mode.
.PP
\fBReturns: \fP
.in +1c
char from tcp socket connection, EOF if not connected. 
.SS "int TCPStream::underflow ()\fC [protected]\fP"
.PP
This streambuf method is used to load the input buffer through the established tcp socket connection.
.PP
\fBReturns: \fP
.in +1c
char from get buffer, EOF if not connected. 
.PP
Reimplemented in \fBURLStream\fP.
.SH "FRIENDS AND RELATED FUNCTION DOCUMENTATION"
.PP 
.SS "TCPStream& crlf (TCPStream &)\fC [friend]\fP"
.PP
.SS "TCPStream& lfcr (TCPStream &)\fC [friend]\fP"
.PP
.SH "MEMBER DATA DOCUMENTATION"
.PP 
.SS "int TCPStream::bufsize\fC [protected]\fP"
.PP
.SS "char* TCPStream::gbuf\fC [protected]\fP"
.PP
.SS "char * TCPStream::pbuf\fC [protected]\fP"
.PP
.SS "\fBtimeout_t\fP TCPStream::timeout\fC [protected]\fP"
.PP


.SH "AUTHOR"
.PP 
Generated automatically by Doxygen for CommonC++ from the source code.
