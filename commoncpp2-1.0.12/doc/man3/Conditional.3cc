.TH "Conditional" 3 "22 May 2003" "CommonC++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Conditional \- A conditional variable synchcronization object for one to one and one to many signal and control events between processes. conditional. 
.SH SYNOPSIS
.br
.PP
\fC#include <thread.h>\fP
.PP
Inherits \fBMutex\fP.
.PP
.SS "Public Methods"

.in +1c
.ti -1c
.RI "\fBConditional\fP ()"
.br
.RI "\fICreate an instance of a conditional.\fP"
.ti -1c
.RI "virtual \fB~Conditional\fP ()"
.br
.RI "\fIDestroy the conditional.\fP"
.ti -1c
.RI "void \fBsignal\fP (bool broadcast)"
.br
.RI "\fISignal a conditional object and a waiting threads.\fP"
.ti -1c
.RI "void \fBwait\fP (\fBtimeout_t\fP timer=0)"
.br
.RI "\fIWait to be signaled from another thread.\fP"
.in -1c
.SH "DETAILED DESCRIPTION"
.PP 
A conditional variable synchcronization object for one to one and one to many signal and control events between processes. conditional.
.PP
Conditional variables may wait for and receive signals to notify when to resume or perform operations. Multiple waiting threads may be woken with a broadcast signal.
.PP
\fBWarning: \fP
.in +1c
While this class inherits from \fBMutex\fP, the methods of the class Conditional just handle the system conditional variable, so the user is responsible for calling enterMutex and leaveMutex so as to avoid race conditions. Another thing to note is that if you have several threads waiting on one condition, not uncommon in thread pools, each thread must take care to manually unlock the mutex if cancellation occurs. Otherwise the first thread cancelled will deadlock the rest of the thread.
.PP
\fBAuthor: \fP
.in +1c
David Sugar 
.PP
\fBTodo: \fP
.in +1c
 implement in win32  
.PP
.SH "CONSTRUCTOR & DESTRUCTOR DOCUMENTATION"
.PP 
.SS "Conditional::Conditional ()"
.PP
Create an instance of a conditional.
.PP
.SS "virtual Conditional::~Conditional ()\fC [virtual]\fP"
.PP
Destroy the conditional.
.PP
.SH "MEMBER FUNCTION DOCUMENTATION"
.PP 
.SS "void Conditional::signal (bool broadcast)"
.PP
Signal a conditional object and a waiting threads.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIbroadcast\fP\fP
this signal to all waiting threads if true. 
.SS "void Conditional::wait (\fBtimeout_t\fP timer = 0)"
.PP
Wait to be signaled from another thread.
.PP


.SH "AUTHOR"
.PP 
Generated automatically by Doxygen for CommonC++ from the source code.
