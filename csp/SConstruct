# -*-python-*-
#
# Copyright 2004 Mark Rose <mkrose@users.sourceforge.net>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

print 'COMBAT SIMULATOR PROJECT - Build System'

import sys
from tools import build

build.CheckSConsVersion('0.96.93')
build.CheckPythonVersion('2.2.2')
build.DevpackConfig.SetMinimumVersion('0.6')


PACKAGES = [
	'csplib',
	'cspsim',
	'modules',
	'tools/canopy',
	'tools/layout',
]

build.ExternalLibrary(
	name = 'jpeg',
	config = [
		build.UnixLibConfig(lib='libjpeg', symbol='jpeg_resync_to_restart'),
		build.DevpackConfig(libs='libjpeg'),
		build.WindowsLibConfig('user32'),
	])

build.ExternalLibrary(
	name = 'opengl',
	config = [
		build.WindowsLibConfig('glu32'),
		build.WindowsLibConfig('opengl32'),
	])

build.ExternalLibrary(
	name = 'windows',
	config = [
		build.WindowsLibConfig('advapi32'),
		build.WindowsLibConfig('ws2_32'),
	])

build.ExternalLibrary(
	name = 'sound',
	config = [
		build.PkgConfig(package='openalpp', version='0.2'),
		build.PkgConfig(package='vorbisfile', version='1.1.0'),
		build.DevpackConfig(dlls='openalpp', headers=[('openalpp', 'sounddata.h')]),
		build.DevpackConfig(dlls=['libvorbis', 'libvorbisfile'], headers=[('vorbis', 'vorbisfile.h')]),
		build.DevpackConfig(dlls='libogg', headers=[('ogg', 'ogg.h')]),
	])

build.ExternalLibrary(
	name = 'gnucc2',
	config = [
		build.PkgConfig(package='libccgnu2', version='1.3.19', label='commoncpp'),
		build.DevpackConfig(dlls='ccgnu2', headers=[('cc++', 'thread.h')]),
	])

build.ExternalLibrary(
	name = 'sigc',
	config = [
		build.PkgConfig(package='sigc++-2.0', version='2.0.6', label='sigc'),
		build.DevpackConfig(dlls='sigc-2.0', headers=['sigc++config.h', ('sigc++', 'trackable.h')]),
	])

build.ExternalLibrary(
	name = 'osg',
	config = [
		build.PkgConfig(package='openscenegraph', version='0.9.9'),
		build.PkgConfig(package='openthreads', version='0.9.9'),
		build.PkgConfig(package='producer', version='0.9.9'),
		build.PkgConfig(package='osgal', version='0.3'),
		build.DevpackConfig(dlls='osgal', headers=[('osgAL', 'SoundNode')]),
		build.DevpackConfig(dlls=['osg', 'osgDB', 'osgFX', 'osgGA', 'osgParticle', 'osgProducer', 'osgText', 'osgUtil', 'OpenThreadsWin32', 'Producer'], headers=[('osg', 'Depth'), ('osgText', 'Font')]),
	])

build.ExternalLibrary(
	name = 'sdl',
	config = [
		build.CommandConfig(package='sdl', version_command='sdl-config --version', flags_command='sdl-config --cflags --libs', version='1.2.5', label='sdl'),
		build.DevpackConfig(dlls=['SDL'], headers=[('SDL', 'SDL_mouse.h')]),
	])

build.ExternalLibrary(
	name = 'python',
	config = [
		build.UnixLibConfig(lib='python%d.%d' % tuple(sys.version_info[:2]), symbol='PyEval_SaveThread', label='python library'),
	])


class Environment(build.Environment):
	"""
	COMMON TARGETS:

	  scons config           check for necessary headers and libraries
	  scons all              build everything
	  scons cspsim           build the main flight simulator client
	  scons indexserver      build the master server needed for multiplayer
	  scons dox              generate doxygen documentation
	  scons runtests         build and run all unittests
	  scons csplib.runtests  build and run all unittests in csplib
	"""

	INCLUDE = ['#/..', build.GetPythonInclude()]

	def customize_all(self, env):
		env.Replace(CXXFILESUFFIX='.cpp')
		env.Replace(CPPPATH=self.INCLUDE)
		env.Replace(SWIGFLAGS=Split('-python -c++'))
		env.Replace(SWIGINCLUDES=self.INCLUDE)

	def customize_win(self, env):
		env.Replace(CXXFLAGS=Split('/GR /MD /O2 /EHsc /W3 /nologo'))
		env.AppendUnique(CPPDEFINES=Split('WIN32 __WIN32__ _USRDLL _DLL NDEBUG _CRT_SECURE_NO_DEPRECATE'))
		env.AppendUnique(LINKFLAGS=Split('/INCREMENTAL:NO /RELEASE /nologo'))
		env.AppendUnique(SHLINKFLAGS=Split('/INCREMENTAL:NO /RELEASE /nologo'))
		env.AppendUnique(LIBPATH=[build.GetPythonLibrary()])
		env.CopyEnvironment(Split('PATH INCLUDE LIB'))

	def customize_linux(self, env):
		gcc = build.GetGCCVersion()
		env.Replace(CXXFLAGS=Split('-O2 -g -W -Wall -pedantic -Wno-long-long'))
		env.Replace(SWIGCXXFLAGS=Split('-O2 -g'))
		env.Replace(ARFLAGS=Split('cr'))
		if gcc and gcc[0] >= (4, 2, 0):
			env.AppendUnique(CXXFLAGS=Split('-fvisibility=hidden'))

	def customize_darwin(self, env):
		print 'WARNING: Darwin is not yet a fully supported platform.'
		self.customize_linux(env)
		env.Replace(SHLINKFLAGS=Split('-Wl -bundle'))


env = Environment.Initialize()

env.ReadPackages(PACKAGES)
env.FinalizePackages()

