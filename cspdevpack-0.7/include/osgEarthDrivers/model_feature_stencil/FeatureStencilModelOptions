/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_DRIVER_FEATURE_STENCIL_MODEL_OPTIONS
#define OSGEARTH_DRIVER_FEATURE_STENCIL_MODEL_OPTIONS 1

#include <osgEarth/Common>
#include <osgEarthFeatures/FeatureModelSource>

using namespace osgEarth;
using namespace osgEarth::Features;

namespace osgEarth { namespace Drivers
{
    class FeatureStencilModelOptions : public FeatureModelSourceOptions // NO EXPORT; header only
    {
    public: // properties

        optional<double>& extrusionDistance() { return _extrusionDistance; }
        const optional<double>& extrusionDistance() const { return _extrusionDistance; }

        optional<double>& densificationThreshold() { return _densificationThreshold; }
        const optional<double>& densificationThreshold() const { return _densificationThreshold; }

        optional<bool>& inverted() { return _inverted; }
        const optional<bool>& inverted() const { return _inverted; }

        optional<bool>& mask() { return _mask; }
        const optional<bool>& mask() const { return _mask; }

        optional<bool>& showVolumes() { return _showVolumes; }
        const optional<bool>& showVolumes() const { return _showVolumes; }

    public:
        FeatureStencilModelOptions( const PluginOptions* opt =0L ) : FeatureModelSourceOptions( opt ),
            _extrusionDistance( 300000 ),
            _densificationThreshold( 1000000 ),
            _inverted( false ),
            _mask( false ),
            _showVolumes( false )
        {
            driver() = "feature_stencil";

            config().getIfSet( "extrusion_distance", _extrusionDistance );
            config().getIfSet( "densification_threshold", _densificationThreshold );
            config().getIfSet( "inverted", _inverted );
            config().getIfSet( "mask", _mask );
            config().getIfSet( "show_volumes", _showVolumes );

            //special: you can also set mask=true by naming the config:
            if ( !_mask.isSet() && config().key() == "mask_model" )
                _mask = true;
        }

    protected:
        Config toConfig() const {
            Config conf = ModelSourceOptions::toConfig();
            conf.updateIfSet( "extrusion_distance", _extrusionDistance );
            conf.updateIfSet( "densification_threshold", _densificationThreshold );
            conf.updateIfSet( "inverted", _inverted );
            conf.updateIfSet( "mask", _mask );               
            conf.updateIfSet( "showVolumes", _showVolumes );
            return conf;
        }

        optional<double> _extrusionDistance, _densificationThreshold;
        optional<bool> _inverted, _mask, _showVolumes;
    };

} } // namespace osgEarth::Drivers

#endif // OSGEARTH_DRIVER_FEATURE_STENCIL_MODEL_OPTIONS

