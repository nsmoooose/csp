#!/usr/bin/python
#
# Copyright 2004 Mark Rose <mkrose@users.sourceforge.net>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

"""
%(prog)s: Construct bundled python applications.

Takes python script as input and generates a single python program that
contains all necessary extension modules outside of the standard library.

Caveats:
  * A full python installation is still required to run the resulting program.
  * Impure python extension modules (shared libraries) are not yet supported.
  * The startup stub is currently linux-specific.

Usage: %(prog)s [options] script
"""

import sys
import os
import re
import os.path
import zipfile
from modulefinder import ModuleFinder

import bootstrap
from CSP.base import app


ENTRY_MODULE = '__pyrun__'


DEFAULT_STUB = ("python2.3 -c \""
                "import sys;"
                "sys.path.insert(0, '$0');"
                "sys.argv[0]='$0';"
                "import %s"
                "\" ${1+\"$@\"};"
                "exit $?;" % ENTRY_MODULE)

# attempt at using a universal stub; doesn't seem promising (requires that
# the stub script be installed in a fixed location).
#DEFAULT_STUB = '#!/usr/bin/python /usr/lib/python2.3/site-packages/pystub.py'

def main(args):
  if len(args) != 1:
    app.usage()
    return 1

  program = os.path.abspath(args[0])
  target = app.options.output
  if not target:
    target = os.path.basename(program) + '.run'

  assemble(program, target)


def findCustomModules(modules):
  """
  Filter a list of modules, returning only those that are not part of the
  standard python libraries.
  """
  re_stdlib = re.compile(r'[/\\][pP](ython|YTHON)[\.0-9]*[/\\]')
  custom = []
  for mod in modules:
    file = mod.__file__
    if file is None: continue
    match = re_stdlib.search(file)
    if match is not None:
      if not file[match.end():].startswith('site-packages'): continue
    if file.lower().endswith('.so') or file.lower().endswith('.dll'):
      print 'WARNING: skipping impure python module (%s)' % file
      continue
    custom.append(mod)
  return custom


def findDependencies(program, path):
  """
  Use the python modulefinder to find all modules that the main program
  imports (directly and indirectly).  We then filter out the ones that
  are part of the standard python library.
  """
  mf = ModuleFinder(path)
  mf.run_script(program)
  custom = findCustomModules(mf.modules.values())
  names = [x.__name__ for x in custom]
  missing = {}
  ignore = app.options.ignore
  # ModuleFinder generally reports some modules as missing.  It seems
  # sufficient to ignore any that aren't directly imported by any of
  # the custom modules.  Others false alarms (such as os.path) can be
  # explicitly ignored via command-line flags.
  for name, calldict in mf.badmodules.items():
    for caller in calldict.keys():
      if caller in names:
        if not name in ignore:
          missing.setdefault(name, []).append(caller)
  for name, callers in missing.items():
    print 'WARNING: module %s not found (called by %s)' % (name, ', '.join(callers))
  if missing:
    print 'ERROR: some modules were not found.'
    print 'You may need to use the --addpath or --ignore flags.'
    sys.exit(1)
  return custom


def makeZip(zipname, program, modules, path):
  """
  Assemble the custom modules into a zip archive.  We try to construct the
  archive to mirror the path hierarchy of the custom modules.
  """
  # PyZipFile automatically precompiles python sources.
  out = zipfile.PyZipFile(zipname, 'w', compression=zipfile.ZIP_DEFLATED)
  uniq_modules = {}
  # modules may appear multiple times, depending on the use of relative
  # import statements, but the absolute filenames are unique.
  for module in modules:
    name = module.__name__
    file = module.__file__
    if uniq_modules.has_key(file): continue
    # determine the full module path relative to sys.path
    basename = ''
    # loop through all the paths in sys.path, finding the first one that
    # can be used to import the module.  in principle, we really should
    # check that all intermediate directories (see basename below) are
    # actually packages.
    for p in path:
      if file.startswith(p):
        # this module can be imported using 'from basename import name'
        basename = os.path.dirname(file)[len(p):]
        if os.path.isabs(basename): basename = basename[1:]
        break
    if basename:
      # now look at all the intermediate directories (which we assume
      # are packages) and add the '__init__.py' modules by hand.  this
      # is necessary because modulefinder won't always notice them.
      search = basename
      while search:
        package_dir = os.path.join(p, search)
        init = os.path.join(package_dir, '__init__.py')
        if os.path.exists(init):
          uniq_modules[init] = ('__init__', search)
        else:
          # if our assumption fails, at least warn the user.  if this
          # happens at all frequently, the package search should be
          # moved inside the path search loop.
          print 'WARNING: expected %s to be a package, but' % package_dir
          print '         __init__.py does not exist.'
        # walk up the package hierarchy
        search = os.path.dirname(search)
    uniq_modules[file] = (name, basename)

  # now add all unique modules to the zip archive
  for file in uniq_modules.keys():
    name, basename = uniq_modules[file]
    # special case for the main program module
    if file == program:
      f = open('X__main__.py', 'wt')
      # big ol' hack.  insert some magic to make the main script look like it
      # was run directly instead of imported.  better solutions welcome.
      inject = 1
      for line in open(program, 'rt'):
        if (inject and (line.startswith('app.start(') or line.startswith('if __name__ =='))):
          inject = 0
          #print >>f, "import sys; sys.modules['__main__'] = sys.modules[__name__]; __name__ = '__main__';"
          print >>f, "__name__ = '__main__';"
        print >>f, line,
      f.close()
      out.writepy('X__main__.py', basename)
      for ext in ('.py', '.pyc', '.pyo'):
        prog_name = 'X__main__' + ext
        if os.path.exists(prog_name): os.unlink(prog_name)
      if basename:
        main_module = '.'.join(basename.split(os.sep) + ['X__main__'])
      else:
        main_module = 'X__main__'
      # add a stub so that the entry point is always import <ENTRY_MODULE>
      f = open(ENTRY_MODULE+'.py', 'wt')
      f.write('import %s\n' % main_module)
      f.close()
      out.writepy(ENTRY_MODULE+'.py', '')
      for ext in ('.py', '.pyc', '.pyo'):
        prog_name = ENTRY_MODULE + ext
        if os.path.exists(prog_name): os.unlink(prog_name)
    elif file.endswith('.py'):
      out.writepy(file, basename)
    else:
      # in principle anything can be added to the archive, but we don't
      # actively support arbitrary data and shared libaries yet.
      print 'WARNING: adding non-python file %s' % file
      out.write(file, os.path.basename(file))
    if not app.options.quiet:
      print '.. Added %s (%s)' % (name, file)
  out.close()


def addStub(stub, tmpname, target):
  """
  Add a stub to the start of the zipfile to bootstrap the main program.
  The stub puts the zipfile at the start of sys.path, and tweaks sys.argv
  before importing the main module.
  """
  zip = open(tmpname, 'rb')
  out = open(target, 'wt')
  out.write(stub + '\n')
  out = open(target, 'ab')
  out.write(zip.read())
  zip.close()
  out.close()


def getPath(program):
  """
  Get sys.path as seen by the application program, including any paths
  specified by --addpath flags.
  """
  path = sys.path[:]
  path[0] = os.path.dirname(program)
  addpaths = app.options.addpath[:]
  addpaths.reverse()
  for addpath in addpaths:
    path.insert(0, os.path.abspath(addpath))
  return path


def assemble(program, target):
  """
  Find all module dependencies, construct the zip archive, and prepend the
  bootstrap stub.
  """
  path = getPath(program)

  stub = app.options.stub
  if stub:
    if not os.path.exists(stub):
      print 'Stub file %s not found, aborting' % stub
      sys.exit(1)
    stub = open(stub, 'rt').read()
  else:
    stub = DEFAULT_STUB

  if os.path.exists(target) and not app.options.force:
    print '%s already exists, aborting' % target
    sys.exit(1)

  if not app.options.quiet:
    print 'Finding dependencies'

  modules = findDependencies(program, path)

  if not app.options.quiet:
    print 'Creating executable %s' % target

  tmpname = target + "~"
  makeZip(tmpname, program, modules, path)
  addStub(stub, tmpname, target)

  os.unlink(tmpname)
  os.chmod(target, 0755)

  if not app.options.quiet:
    print 'Done.'


# command line options
app.addOption('--addpath', metavar='PATH', action='append', default=[], help='add path to sys.path')
app.addOption('-q', '--quiet', action='store_true', default=False, help='quiet mode (less verbose)')
app.addOption('--output', metavar='FILE', default=None, help='specify output file')
app.addOption('-f', '--force', action='store_true', default=False, help='overwrite existing output file')
app.addOption('--stub', metavar='STUBFILE', default='', help='stub file to use')
app.addOption('--ignore', metavar='MODULE', action='append', default=['os.path'], help='ignore unresolved module dependency')

app.start()

