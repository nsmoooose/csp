.TH "Number" 3 "22 May 2003" "CommonC++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Number \- A number manipulation class. number manipulation. 
.SH SYNOPSIS
.br
.PP
\fC#include <numbers.h>\fP
.PP
Inherited by \fBDateNumber\fP, and \fBZNumber\fP.
.PP
.SS "Public Methods"

.in +1c
.ti -1c
.RI "\fBNumber\fP (char *\fBbuffer\fP, unsigned \fBsize\fP)"
.br
.RI "\fICreate an instance of a number.\fP"
.ti -1c
.RI "void \fBsetValue\fP (long value)"
.br
.ti -1c
.RI "const char * \fBgetBuffer\fP ()"
.br
.ti -1c
.RI "long \fBgetValue\fP ()"
.br
.ti -1c
.RI "long \fBoperator()\fP ()"
.br
.ti -1c
.RI "\fBoperator long\fP ()"
.br
.ti -1c
.RI "\fBoperator char *\fP ()"
.br
.ti -1c
.RI "long \fBoperator=\fP (long value)"
.br
.ti -1c
.RI "long \fBoperator+=\fP (long value)"
.br
.ti -1c
.RI "long \fBoperator-=\fP (long value)"
.br
.ti -1c
.RI "long \fBoperator--\fP ()"
.br
.ti -1c
.RI "long \fBoperator++\fP ()"
.br
.ti -1c
.RI "int \fBoperator==\fP (Number &num)"
.br
.ti -1c
.RI "int \fBoperator!=\fP (Number &num)"
.br
.ti -1c
.RI "int \fBoperator<\fP (Number &num)"
.br
.ti -1c
.RI "int \fBoperator<=\fP (Number &num)"
.br
.ti -1c
.RI "int \fBoperator>\fP (Number &num)"
.br
.ti -1c
.RI "int \fBoperator>=\fP (Number &num)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "char * \fBbuffer\fP"
.br
.ti -1c
.RI "unsigned \fBsize\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "long \fBoperator+\fP (Number &num, long val)"
.br
.ti -1c
.RI "long \fBoperator+\fP (long val, Number &num)"
.br
.ti -1c
.RI "long \fBoperator-\fP (Number &num, long val)"
.br
.ti -1c
.RI "long \fBoperator-\fP (long val, Number &num)"
.br
.in -1c
.SH "DETAILED DESCRIPTION"
.PP 
A number manipulation class. number manipulation.
.PP
This is used to extract, convert, and manage simple numbers that are represented in C ascii strings in a very quick and optimal way.
.PP
\fBAuthor: \fP
.in +1c
David Sugar <dyfet@ostel.com> 
.PP
.SH "CONSTRUCTOR & DESTRUCTOR DOCUMENTATION"
.PP 
.SS "Number::Number (char * buffer, unsigned size)"
.PP
Create an instance of a number.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIbuffer\fP\fP
or NULL if created internally. 
.TP
\fB\fIsize\fP\fP
use - values for zero filled. 
.SH "MEMBER FUNCTION DOCUMENTATION"
.PP 
.SS "const char* Number::getBuffer ()\fC [inline]\fP"
.PP
.SS "long Number::getValue ()"
.PP
.SS "Number::operator char * ()\fC [inline]\fP"
.PP
.SS "Number::operator long ()\fC [inline]\fP"
.PP
.SS "int Number::operator!= (Number & num)"
.PP
.SS "long Number::operator() ()\fC [inline]\fP"
.PP
.SS "long Number::operator++ ()"
.PP
.SS "long Number::operator+= (long value)"
.PP
.SS "long Number::operator-- ()"
.PP
.SS "long Number::operator-= (long value)"
.PP
.SS "int Number::operator< (Number & num)"
.PP
.SS "int Number::operator<= (Number & num)"
.PP
.SS "long Number::operator= (long value)"
.PP
Reimplemented in \fBZNumber\fP.
.SS "int Number::operator== (Number & num)"
.PP
.SS "int Number::operator> (Number & num)"
.PP
.SS "int Number::operator>= (Number & num)"
.PP
.SS "void Number::setValue (long value)"
.PP
Reimplemented in \fBZNumber\fP.
.SH "FRIENDS AND RELATED FUNCTION DOCUMENTATION"
.PP 
.SS "long operator+ (long val, Number & num)\fC [friend]\fP"
.PP
.SS "long operator+ (Number & num, long val)\fC [friend]\fP"
.PP
.SS "long operator- (long val, Number & num)\fC [friend]\fP"
.PP
.SS "long operator- (Number & num, long val)\fC [friend]\fP"
.PP
.SH "MEMBER DATA DOCUMENTATION"
.PP 
.SS "char* Number::buffer\fC [protected]\fP"
.PP
.SS "unsigned Number::size\fC [protected]\fP"
.PP


.SH "AUTHOR"
.PP 
Generated automatically by Doxygen for CommonC++ from the source code.
