.TH "CommandOption" 3 "22 May 2003" "CommonC++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CommandOption \- CommandOption is the base class for all command line options. 
.SH SYNOPSIS
.br
.PP
\fC#include <cmdoptns.h>\fP
.PP
Inherited by \fBCommandOptionNoArg\fP, and \fBCommandOptionWithArg\fP.
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBOptionType\fP { \fBhasArg\fP, \fBnoArg\fP, \fBtrailing\fP, \fBcollect\fP }"
.br
.RI "\fIOptionType is for denoting what type of option this is, with an arg, without an arg or the trailing args. Option type.\fP"
.in -1c
.SS "Public Methods"

.in +1c
.ti -1c
.RI "virtual \fB~CommandOption\fP ()"
.br
.RI "\fIA virtual destructor just in case.\fP"
.ti -1c
.RI "\fBCommandOption\fP (const char *inOptionName, const char *inOptionLetter, const char *inDescription, \fBOptionType\fP inOptionType, bool inRequired=false, CommandOption **ppNext=&\fBdefaultCommandOptionList\fP)"
.br
.RI "\fICommandOption contructor.\fP"
.ti -1c
.RI "virtual void \fBfoundOption\fP (\fBCommandOptionParse\fP *cop, const char *value=0)"
.br
.RI "\fIfoundOption is called by the \fBCommandOptionParse\fP object during the parsing of the command line options.\fP"
.ti -1c
.RI "virtual void \fBfoundOption\fP (\fBCommandOptionParse\fP *cop, const char **value, int num)"
.br
.RI "\fIfoundOption is called by the \fBCommandOptionParse\fP object during the parsing of the command line options.\fP"
.ti -1c
.RI "virtual void \fBparseDone\fP (\fBCommandOptionParse\fP *cop)"
.br
.RI "\fIOnce parsing of command line options is complete, this method is called.\fP"
.ti -1c
.RI "virtual void \fBperformTask\fP (\fBCommandOptionParse\fP *cop)"
.br
.RI "\fIOnce CommandOption objects have completed parsing and there are no errors they may have some specific tasks to perform.\fP"
.ti -1c
.RI "virtual bool \fBhasValue\fP ()"
.br
.RI "\fIFor fields with the required flag set, this method is used to determine if the Option has satisfied it's required status.\fP"
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "const char * \fBoptionName\fP"
.br
.RI "\fILong option name, these will be preceded with '--' on the command line.\fP"
.ti -1c
.RI "const char * \fBoptionLetter\fP"
.br
.RI "\fIoption letter, these will be preceded with '-' on the command line.\fP"
.ti -1c
.RI "const char * \fBdescription\fP"
.br
.RI "\fIA short description of the option for Usage messages.\fP"
.ti -1c
.RI "\fBOptionType\fP \fBoptionType\fP"
.br
.RI "\fIThis command option's OptionType.\fP"
.ti -1c
.RI "bool \fBrequired\fP"
.br
.RI "\fITrue if this parameter is required.\fP"
.ti -1c
.RI "CommandOption * \fBnext\fP"
.br
.RI "\fIThis next CommandOption in this list of options or nil if no more options exist.\fP"
.in -1c
.SH "DETAILED DESCRIPTION"
.PP 
CommandOption is the base class for all command line options.
.PP
Command line options can be defined statically and used when constructing a command line parser onject using makeCommandOptionParse. This serves only as a base class to \fBCommandOptionWithArg\fP, \fBCommandOptionRest\fP or \fBCommandOptionNoArg\fP which can also be used to derive more complex classes or even entire applications.
.PP
\fBAuthor: \fP
.in +1c
Gianni Mariani <gianni@mariani.ws> 
.PP
.SH "MEMBER ENUMERATION DOCUMENTATION"
.PP 
.SS "enum CommandOption::OptionType"
.PP
OptionType is for denoting what type of option this is, with an arg, without an arg or the trailing args. Option type.
.PP
\fBEnumeration values: \fP
.in +1c
.TP
\fB\fI\fIhasArg\fP \fP\fP
This option is associated with a value.
.TP
\fB\fI\fInoArg\fP \fP\fP
This option is a flag only.
.TP
\fB\fI\fItrailing\fP \fP\fP
Remaining of the command line arguments.
.TP
\fB\fI\fIcollect\fP \fP\fP
Collect values that are not a value to an option.
.SH "CONSTRUCTOR & DESTRUCTOR DOCUMENTATION"
.PP 
.SS "virtual CommandOption::~CommandOption ()\fC [virtual]\fP"
.PP
A virtual destructor just in case.
.PP
.SS "CommandOption::CommandOption (const char * inOptionName, const char * inOptionLetter, const char * inDescription, \fBOptionType\fP inOptionType, bool inRequired = false, CommandOption ** ppNext = &\fBdefaultCommandOptionList\fP)"
.PP
CommandOption contructor.
.PP
Note the default values for required and ppNext.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIinOptionName\fP\fP
long option name 
.TP
\fB\fIinOptionLetter\fP\fP
short letter name 
.TP
\fB\fIinDescription\fP\fP
short description of the option 
.TP
\fB\fIinOptionType\fP\fP
the type of this option 
.TP
\fB\fIinRequired\fP\fP
true if option is required 
.TP
\fB\fIppNext\fP\fP
the linked list header 
.SH "MEMBER FUNCTION DOCUMENTATION"
.PP 
.SS "virtual void CommandOption::foundOption (\fBCommandOptionParse\fP * cop, const char ** value, int num)\fC [virtual]\fP"
.PP
foundOption is called by the \fBCommandOptionParse\fP object during the parsing of the command line options.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIcop\fP\fP
pointer to the command option parser 
.TP
\fB\fIvalue\fP\fP
an array of values of this option 
.TP
\fB\fInum\fP\fP
number of values in the array 
.PP
Reimplemented in \fBCommandOptionWithArg\fP.
.SS "virtual void CommandOption::foundOption (\fBCommandOptionParse\fP * cop, const char * value = 0)\fC [virtual]\fP"
.PP
foundOption is called by the \fBCommandOptionParse\fP object during the parsing of the command line options.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIcop\fP\fP
pointer to the command option parser 
.TP
\fB\fIvalue\fP\fP
the value of this option 
.PP
Reimplemented in \fBCommandOptionWithArg\fP, and \fBCommandOptionNoArg\fP.
.SS "virtual bool CommandOption::hasValue ()\fC [virtual]\fP"
.PP
For fields with the required flag set, this method is used to determine if the Option has satisfied it's required status.
.PP
The default methods simply returns true if any values have been found. This could be specialized to return true based on some other criteria. 
.PP
Reimplemented in \fBCommandOptionWithArg\fP.
.SS "virtual void CommandOption::parseDone (\fBCommandOptionParse\fP * cop)\fC [virtual]\fP"
.PP
Once parsing of command line options is complete, this method is called.
.PP
This can be used to perform last minute checks on the options collected.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIcop\fP\fP
pointer to the command option parser 
.SS "virtual void CommandOption::performTask (\fBCommandOptionParse\fP * cop)\fC [virtual]\fP"
.PP
Once CommandOption objects have completed parsing and there are no errors they may have some specific tasks to perform.
.PP
PerformTask must return.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIcop\fP\fP
pointer to the command option parser 
.SH "MEMBER DATA DOCUMENTATION"
.PP 
.SS "const char* CommandOption::description"
.PP
A short description of the option for Usage messages.
.PP
e.g. Usage: mycommand : blah -f, --file <DESCRIPTION here> 
.SS "CommandOption* CommandOption::next"
.PP
This next CommandOption in this list of options or nil if no more options exist.
.PP
.SS "const char* CommandOption::optionLetter"
.PP
option letter, these will be preceded with '-' on the command line.
.PP
e.g. -f foo.x 
.SS "const char* CommandOption::optionName"
.PP
Long option name, these will be preceded with '--' on the command line.
.PP
e.g. --file foo.x 
.SS "\fBOptionType\fP CommandOption::optionType"
.PP
This command option's OptionType.
.PP
.SS "bool CommandOption::required"
.PP
True if this parameter is required.
.PP
If the parameter is not supplied and required is true, an error will be flagged in the option processor. 

.SH "AUTHOR"
.PP 
Generated automatically by Doxygen for CommonC++ from the source code.
