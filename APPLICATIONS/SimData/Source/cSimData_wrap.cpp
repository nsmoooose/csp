/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.16u-20030117-0000
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_NOINCLUDE

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    inline SwigValueWrapper() : tt(0) { }
    inline ~SwigValueWrapper() { if (tt) delete tt; } 
    inline SwigValueWrapper& operator=(const T& t) { tt = new T(t); return *this; }
    inline operator T&() const { return *tt; }
    inline T *operator&() { return tt; }
};                                                    
#endif


#include "Python.h"

/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__)
#       if defined(_MSC_VER)
#               if defined(STATIC_LINKED)
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) extern a
#               else
#                       define SWIGEXPORT(a) __declspec(dllexport) a
#                       define SWIGIMPORT(a) extern a
#               endif
#       else
#               if defined(__BORLANDC__)
#                       define SWIGEXPORT(a) a _export
#                       define SWIGIMPORT(a) a _export
#               else
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) a
#               endif
#       endif
#else
#       define SWIGEXPORT(a) a
#       define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;                 
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;	
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);

#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti)
{
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;	
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
 l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty)
{
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
	s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) 
{
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) 
{
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
     ty = (*ty->dcast)(ptr);
     if (ty) lastty = ty;
  }
  return lastty;
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = swig_type_list;
      while (tc) {
	if ((strcmp(tc->name, equiv->name) == 0))
	  SWIG_TypeClientData(tc,clientdata);
	tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}
#endif

#ifdef __cplusplus
}

#endif

/***********************************************************************
 * python.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#include "Python.h"

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Flags for pointer conversion */

#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

/* Exception handling in wrappers */
#define SWIG_fail   goto fail

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

#ifdef SWIG_NOINCLUDE

SWIGEXPORT(PyObject *)        SWIG_newvarlink();
SWIGEXPORT(void)              SWIG_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGEXPORT(int)               SWIG_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGEXPORT(int)               SWIG_ConvertPacked(PyObject *, void *, int sz, swig_type_info *, int);
SWIGEXPORT(char *)            SWIG_PackData(char *c, void *, int);
SWIGEXPORT(char *)            SWIG_UnpackData(char *c, void *, int);
SWIGEXPORT(PyObject *)        SWIG_NewPointerObj(void *, swig_type_info *,int own);
SWIGEXPORT(PyObject *)        SWIG_NewPackedObj(void *, int sz, swig_type_info *);
SWIGEXPORT(void)              SWIG_InstallConstants(PyObject *d, swig_const_info constants[]);
#else

/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

statichere PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,
  (char *)"swigvarlink",                      /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */
SWIGRUNTIME(PyObject *)
SWIG_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGRUNTIME(void)
SWIG_addvarlink(PyObject *p, char *name,
	   PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  int i;
  unsigned char *u = (unsigned char *) ptr;
  register unsigned char uu;
  for (i = 0; i < sz; i++,u++) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  int i;
  for (i = 0; i < sz; i++, u++) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;

  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }
#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  *ptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto cobject;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
      if (newref) { Py_DECREF(obj); }
      return 0;
    } else {
      if (newref) { Py_DECREF(obj); }
      goto type_error;
    }
  }
  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (newref) { Py_DECREF(obj); }
#endif

#ifdef SWIG_COBJECT_TYPES
cobject:
#endif

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,(void*) *ptr);
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
      PyObject *zero = PyInt_FromLong(0);
      PyObject_SetAttrString(pyobj,(char*)"thisown",zero);
      Py_DECREF(zero);
  }
  return 0;

type_error:
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Convert a packed value value */
SWIGRUNTIME(int)
SWIG_ConvertPacked(PyObject *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c;

  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:

  if (flags) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Create a new pointer object */
SWIGRUNTIME(PyObject *)
SWIG_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, (char *) type->name, NULL);
#else
  {
    char result[1024];
    char *r = result;
    *(r++) = '_';
    r = SWIG_PackData(r,&ptr,sizeof(void *));
    strcpy(r,type->name);
    robj = PyString_FromString(result);
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
	PyObject *n = PyInt_FromLong(1);
	PyObject_SetAttrString(inst,(char*)"thisown",n);
	Py_DECREF(n);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME(PyObject *)
SWIG_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return PyString_FromString(result);
}

/* Install Constants */
SWIGRUNTIME(void)
SWIG_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      obj = PyString_FromString((char *) constants[i].pvalue);
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
      break;
    case SWIG_PY_BINARY:
      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

#endif

#ifdef __cplusplus
}
#endif








/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_simdata__Table swig_types[0] 
#define  SWIGTYPE_p_simdata__Date swig_types[1] 
#define  SWIGTYPE_p_swig_string_bug_workaround swig_types[2] 
#define  SWIGTYPE_p_std__vectorTsimdata__Path_t swig_types[3] 
#define  SWIGTYPE_p_simdata__ListTsimdata__Path_t swig_types[4] 
#define  SWIGTYPE_p_p_char swig_types[5] 
#define  SWIGTYPE_p_simdata__Spread swig_types[6] 
#define  SWIGTYPE_p_simdata__TableEntry swig_types[7] 
#define  SWIGTYPE_p_simdata__InterfaceRegistry swig_types[8] 
#define  SWIGTYPE_p_simdata__External swig_types[9] 
#define  SWIGTYPE_p_guint32 swig_types[10] 
#define  SWIGTYPE_p_bool swig_types[11] 
#define  SWIGTYPE_p_simdata__InvalidDate swig_types[12] 
#define  SWIGTYPE_p_simdata__BadMagic swig_types[13] 
#define  SWIGTYPE_p_double swig_types[14] 
#define  SWIGTYPE_p_a_3__double swig_types[15] 
#define  SWIGTYPE_p_std__vectorTsimdata__Spread_t swig_types[16] 
#define  SWIGTYPE_p_simdata__Enumeration swig_types[17] 
#define  SWIGTYPE_p_simdata__ListTsimdata__Spread_t swig_types[18] 
#define  SWIGTYPE_p_simdata__FP swig_types[19] 
#define  SWIGTYPE_p_simdata__hasht swig_types[20] 
#define  SWIGTYPE_p_simdata__BadByteOrder swig_types[21] 
#define  SWIGTYPE_p_simdata__Vector3 swig_types[22] 
#define  SWIGTYPE_p_simdata__DataArchive swig_types[23] 
#define  SWIGTYPE_p_std__vectorTsimdata__External_t swig_types[24] 
#define  SWIGTYPE_p_simdata__ListTsimdata__External_t swig_types[25] 
#define  SWIGTYPE_p_simdata__CorruptArchive swig_types[26] 
#define  SWIGTYPE_p_simdata__PathPointerBase swig_types[27] 
#define  SWIGTYPE_p_simdata__PointerBase swig_types[28] 
#define  SWIGTYPE_p_simdata__UnPacker swig_types[29] 
#define  SWIGTYPE_p_std__vectorTdouble_t swig_types[30] 
#define  SWIGTYPE_p_simdata__DateZulu swig_types[31] 
#define  SWIGTYPE_p_std__string swig_types[32] 
#define  SWIGTYPE_p_simdata__ListBase swig_types[33] 
#define  SWIGTYPE_p_simdata__EnumIndexError swig_types[34] 
#define  SWIGTYPE_p_simdata__IndexError swig_types[35] 
#define  SWIGTYPE_p_std__vectorTint_t swig_types[36] 
#define  SWIGTYPE_p_simdata__EnumTypeError swig_types[37] 
#define  SWIGTYPE_p_simdata__ListTint_t swig_types[38] 
#define  SWIGTYPE_p_simdata__EnumError swig_types[39] 
#define  SWIGTYPE_p_simdata__Enum swig_types[40] 
#define  SWIGTYPE_p_simdata__ObjectTypeMismatch swig_types[41] 
#define  SWIGTYPE_p_simdata__Path swig_types[42] 
#define  SWIGTYPE_p_simdata__ObjectMismatch swig_types[43] 
#define  SWIGTYPE_p_simdata__ParseException swig_types[44] 
#define  SWIGTYPE_p_simdata__PythonException swig_types[45] 
#define  SWIGTYPE_p_simdata__Exception swig_types[46] 
#define  SWIGTYPE_p_gint32 swig_types[47] 
#define  SWIGTYPE_p_std__ostream swig_types[48] 
#define  SWIGTYPE_p_simdata__ObjectID swig_types[49] 
#define  SWIGTYPE_p_a_3__simdata__Matrix3__M_t swig_types[50] 
#define  SWIGTYPE_p_simdata__Object swig_types[51] 
#define  SWIGTYPE_p_simdata__Packer swig_types[52] 
#define  SWIGTYPE_p_simdata__Zulu swig_types[53] 
#define  SWIGTYPE_p_std__vectorTfloat_t swig_types[54] 
#define  SWIGTYPE_p_simdata__Curve swig_types[55] 
#define  SWIGTYPE_p_std__vectorTsimdata__Enum_t swig_types[56] 
#define  SWIGTYPE_p_FILE swig_types[57] 
#define  SWIGTYPE_p_tm swig_types[58] 
#define  SWIGTYPE_p_simdata__HashT swig_types[59] 
#define  SWIGTYPE_p_int swig_types[60] 
#define  SWIGTYPE_p_std__vectorTsimdata__Table_t swig_types[61] 
#define  SWIGTYPE_p_std__vectorTsimdata__Curve_t swig_types[62] 
#define  SWIGTYPE_p_simdata__BaseType swig_types[63] 
#define  SWIGTYPE_p_simdata__ListTsimdata__Curve_t swig_types[64] 
#define  SWIGTYPE_p_simdata__ListTsimdata__Table_t swig_types[65] 
#define  SWIGTYPE_p_simdata__IOError swig_types[66] 
#define  SWIGTYPE_p_std__vectorTsimdata__InterfaceProxy_p_t swig_types[67] 
#define  SWIGTYPE_p_simdata__InterpolatedData swig_types[68] 
#define  SWIGTYPE_p_simdata__SimDate swig_types[69] 
#define  SWIGTYPE_p_std__vectorTstd__string_t swig_types[70] 
#define  SWIGTYPE_p_simdata__Matrix3 swig_types[71] 
#define  SWIGTYPE_p_simdata__InterfaceProxy swig_types[72] 
static swig_type_info *swig_types[74];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _cSimData.so
  ------------------------------------------------*/
#define SWIG_init    init_cSimData

#define SWIG_name    "_cSimData"

#include <SimData/HashUtility.h>
#include <SimData/Exception.h>
#include <SimData/Types.h>
#include <SimData/DataArchive.h>
#include <SimData/InterfaceRegistry.h>



#define  SWIG_MemoryError    1
#define  SWIG_IOError        2
#define  SWIG_RuntimeError   3
#define  SWIG_IndexError     4
#define  SWIG_TypeError      5
#define  SWIG_DivisionByZero 6
#define  SWIG_OverflowError  7
#define  SWIG_SyntaxError    8
#define  SWIG_ValueError     9
#define  SWIG_SystemError   10
#define  SWIG_UnknownError  99


static void _SWIG_exception(int code, const char *msg) {
  switch(code) {
  case SWIG_MemoryError:
    PyErr_SetString(PyExc_MemoryError,msg);
    break;
  case SWIG_IOError:
    PyErr_SetString(PyExc_IOError,msg);
    break;
  case SWIG_RuntimeError:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  case SWIG_IndexError:
    PyErr_SetString(PyExc_IndexError,msg);
    break;
  case SWIG_TypeError:
    PyErr_SetString(PyExc_TypeError,msg);
    break;
  case SWIG_DivisionByZero:
    PyErr_SetString(PyExc_ZeroDivisionError,msg);
    break;
  case SWIG_OverflowError:
    PyErr_SetString(PyExc_OverflowError,msg);
    break;
  case SWIG_SyntaxError:
    PyErr_SetString(PyExc_SyntaxError,msg);
    break;
  case SWIG_ValueError:
    PyErr_SetString(PyExc_ValueError,msg);
    break;
  case SWIG_SystemError:
    PyErr_SetString(PyExc_SystemError,msg);
    break;
  default:
    PyErr_SetString(PyExc_RuntimeError,msg);
    break;
  }
}

#define SWIG_exception(a,b) { _SWIG_exception(a,b); SWIG_fail; }


#include <string>


#include <string>

PyObject* SwigInt_FromBool(bool b) {
    return PyInt_FromLong(b ? 1L : 0L);
}
double SwigNumber_Check(PyObject* o) {
    return PyFloat_Check(o) || PyInt_Check(o);
}
double SwigNumber_AsDouble(PyObject* o) {
    return (PyFloat_Check(o) ? PyFloat_AsDouble(o) : double(PyInt_AsLong(o)));
}
PyObject* SwigString_FromString(const std::string& s) {
    return PyString_FromString(s.c_str());
}
std::string SwigString_AsString(PyObject* o) {
    return std::string(PyString_AsString(o));
}


#include <vector>
#include <algorithm>
#include <stdexcept>


#include "SimData/Exception.h"


#include "SimData/HashUtility.h"


#include "SimData/BaseType.h"


#include "SimData/Object.h"


#include "SimData/Pack.h"


#include "SimData/Path.h"


#include "SimData/Date.h"


#include "SimData/Vector3.h"
#include "SimData/Matrix3.h"

bool simdata_Vector3_operator_ee___(simdata::Vector3 *self,simdata::Vector3 const &a){ return *self == a; }
bool simdata_Vector3_operator_Ne___(simdata::Vector3 *self,simdata::Vector3 const &a){ return *self != a; }
double simdata_Vector3_operator_m_____SWIG_1(simdata::Vector3 *self,simdata::Vector3 const &a){ return self->Dot(a); }

#include "SimData/External.h"


#include "SimData/Spread.h"



class swig_string_bug_workaround {
public:
	swig_string_bug_workaround(std::string s) {
		get_as_swig_wrapped_pointer = s;
	}
	std::string get_as_swig_wrapped_pointer;
};



#include "SimData/Enum.h"

bool std_vectorlsimdata_Enum_g___nonzero_____(std::vector<simdata::Enum > *self){
                return !(self->empty());
            }
simdata::Enum std_vectorlsimdata_Enum_g_pop___(std::vector<simdata::Enum > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                simdata::Enum x = self->back();
                self->pop_back();
                return x;
            }
simdata::Enum &std_vectorlsimdata_Enum_g___getitem_____(std::vector<simdata::Enum > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
std::vector<simdata::Enum > std_vectorlsimdata_Enum_g___getslice_____(std::vector<simdata::Enum > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                std::vector<simdata::Enum > tmp(j-i);
                std::copy(self->begin()+i,self->begin()+j,tmp.begin());
                return tmp;
            }
void std_vectorlsimdata_Enum_g___setitem_____(std::vector<simdata::Enum > *self,int i,simdata::Enum const &x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
void std_vectorlsimdata_Enum_g___setslice_____(std::vector<simdata::Enum > *self,int i,int j,std::vector<simdata::Enum > const &v){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                if (int(v.size()) == j-i) {
                    std::copy(v.begin(),v.end(),self->begin()+i);
                } else {
                    self->erase(self->begin()+i,self->begin()+j);
                    if (i+1 <= self->size()) {
                        self->insert(self->begin()+i,v.begin(),v.end());
                    } else {
                        self->insert(self->end(),v.begin(),v.end());
	            }
                }
            }
void std_vectorlsimdata_Enum_g___delitem_____(std::vector<simdata::Enum > *self,int i){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    self->erase(self->begin()+i);
                else
                    throw std::out_of_range("vector index out of range");
            }
void std_vectorlsimdata_Enum_g___delslice_____(std::vector<simdata::Enum > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                self->erase(self->begin()+i,self->begin()+j);
            }
std::string std_vectorlstd_string_g_pop___(std::vector<std::string > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                std::string x = self->back();
                self->pop_back();
                return x;
            }
std::string std_vectorlstd_string_g___getitem_____(std::vector<std::string > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
std::vector<std::string > std_vectorlstd_string_g___getslice_____(std::vector<std::string > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                std::vector<std::string > tmp(j-i);
                std::copy(self->begin()+i,self->begin()+j,tmp.begin());
                return tmp;
            }
void std_vectorlstd_string_g___setitem_____(std::vector<std::string > *self,int i,std::string x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
void std_vectorlstd_string_g___setslice_____(std::vector<std::string > *self,int i,int j,std::vector<std::string > const &v){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                if (int(v.size()) == j-i) {
                    std::copy(v.begin(),v.end(),self->begin()+i);
                } else {
                    self->erase(self->begin()+i,self->begin()+j);
                    if (i+1 <= self->size())
                        self->insert(self->begin()+i,v.begin(),v.end());
                    else
                        self->insert(self->end(),v.begin(),v.end());
                }
            }
void std_vectorlstd_string_g___delitem_____(std::vector<std::string > *self,int i){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    self->erase(self->begin()+i);
                else
                    throw std::out_of_range("vector index out of range");
            }
void std_vectorlstd_string_g___delslice_____(std::vector<std::string > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                self->erase(self->begin()+i,self->begin()+j);
            }

#include "SimData/Interpolate.h"

float std_vectorlfloat_g_pop___(std::vector<float > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                float x = self->back();
                self->pop_back();
                return x;
            }
float std_vectorlfloat_g___getitem_____(std::vector<float > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
std::vector<float > std_vectorlfloat_g___getslice_____(std::vector<float > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                std::vector<float > tmp(j-i);
                std::copy(self->begin()+i,self->begin()+j,tmp.begin());
                return tmp;
            }
void std_vectorlfloat_g___setitem_____(std::vector<float > *self,int i,float x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
void std_vectorlfloat_g___setslice_____(std::vector<float > *self,int i,int j,std::vector<float > const &v){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                if (int(v.size()) == j-i) {
                    std::copy(v.begin(),v.end(),self->begin()+i);
                } else {
                    self->erase(self->begin()+i,self->begin()+j);
                    if (i+1 <= self->size())
                        self->insert(self->begin()+i,v.begin(),v.end());
                    else
                        self->insert(self->end(),v.begin(),v.end());
                }
            }
void std_vectorlfloat_g___delitem_____(std::vector<float > *self,int i){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    self->erase(self->begin()+i);
                else
                    throw std::out_of_range("vector index out of range");
            }
void std_vectorlfloat_g___delslice_____(std::vector<float > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                self->erase(self->begin()+i,self->begin()+j);
            }

#include "SimData/List.h"
#include "SimData/Spread.h"
#include "SimData/Vector3.h"
#include "SimData/Path.h"
#include "SimData/Interpolate.h"
#include "SimData/External.h"

int std_vectorlint_g_pop___(std::vector<int > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                int x = self->back();
                self->pop_back();
                return x;
            }
int std_vectorlint_g___getitem_____(std::vector<int > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
std::vector<int > std_vectorlint_g___getslice_____(std::vector<int > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                std::vector<int > tmp(j-i);
                std::copy(self->begin()+i,self->begin()+j,tmp.begin());
                return tmp;
            }
void std_vectorlint_g___setitem_____(std::vector<int > *self,int i,int x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
void std_vectorlint_g___setslice_____(std::vector<int > *self,int i,int j,std::vector<int > const &v){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                if (int(v.size()) == j-i) {
                    std::copy(v.begin(),v.end(),self->begin()+i);
                } else {
                    self->erase(self->begin()+i,self->begin()+j);
                    if (i+1 <= self->size())
                        self->insert(self->begin()+i,v.begin(),v.end());
                    else
                        self->insert(self->end(),v.begin(),v.end());
                }
            }
void std_vectorlint_g___delitem_____(std::vector<int > *self,int i){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    self->erase(self->begin()+i);
                else
                    throw std::out_of_range("vector index out of range");
            }
void std_vectorlint_g___delslice_____(std::vector<int > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                self->erase(self->begin()+i,self->begin()+j);
            }
bool std_vectorlsimdata_Spread_g___nonzero_____(std::vector<simdata::Spread > *self){
                return !(self->empty());
            }
simdata::Spread std_vectorlsimdata_Spread_g_pop___(std::vector<simdata::Spread > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                simdata::Spread x = self->back();
                self->pop_back();
                return x;
            }
simdata::Spread &std_vectorlsimdata_Spread_g___getitem_____(std::vector<simdata::Spread > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
std::vector<simdata::Spread > std_vectorlsimdata_Spread_g___getslice_____(std::vector<simdata::Spread > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                std::vector<simdata::Spread > tmp(j-i);
                std::copy(self->begin()+i,self->begin()+j,tmp.begin());
                return tmp;
            }
void std_vectorlsimdata_Spread_g___setitem_____(std::vector<simdata::Spread > *self,int i,simdata::Spread const &x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
void std_vectorlsimdata_Spread_g___setslice_____(std::vector<simdata::Spread > *self,int i,int j,std::vector<simdata::Spread > const &v){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                if (int(v.size()) == j-i) {
                    std::copy(v.begin(),v.end(),self->begin()+i);
                } else {
                    self->erase(self->begin()+i,self->begin()+j);
                    if (i+1 <= self->size()) {
                        self->insert(self->begin()+i,v.begin(),v.end());
                    } else {
                        self->insert(self->end(),v.begin(),v.end());
	            }
                }
            }
void std_vectorlsimdata_Spread_g___delitem_____(std::vector<simdata::Spread > *self,int i){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    self->erase(self->begin()+i);
                else
                    throw std::out_of_range("vector index out of range");
            }
void std_vectorlsimdata_Spread_g___delslice_____(std::vector<simdata::Spread > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                self->erase(self->begin()+i,self->begin()+j);
            }
bool std_vectorlsimdata_Path_g___nonzero_____(std::vector<simdata::Path > *self){
                return !(self->empty());
            }
simdata::Path std_vectorlsimdata_Path_g_pop___(std::vector<simdata::Path > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                simdata::Path x = self->back();
                self->pop_back();
                return x;
            }
simdata::Path &std_vectorlsimdata_Path_g___getitem_____(std::vector<simdata::Path > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
std::vector<simdata::Path > std_vectorlsimdata_Path_g___getslice_____(std::vector<simdata::Path > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                std::vector<simdata::Path > tmp(j-i);
                std::copy(self->begin()+i,self->begin()+j,tmp.begin());
                return tmp;
            }
void std_vectorlsimdata_Path_g___setitem_____(std::vector<simdata::Path > *self,int i,simdata::Path const &x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
void std_vectorlsimdata_Path_g___setslice_____(std::vector<simdata::Path > *self,int i,int j,std::vector<simdata::Path > const &v){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                if (int(v.size()) == j-i) {
                    std::copy(v.begin(),v.end(),self->begin()+i);
                } else {
                    self->erase(self->begin()+i,self->begin()+j);
                    if (i+1 <= self->size()) {
                        self->insert(self->begin()+i,v.begin(),v.end());
                    } else {
                        self->insert(self->end(),v.begin(),v.end());
	            }
                }
            }
void std_vectorlsimdata_Path_g___delitem_____(std::vector<simdata::Path > *self,int i){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    self->erase(self->begin()+i);
                else
                    throw std::out_of_range("vector index out of range");
            }
void std_vectorlsimdata_Path_g___delslice_____(std::vector<simdata::Path > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                self->erase(self->begin()+i,self->begin()+j);
            }
bool std_vectorlsimdata_Curve_g___nonzero_____(std::vector<simdata::Curve > *self){
                return !(self->empty());
            }
simdata::Curve std_vectorlsimdata_Curve_g_pop___(std::vector<simdata::Curve > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                simdata::Curve x = self->back();
                self->pop_back();
                return x;
            }
simdata::Curve &std_vectorlsimdata_Curve_g___getitem_____(std::vector<simdata::Curve > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
std::vector<simdata::Curve > std_vectorlsimdata_Curve_g___getslice_____(std::vector<simdata::Curve > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                std::vector<simdata::Curve > tmp(j-i);
                std::copy(self->begin()+i,self->begin()+j,tmp.begin());
                return tmp;
            }
void std_vectorlsimdata_Curve_g___setitem_____(std::vector<simdata::Curve > *self,int i,simdata::Curve const &x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
void std_vectorlsimdata_Curve_g___setslice_____(std::vector<simdata::Curve > *self,int i,int j,std::vector<simdata::Curve > const &v){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                if (int(v.size()) == j-i) {
                    std::copy(v.begin(),v.end(),self->begin()+i);
                } else {
                    self->erase(self->begin()+i,self->begin()+j);
                    if (i+1 <= self->size()) {
                        self->insert(self->begin()+i,v.begin(),v.end());
                    } else {
                        self->insert(self->end(),v.begin(),v.end());
	            }
                }
            }
void std_vectorlsimdata_Curve_g___delitem_____(std::vector<simdata::Curve > *self,int i){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    self->erase(self->begin()+i);
                else
                    throw std::out_of_range("vector index out of range");
            }
void std_vectorlsimdata_Curve_g___delslice_____(std::vector<simdata::Curve > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                self->erase(self->begin()+i,self->begin()+j);
            }
bool std_vectorlsimdata_Table_g___nonzero_____(std::vector<simdata::Table > *self){
                return !(self->empty());
            }
simdata::Table std_vectorlsimdata_Table_g_pop___(std::vector<simdata::Table > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                simdata::Table x = self->back();
                self->pop_back();
                return x;
            }
simdata::Table &std_vectorlsimdata_Table_g___getitem_____(std::vector<simdata::Table > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
std::vector<simdata::Table > std_vectorlsimdata_Table_g___getslice_____(std::vector<simdata::Table > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                std::vector<simdata::Table > tmp(j-i);
                std::copy(self->begin()+i,self->begin()+j,tmp.begin());
                return tmp;
            }
void std_vectorlsimdata_Table_g___setitem_____(std::vector<simdata::Table > *self,int i,simdata::Table const &x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
void std_vectorlsimdata_Table_g___setslice_____(std::vector<simdata::Table > *self,int i,int j,std::vector<simdata::Table > const &v){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                if (int(v.size()) == j-i) {
                    std::copy(v.begin(),v.end(),self->begin()+i);
                } else {
                    self->erase(self->begin()+i,self->begin()+j);
                    if (i+1 <= self->size()) {
                        self->insert(self->begin()+i,v.begin(),v.end());
                    } else {
                        self->insert(self->end(),v.begin(),v.end());
	            }
                }
            }
void std_vectorlsimdata_Table_g___delitem_____(std::vector<simdata::Table > *self,int i){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    self->erase(self->begin()+i);
                else
                    throw std::out_of_range("vector index out of range");
            }
void std_vectorlsimdata_Table_g___delslice_____(std::vector<simdata::Table > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                self->erase(self->begin()+i,self->begin()+j);
            }
bool std_vectorlsimdata_External_g___nonzero_____(std::vector<simdata::External > *self){
                return !(self->empty());
            }
simdata::External std_vectorlsimdata_External_g_pop___(std::vector<simdata::External > *self){
                if (self->size() == 0)
                    throw std::out_of_range("pop from empty vector");
                simdata::External x = self->back();
                self->pop_back();
                return x;
            }
simdata::External &std_vectorlsimdata_External_g___getitem_____(std::vector<simdata::External > *self,int i){
                int size = int(self->size());
                if (i<0) i += size;
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
std::vector<simdata::External > std_vectorlsimdata_External_g___getslice_____(std::vector<simdata::External > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                std::vector<simdata::External > tmp(j-i);
                std::copy(self->begin()+i,self->begin()+j,tmp.begin());
                return tmp;
            }
void std_vectorlsimdata_External_g___setitem_____(std::vector<simdata::External > *self,int i,simdata::External const &x){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
void std_vectorlsimdata_External_g___setslice_____(std::vector<simdata::External > *self,int i,int j,std::vector<simdata::External > const &v){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                if (int(v.size()) == j-i) {
                    std::copy(v.begin(),v.end(),self->begin()+i);
                } else {
                    self->erase(self->begin()+i,self->begin()+j);
                    if (i+1 <= self->size()) {
                        self->insert(self->begin()+i,v.begin(),v.end());
                    } else {
                        self->insert(self->end(),v.begin(),v.end());
	            }
                }
            }
void std_vectorlsimdata_External_g___delitem_____(std::vector<simdata::External > *self,int i){
                int size = int(self->size());
                if (i<0) i+= size;
                if (i>=0 && i<size)
                    self->erase(self->begin()+i);
                else
                    throw std::out_of_range("vector index out of range");
            }
void std_vectorlsimdata_External_g___delslice_____(std::vector<simdata::External > *self,int i,int j){
                int size = int(self->size());
                if (i<0) i = size+i;
                if (j<0) j = size+j;
                if (i<0) i = 0;
                if (j>size) j = size;
                self->erase(self->begin()+i,self->begin()+j);
            }

#include "SimData/Matrix3.h"
#include "SimData/Vector3.h"


#include <SimData/Object.h>
#include <SimData/DataArchive.h>

extern simdata::DataArchive *simdata::g_defaultArchive;

#include <SimData/InterfaceRegistry.h>
#include <SimData/ns-simdata.h>
using SIMDATA(TypeAdapter);

void simdata_InterfaceProxy_set__SWIG_0(simdata::InterfaceProxy *self,simdata::Object *p,char const *name,int v){
		self->set(p, name, TypeAdapter(v));
	}
void simdata_InterfaceProxy_set__SWIG_1(simdata::InterfaceProxy *self,simdata::Object *p,char const *name,double v){
		self->set(p, name, TypeAdapter(v));
	}
void simdata_InterfaceProxy_set__SWIG_2(simdata::InterfaceProxy *self,simdata::Object *p,char const *name,char const *v){
		self->set(p, name, TypeAdapter(v));
	}
void simdata_InterfaceProxy_set__SWIG_3(simdata::InterfaceProxy *self,simdata::Object *p,char const *name,simdata::BaseType *v){
		self->set(p, name, TypeAdapter(v));
	}
void simdata_InterfaceProxy_push_back(simdata::InterfaceProxy *self,simdata::Object *p,char const *name,simdata::BaseType const &v){
		self->push_back(p, name, TypeAdapter(v));
	}
extern simdata::InterfaceRegistry simdata::g_InterfaceRegistry;
#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_new_Exception__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::string arg1 = (std::string) "Exception" ;
    std::string arg2 = (std::string) "" ;
    simdata::Exception *result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|OO:new_Exception",&obj0,&obj1)) goto fail;
    if (obj0) {
        {
            if (PyString_Check(obj0))
            arg1 = std::string(PyString_AsString(obj0));
            else
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    if (obj1) {
        {
            if (PyString_Check(obj1))
            arg2 = std::string(PyString_AsString(obj1));
            else
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (simdata::Exception *)new simdata::Exception(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Exception, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Exception__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Exception *arg1 = 0 ;
    simdata::Exception *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Exception",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Exception,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (simdata::Exception *)new simdata::Exception((simdata::Exception const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Exception, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Exception(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 0) && (argc <= 2)) {
        int _v;
        if (argc <= 0) {
            return _wrap_new_Exception__SWIG_0(self,args);
        }
        {
            _v = PyString_Check(argv[0]) ? 1 : 0;
        }
        if (_v) {
            if (argc <= 1) {
                return _wrap_new_Exception__SWIG_0(self,args);
            }
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_new_Exception__SWIG_0(self,args);
            }
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Exception, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_Exception__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_Exception'");
    return NULL;
}


static PyObject *_wrap_delete_Exception(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Exception *arg1 = (simdata::Exception *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Exception",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Exception,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_getMessage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Exception *arg1 = (simdata::Exception *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Exception_getMessage",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Exception,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->getMessage();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_getType(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Exception *arg1 = (simdata::Exception *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Exception_getType",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Exception,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->getType();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_appendMessage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Exception *arg1 = (simdata::Exception *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Exception_appendMessage",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Exception,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    (arg1)->appendMessage((std::string const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Exception *arg1 = (simdata::Exception *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Exception_clear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Exception,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Exception_details(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Exception *arg1 = (simdata::Exception *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Exception_details",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Exception,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->details();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Exception_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__Exception, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_PythonException(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::PythonException *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_PythonException")) goto fail;
    result = (simdata::PythonException *)new simdata::PythonException();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__PythonException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_PythonException(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::PythonException *arg1 = (simdata::PythonException *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_PythonException",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__PythonException,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * PythonException_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__PythonException, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_HashT__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::HashT *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_HashT")) goto fail;
    result = (simdata::HashT *)new simdata::HashT();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__HashT, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_HashT__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    guint32 arg1 ;
    simdata::HashT *result;
    guint32 *argp1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_HashT",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &argp1, SWIGTYPE_p_guint32,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg1 = *argp1; 
    result = (simdata::HashT *)new simdata::HashT(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__HashT, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_HashT__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    guint32 arg1 ;
    guint32 arg2 ;
    simdata::HashT *result;
    guint32 *argp1 ;
    guint32 *argp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_HashT",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &argp1, SWIGTYPE_p_guint32,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg1 = *argp1; 
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_guint32,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    result = (simdata::HashT *)new simdata::HashT(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__HashT, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_HashT__SWIG_3(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::HashT *arg1 = 0 ;
    simdata::HashT *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_HashT",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__HashT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (simdata::HashT *)new simdata::HashT((simdata::HashT const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__HashT, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_HashT(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_HashT__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_guint32, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_HashT__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__HashT, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_HashT__SWIG_3(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_guint32, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_guint32, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_new_HashT__SWIG_2(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_HashT'");
    return NULL;
}


static PyObject *_wrap_HashT___eq____SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::HashT *arg1 = (simdata::HashT *) 0 ;
    guint32 arg2 ;
    bool result;
    guint32 *argp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HashT___eq__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__HashT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_guint32,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    result = (bool)((simdata::HashT const *)arg1)->operator ==(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HashT___ne____SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::HashT *arg1 = (simdata::HashT *) 0 ;
    guint32 arg2 ;
    bool result;
    guint32 *argp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HashT___ne__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__HashT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_guint32,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    result = (bool)((simdata::HashT const *)arg1)->operator !=(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HashT___eq____SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::HashT *arg1 = (simdata::HashT *) 0 ;
    simdata::HashT *arg2 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HashT___eq__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__HashT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__HashT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((simdata::HashT const *)arg1)->operator ==((simdata::HashT const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HashT___eq__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__HashT, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_guint32, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_HashT___eq____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__HashT, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__HashT, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_HashT___eq____SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'HashT___eq__'");
    return NULL;
}


static PyObject *_wrap_HashT___ne____SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::HashT *arg1 = (simdata::HashT *) 0 ;
    simdata::HashT *arg2 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:HashT___ne__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__HashT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__HashT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((simdata::HashT const *)arg1)->operator !=((simdata::HashT const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_HashT___ne__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__HashT, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_guint32, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_HashT___ne____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__HashT, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__HashT, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_HashT___ne____SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'HashT___ne__'");
    return NULL;
}


static PyObject *_wrap_delete_HashT(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::HashT *arg1 = (simdata::HashT *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_HashT",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__HashT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * HashT_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__HashT, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_hash_string(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    simdata::HashT result;
    
    if(!PyArg_ParseTuple(args,(char *)"s:hash_string",&arg1)) goto fail;
    result = simdata::newhasht_cstring((char const *)arg1);
    
    {
        simdata::HashT * resultptr;
        resultptr = new simdata::HashT((simdata::HashT &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__HashT, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ParseException(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::string arg1 = (std::string) "" ;
    simdata::ParseException *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_ParseException",&obj0)) goto fail;
    if (obj0) {
        {
            if (PyString_Check(obj0))
            arg1 = std::string(PyString_AsString(obj0));
            else
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (simdata::ParseException *)new simdata::ParseException(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__ParseException, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ParseException(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::ParseException *arg1 = (simdata::ParseException *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ParseException",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ParseException,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ParseException_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__ParseException, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_BaseType_pack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::BaseType *arg1 = (simdata::BaseType *) 0 ;
    simdata::Packer *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:BaseType_pack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__BaseType,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    ((simdata::BaseType const *)arg1)->pack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BaseType_unpack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::BaseType *arg1 = (simdata::BaseType *) 0 ;
    simdata::UnPacker *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:BaseType_unpack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__BaseType,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->unpack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BaseType_parseXML(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::BaseType *arg1 = (simdata::BaseType *) 0 ;
    char *arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:BaseType_parseXML",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__BaseType,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->parseXML((char const *)arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BaseType_convertXML(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::BaseType *arg1 = (simdata::BaseType *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:BaseType_convertXML",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__BaseType,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->convertXML();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_BaseType_asString(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::BaseType *arg1 = (simdata::BaseType *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:BaseType_asString",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__BaseType,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::BaseType const *)arg1)->asString();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_BaseType(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::BaseType *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_BaseType")) goto fail;
    {
        try {
            result = (simdata::BaseType *)new simdata::BaseType();
            
        }catch (simdata::ParseException e) {
            e.details();
            SWIG_exception(SWIG_RuntimeError, "");
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__BaseType, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_BaseType(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::BaseType *arg1 = (simdata::BaseType *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_BaseType",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__BaseType,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
            
        }catch (simdata::ParseException e) {
            e.details();
            SWIG_exception(SWIG_RuntimeError, "");
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * BaseType_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__BaseType, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap___lshift__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::ostream *arg1 = 0 ;
    simdata::BaseType *arg2 = 0 ;
    std::ostream *result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__ostream,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__BaseType,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        std::ostream &_result_ref = simdata::operator <<(*arg1,(simdata::BaseType const &)*arg2);
        result = (std::ostream *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__ostream, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Object__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Object *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Object")) goto fail;
    {
        try {
            result = (simdata::Object *)new simdata::Object();
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Object, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Object(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Object *arg1 = (simdata::Object *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Object",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Object,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Object__new(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Object *arg1 = (simdata::Object *) 0 ;
    simdata::Object *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Object__new",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Object,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (simdata::Object *)((simdata::Object const *)arg1)->_new();
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Object, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Object__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Object *arg1 = 0 ;
    simdata::Object *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Object",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Object,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (simdata::Object *)new simdata::Object((simdata::Object const &)*arg1);
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Object, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Object(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Object__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Object, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_Object__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_Object'");
    return NULL;
}


static PyObject *_wrap_Object__getClassName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *result;
    
    if(!PyArg_ParseTuple(args,(char *)":Object__getClassName")) goto fail;
    {
        try {
            result = (char *)simdata::Object::_getClassName();
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Object_getClassName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Object *arg1 = (simdata::Object *) 0 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Object_getClassName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Object,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (char *)((simdata::Object const *)arg1)->getClassName();
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Object__getClassHash(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::hasht result;
    
    if(!PyArg_ParseTuple(args,(char *)":Object__getClassHash")) goto fail;
    {
        try {
            result = simdata::Object::_getClassHash();
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    {
        simdata::hasht * resultptr;
        resultptr = new simdata::hasht((simdata::hasht &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__hasht, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Object_getClassHash(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Object *arg1 = (simdata::Object *) 0 ;
    simdata::hasht result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Object_getClassHash",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Object,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = ((simdata::Object const *)arg1)->getClassHash();
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    {
        simdata::hasht * resultptr;
        resultptr = new simdata::hasht((simdata::hasht &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__hasht, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Object__getClassVersion(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *result;
    
    if(!PyArg_ParseTuple(args,(char *)":Object__getClassVersion")) goto fail;
    {
        try {
            result = (char *)simdata::Object::_getClassVersion();
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Object_getClassVersion(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Object *arg1 = (simdata::Object *) 0 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Object_getClassVersion",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Object,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (char *)((simdata::Object const *)arg1)->getClassVersion();
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Object_pack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Object *arg1 = (simdata::Object *) 0 ;
    simdata::Packer *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Object_pack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Object,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            ((simdata::Object const *)arg1)->pack(*arg2);
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Object_unpack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Object *arg1 = (simdata::Object *) 0 ;
    simdata::UnPacker *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Object_unpack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Object,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->unpack(*arg2);
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Object_setStatic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Object *arg1 = (simdata::Object *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Object_setStatic",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Object,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->setStatic(arg2);
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Object_isStatic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Object *arg1 = (simdata::Object *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Object_isStatic",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Object,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (int)((simdata::Object const *)arg1)->isStatic();
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Object_ref(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Object *arg1 = (simdata::Object *) 0 ;
    unsigned int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Object_ref",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Object,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (unsigned int)((simdata::Object const *)arg1)->ref();
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Object_deref(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Object *arg1 = (simdata::Object *) 0 ;
    unsigned int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Object_deref",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Object,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (unsigned int)((simdata::Object const *)arg1)->deref();
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Object_getCount(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Object *arg1 = (simdata::Object *) 0 ;
    unsigned int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Object_getCount",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Object,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (unsigned int)((simdata::Object const *)arg1)->getCount();
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Object___repr__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Object *arg1 = (simdata::Object *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Object___repr__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Object,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = ((simdata::Object const *)arg1)->asString();
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Object_getPath(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Object *arg1 = (simdata::Object *) 0 ;
    simdata::hasht result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Object_getPath",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Object,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = ((simdata::Object const *)arg1)->getPath();
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    {
        simdata::hasht * resultptr;
        resultptr = new simdata::hasht((simdata::hasht &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__hasht, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Object_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__Object, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Packer(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FILE *arg1 = (FILE *) 0 ;
    simdata::Packer *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Packer",&obj0)) goto fail;
    {
        if (!PyFile_Check(obj0)) {
            FILE* fp;
            if ((SWIG_ConvertPtr(obj0,(void **) &fp, SWIGTYPE_p_FILE,SWIG_POINTER_EXCEPTION | 0 )) == -1) {
                PyErr_SetString(PyExc_TypeError, "Need a file!");
                return NULL;
            }
            arg1 = fp;
        }else arg1 = PyFile_AsFile(obj0);
    }
    {
        try {
            result = (simdata::Packer *)new simdata::Packer(arg1);
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Packer, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Packer_resetCount(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Packer *arg1 = (simdata::Packer *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Packer_resetCount",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->resetCount();
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Packer_getCount(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Packer *arg1 = (simdata::Packer *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Packer_getCount",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (int)(arg1)->getCount();
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Packer_pack__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Packer *arg1 = (simdata::Packer *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Packer_pack",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->pack(arg2);
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Packer_pack__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Packer *arg1 = (simdata::Packer *) 0 ;
    double arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:Packer_pack",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->pack(arg2);
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Packer_pack__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Packer *arg1 = (simdata::Packer *) 0 ;
    char *arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:Packer_pack",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->pack((char const *)arg2);
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Packer_pack__SWIG_3(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Packer *arg1 = (simdata::Packer *) 0 ;
    simdata::BaseType *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Packer_pack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__BaseType,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->pack((simdata::BaseType const &)*arg2);
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Packer_pack(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Packer, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__BaseType, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_Packer_pack__SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Packer, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Packer_pack__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Packer, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Packer_pack__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Packer, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Packer_pack__SWIG_2(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'Packer_pack'");
    return NULL;
}


static PyObject *_wrap_Packer_pack_double(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Packer *arg1 = (simdata::Packer *) 0 ;
    double arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:Packer_pack_double",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->pack_double(arg2);
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Packer_pack_float(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Packer *arg1 = (simdata::Packer *) 0 ;
    float arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:Packer_pack_float",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->pack_float(arg2);
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Packer_pack_int(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Packer *arg1 = (simdata::Packer *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Packer_pack_int",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->pack_int(arg2);
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Packer_pack_hasht(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Packer *arg1 = (simdata::Packer *) 0 ;
    simdata::hasht arg2 ;
    simdata::hasht *argp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Packer_pack_hasht",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_simdata__hasht,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        try {
            (arg1)->pack_hasht(arg2);
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Packer_pack_string(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Packer *arg1 = (simdata::Packer *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Packer_pack_string",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        try {
            (arg1)->pack_string((std::string const &)*arg2);
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Packer_pack_basetype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Packer *arg1 = (simdata::Packer *) 0 ;
    simdata::BaseType *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Packer_pack_basetype",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__BaseType,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->pack_basetype(*arg2);
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Packer(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Packer *arg1 = (simdata::Packer *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Packer",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Packer_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__Packer, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_UnPacker__getArchive(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::UnPacker *arg1 = (simdata::UnPacker *) 0 ;
    simdata::DataArchive *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:UnPacker__getArchive",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (simdata::DataArchive *)(arg1)->_getArchive();
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__DataArchive, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_UnPacker(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    int arg2 ;
    simdata::DataArchive *arg3 = (simdata::DataArchive *) 0 ;
    simdata::UnPacker *result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:new_UnPacker",&obj0,&obj1)) goto fail;
    {
        arg1 = PyString_AsString(obj0);
        arg2 = PyString_Size(obj0);
    }
    if (obj1) {
        if ((SWIG_ConvertPtr(obj1,(void **) &arg3, SWIGTYPE_p_simdata__DataArchive,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    {
        try {
            result = (simdata::UnPacker *)new simdata::UnPacker((char const *)arg1,arg2,arg3);
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__UnPacker, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_UnPacker_isComplete(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::UnPacker *arg1 = (simdata::UnPacker *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:UnPacker_isComplete",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (bool)((simdata::UnPacker const *)arg1)->isComplete();
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_UnPacker_unpack__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::UnPacker *arg1 = (simdata::UnPacker *) 0 ;
    double *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:UnPacker_unpack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->unpack(*arg2);
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_UnPacker_unpack__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::UnPacker *arg1 = (simdata::UnPacker *) 0 ;
    int *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:UnPacker_unpack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_int,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->unpack(*arg2);
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_UnPacker_unpack__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::UnPacker *arg1 = (simdata::UnPacker *) 0 ;
    bool *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:UnPacker_unpack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_bool,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->unpack(*arg2);
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_UnPacker_unpack__SWIG_3(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::UnPacker *arg1 = (simdata::UnPacker *) 0 ;
    char **arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:UnPacker_unpack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_p_char,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->unpack(*arg2);
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_UnPacker_unpack(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__UnPacker, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_double, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_UnPacker_unpack__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__UnPacker, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_int, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_UnPacker_unpack__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__UnPacker, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_bool, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_UnPacker_unpack__SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__UnPacker, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_p_char, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_UnPacker_unpack__SWIG_3(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'UnPacker_unpack'");
    return NULL;
}


static PyObject *_wrap_UnPacker_unpack_packable(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::UnPacker *arg1 = (simdata::UnPacker *) 0 ;
    simdata::BaseType *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:UnPacker_unpack_packable",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__BaseType,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->unpack(*arg2);
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_UnPacker_unpack_double(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::UnPacker *arg1 = (simdata::UnPacker *) 0 ;
    double result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:UnPacker_unpack_double",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (double)(arg1)->unpack_double();
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_UnPacker_unpack_float(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::UnPacker *arg1 = (simdata::UnPacker *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:UnPacker_unpack_float",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (float)(arg1)->unpack_float();
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_UnPacker_unpack_int(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::UnPacker *arg1 = (simdata::UnPacker *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:UnPacker_unpack_int",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (int)(arg1)->unpack_int();
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_UnPacker_unpack_hasht(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::UnPacker *arg1 = (simdata::UnPacker *) 0 ;
    simdata::hasht result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:UnPacker_unpack_hasht",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (arg1)->unpack_hasht();
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    {
        simdata::hasht * resultptr;
        resultptr = new simdata::hasht((simdata::hasht &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__hasht, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_UnPacker_unpack_string(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::UnPacker *arg1 = (simdata::UnPacker *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:UnPacker_unpack_string",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (arg1)->unpack_string();
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_UnPacker_unpack_basetype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::UnPacker *arg1 = (simdata::UnPacker *) 0 ;
    simdata::BaseType *arg2 = 0 ;
    simdata::BaseType *result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:UnPacker_unpack_basetype",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__BaseType,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            {
                simdata::BaseType &_result_ref = (arg1)->unpack_basetype(*arg2);
                result = (simdata::BaseType *) &_result_ref;
            }
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__BaseType, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_UnPacker(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::UnPacker *arg1 = (simdata::UnPacker *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_UnPacker",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
            
        }catch (simdata::PythonException &e) {
            printf("passing it back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * UnPacker_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__UnPacker, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ObjectTypeMismatch(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::string arg1 = (std::string) "" ;
    simdata::ObjectTypeMismatch *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_ObjectTypeMismatch",&obj0)) goto fail;
    if (obj0) {
        {
            if (PyString_Check(obj0))
            arg1 = std::string(PyString_AsString(obj0));
            else
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (simdata::ObjectTypeMismatch *)new simdata::ObjectTypeMismatch(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__ObjectTypeMismatch, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ObjectTypeMismatch(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::ObjectTypeMismatch *arg1 = (simdata::ObjectTypeMismatch *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ObjectTypeMismatch",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ObjectTypeMismatch,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ObjectTypeMismatch_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__ObjectTypeMismatch, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Path__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) 0 ;
    simdata::Path *result;
    
    if(!PyArg_ParseTuple(args,(char *)"|s:new_Path",&arg1)) goto fail;
    result = (simdata::Path *)new simdata::Path((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Path, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Path__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::ObjectID arg1 ;
    simdata::Path *result;
    simdata::ObjectID *argp1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Path",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &argp1, SWIGTYPE_p_simdata__ObjectID,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg1 = *argp1; 
    result = (simdata::Path *)new simdata::Path(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Path, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Path(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 0) && (argc <= 1)) {
        int _v;
        if (argc <= 0) {
            return _wrap_new_Path__SWIG_0(self,args);
        }
        {
            _v = PyString_Check(argv[0]) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_Path__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__ObjectID, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_Path__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_Path'");
    return NULL;
}


static PyObject *_wrap_delete_Path(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Path *arg1 = (simdata::Path *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Path",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Path,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Path_setPath__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Path *arg1 = (simdata::Path *) 0 ;
    simdata::ObjectID arg2 ;
    simdata::ObjectID *argp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Path_setPath",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Path,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_simdata__ObjectID,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    (arg1)->setPath(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Path_setPath__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Path *arg1 = (simdata::Path *) 0 ;
    char *arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:Path_setPath",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Path,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setPath((char const *)arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Path_setPath(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Path, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__ObjectID, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_Path_setPath__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Path, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Path_setPath__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'Path_setPath'");
    return NULL;
}


static PyObject *_wrap_Path_setNone(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Path *arg1 = (simdata::Path *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Path_setNone",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Path,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setNone();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Path_getPath(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Path *arg1 = (simdata::Path *) 0 ;
    simdata::ObjectID result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Path_getPath",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Path,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::Path const *)arg1)->getPath();
    
    {
        simdata::ObjectID * resultptr;
        resultptr = new simdata::ObjectID((simdata::ObjectID &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__ObjectID, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Path_pack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Path *arg1 = (simdata::Path *) 0 ;
    simdata::Packer *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Path_pack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Path,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    ((simdata::Path const *)arg1)->pack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Path_unpack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Path *arg1 = (simdata::Path *) 0 ;
    simdata::UnPacker *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Path_unpack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Path,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->unpack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Path_isNone(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Path *arg1 = (simdata::Path *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Path_isNone",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Path,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((simdata::Path const *)arg1)->isNone();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Path___eq__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Path *arg1 = (simdata::Path *) 0 ;
    simdata::Path *arg2 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Path___eq__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Path,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Path,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((simdata::Path const *)arg1)->operator ==((simdata::Path const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Path___repr__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Path *arg1 = (simdata::Path *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Path___repr__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Path,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::Path const *)arg1)->asString();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Path_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__Path, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_PointerBase___eq____SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::PointerBase *arg1 = (simdata::PointerBase *) 0 ;
    simdata::PointerBase *arg2 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PointerBase___eq__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__PointerBase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__PointerBase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->__eq__((simdata::PointerBase const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PointerBase___ne__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::PointerBase *arg1 = (simdata::PointerBase *) 0 ;
    simdata::PointerBase *arg2 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PointerBase___ne__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__PointerBase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__PointerBase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->__ne__((simdata::PointerBase const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_PointerBase__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::PointerBase *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_PointerBase")) goto fail;
    result = (simdata::PointerBase *)new simdata::PointerBase();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__PointerBase, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_PointerBase__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Object *arg1 = (simdata::Object *) 0 ;
    simdata::PointerBase *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_PointerBase",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Object,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (simdata::PointerBase *)new simdata::PointerBase(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__PointerBase, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_PointerBase(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::PointerBase *arg1 = (simdata::PointerBase *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_PointerBase",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__PointerBase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PointerBase_unique(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::PointerBase *arg1 = (simdata::PointerBase *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PointerBase_unique",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__PointerBase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((simdata::PointerBase const *)arg1)->unique();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_PointerBase__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::PointerBase *arg1 = 0 ;
    simdata::PointerBase *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_PointerBase",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__PointerBase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (simdata::PointerBase *)new simdata::PointerBase((simdata::PointerBase const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__PointerBase, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_PointerBase(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_PointerBase__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Object, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_PointerBase__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__PointerBase, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_PointerBase__SWIG_2(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_PointerBase'");
    return NULL;
}


static PyObject *_wrap_PointerBase_isNull(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::PointerBase *arg1 = (simdata::PointerBase *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PointerBase_isNull",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__PointerBase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((simdata::PointerBase const *)arg1)->isNull();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PointerBase___not__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::PointerBase *arg1 = (simdata::PointerBase *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PointerBase___not__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__PointerBase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((simdata::PointerBase const *)arg1)->operator !();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PointerBase_valid(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::PointerBase *arg1 = (simdata::PointerBase *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PointerBase_valid",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__PointerBase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((simdata::PointerBase const *)arg1)->valid();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PointerBase___eq____SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::PointerBase *arg1 = (simdata::PointerBase *) 0 ;
    simdata::PointerBase *arg2 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PointerBase___eq__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__PointerBase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__PointerBase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((simdata::PointerBase const *)arg1)->operator ==((simdata::PointerBase const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PointerBase___eq__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__PointerBase, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__PointerBase, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_PointerBase___eq____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__PointerBase, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__PointerBase, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_PointerBase___eq____SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'PointerBase___eq__'");
    return NULL;
}


static PyObject *_wrap_PointerBase___get__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::PointerBase *arg1 = (simdata::PointerBase *) 0 ;
    simdata::Object *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PointerBase___get__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__PointerBase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (simdata::Object *)(arg1)->__get__();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Object, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * PointerBase_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__PointerBase, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_PathPointerBase___eq____SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::PathPointerBase *arg1 = (simdata::PathPointerBase *) 0 ;
    simdata::PathPointerBase *arg2 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PathPointerBase___eq__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__PathPointerBase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__PathPointerBase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->__eq__((simdata::PathPointerBase const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PathPointerBase___ne__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::PathPointerBase *arg1 = (simdata::PathPointerBase *) 0 ;
    simdata::PathPointerBase *arg2 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PathPointerBase___ne__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__PathPointerBase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__PathPointerBase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->__ne__((simdata::PathPointerBase const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_PathPointerBase__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::PathPointerBase *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_PathPointerBase")) goto fail;
    result = (simdata::PathPointerBase *)new simdata::PathPointerBase();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__PathPointerBase, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_PathPointerBase__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    simdata::PathPointerBase *result;
    
    if(!PyArg_ParseTuple(args,(char *)"s:new_PathPointerBase",&arg1)) goto fail;
    result = (simdata::PathPointerBase *)new simdata::PathPointerBase((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__PathPointerBase, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_PathPointerBase__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Path *arg1 = 0 ;
    simdata::Object *arg2 = (simdata::Object *) 0 ;
    simdata::PathPointerBase *result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_PathPointerBase",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Path,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Object,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (simdata::PathPointerBase *)new simdata::PathPointerBase((simdata::Path const &)*arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__PathPointerBase, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_PathPointerBase(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::PathPointerBase *arg1 = (simdata::PathPointerBase *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_PathPointerBase",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__PathPointerBase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_PathPointerBase__SWIG_3(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::PathPointerBase *arg1 = 0 ;
    simdata::PathPointerBase *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_PathPointerBase",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__PathPointerBase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (simdata::PathPointerBase *)new simdata::PathPointerBase((simdata::PathPointerBase const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__PathPointerBase, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_PathPointerBase(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_PathPointerBase__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__PathPointerBase, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_PathPointerBase__SWIG_3(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            _v = PyString_Check(argv[0]) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_PathPointerBase__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Path, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__Object, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_new_PathPointerBase__SWIG_2(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_PathPointerBase'");
    return NULL;
}


static PyObject *_wrap_PathPointerBase_unpack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::PathPointerBase *arg1 = (simdata::PathPointerBase *) 0 ;
    simdata::UnPacker *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PathPointerBase_unpack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__PathPointerBase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->unpack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PathPointerBase___repr__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::PathPointerBase *arg1 = (simdata::PathPointerBase *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PathPointerBase___repr__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__PathPointerBase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::PathPointerBase const *)arg1)->asString();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PathPointerBase___eq____SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::PathPointerBase *arg1 = (simdata::PathPointerBase *) 0 ;
    simdata::PointerBase *arg2 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:PathPointerBase___eq__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__PathPointerBase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__PointerBase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((simdata::PathPointerBase const *)arg1)->operator ==((simdata::PointerBase const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PathPointerBase___eq__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__PathPointerBase, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__PathPointerBase, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_PathPointerBase___eq____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__PathPointerBase, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__PointerBase, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_PathPointerBase___eq____SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'PathPointerBase___eq__'");
    return NULL;
}


static PyObject *_wrap_PathPointerBase_setNone(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::PathPointerBase *arg1 = (simdata::PathPointerBase *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PathPointerBase_setNone",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__PathPointerBase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setNone();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_PathPointerBase_setNull(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::PathPointerBase *arg1 = (simdata::PathPointerBase *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:PathPointerBase_setNull",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__PathPointerBase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setNull();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * PathPointerBase_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__PathPointerBase, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_tstart(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    
    if(!PyArg_ParseTuple(args,(char *)":tstart")) goto fail;
    tstart();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tend(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    
    if(!PyArg_ParseTuple(args,(char *)":tend")) goto fail;
    tend();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tval(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    double result;
    
    if(!PyArg_ParseTuple(args,(char *)":tval")) goto fail;
    result = (double)tval();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_get_realtime(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    timing_t result;
    
    if(!PyArg_ParseTuple(args,(char *)":get_realtime")) goto fail;
    result = (timing_t)get_realtime();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_InvalidDate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InvalidDate *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_InvalidDate")) goto fail;
    result = (simdata::InvalidDate *)new simdata::InvalidDate();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__InvalidDate, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_InvalidDate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InvalidDate *arg1 = (simdata::InvalidDate *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_InvalidDate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InvalidDate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * InvalidDate_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__InvalidDate, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Date__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Date")) goto fail;
    result = (simdata::Date *)new simdata::Date();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Date, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Date__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date::year_t arg1 ;
    simdata::Date::month_t arg2 ;
    simdata::Date::day_t arg3 ;
    simdata::Date *result;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"hOO:new_Date",&arg1,&obj1,&obj2)) goto fail;
    arg2 = (simdata::Date::month_t) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (simdata::Date::day_t) PyInt_AsLong(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    result = (simdata::Date *)new simdata::Date(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Date, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Date__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date::julian_t arg1 ;
    simdata::Date *result;
    
    if(!PyArg_ParseTuple(args,(char *)"i:new_Date",&arg1)) goto fail;
    result = (simdata::Date *)new simdata::Date(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Date, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Date__SWIG_3(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date *arg1 = 0 ;
    simdata::Date *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Date",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Date,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (simdata::Date *)new simdata::Date((simdata::Date const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Date, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Date(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Date__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Date, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_Date__SWIG_3(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_Date__SWIG_2(self,args);
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_new_Date__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_Date'");
    return NULL;
}


static PyObject *_wrap_Date_validYMD(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date::year_t arg1 ;
    simdata::Date::month_t arg2 ;
    simdata::Date::day_t arg3 ;
    bool result;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"hOO:Date_validYMD",&arg1,&obj1,&obj2)) goto fail;
    arg2 = (simdata::Date::month_t) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (simdata::Date::day_t) PyInt_AsLong(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    result = (bool)simdata::Date::validYMD(arg1,arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Date_isLeap__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date *arg1 = (simdata::Date *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Date_isLeap",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Date,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((simdata::Date const *)arg1)->isLeap();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Date_isLeap__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date::year_t arg1 ;
    bool result;
    
    if(!PyArg_ParseTuple(args,(char *)"h:Date_isLeap",&arg1)) goto fail;
    result = (bool)simdata::Date::isLeap(arg1);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Date_isLeap(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Date, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Date_isLeap__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_Date_isLeap__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'Date_isLeap'");
    return NULL;
}


static PyObject *_wrap_Date_getWeekday(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date *arg1 = (simdata::Date *) 0 ;
    simdata::Date::weekday_t result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Date_getWeekday",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Date,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (simdata::Date::weekday_t)((simdata::Date const *)arg1)->getWeekday();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Date_getMonth(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date *arg1 = (simdata::Date *) 0 ;
    simdata::Date::month_t result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Date_getMonth",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Date,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (simdata::Date::month_t)((simdata::Date const *)arg1)->getMonth();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Date_getDay(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date *arg1 = (simdata::Date *) 0 ;
    simdata::Date::month_t result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Date_getDay",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Date,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (simdata::Date::month_t)((simdata::Date const *)arg1)->getDay();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Date_getYear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date *arg1 = (simdata::Date *) 0 ;
    simdata::Date::year_t result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Date_getYear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Date,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (simdata::Date::year_t)((simdata::Date const *)arg1)->getYear();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Date_getJulian(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date *arg1 = (simdata::Date *) 0 ;
    simdata::Date::julian_t result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Date_getJulian",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Date,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (simdata::Date::julian_t)((simdata::Date const *)arg1)->getJulian();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Date_getMonthName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date *arg1 = (simdata::Date *) 0 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Date_getMonthName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Date,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *)((simdata::Date const *)arg1)->getMonthName();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Date_getMonthShortName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date *arg1 = (simdata::Date *) 0 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Date_getMonthShortName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Date,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *)((simdata::Date const *)arg1)->getMonthShortName();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Date_getWeekdayName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date *arg1 = (simdata::Date *) 0 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Date_getWeekdayName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Date,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *)((simdata::Date const *)arg1)->getWeekdayName();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Date_getWeekdayShortName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date *arg1 = (simdata::Date *) 0 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Date_getWeekdayShortName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Date,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (char *)((simdata::Date const *)arg1)->getWeekdayShortName();
    
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Date_setJulian(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date *arg1 = (simdata::Date *) 0 ;
    simdata::Date::julian_t arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Date_setJulian",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Date,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setJulian(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Date_getDayOfYear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date *arg1 = (simdata::Date *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Date_getDayOfYear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Date,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((simdata::Date const *)arg1)->getDayOfYear();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Date_getMondayWeekOfYear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date *arg1 = (simdata::Date *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Date_getMondayWeekOfYear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Date,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((simdata::Date const *)arg1)->getMondayWeekOfYear();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Date_getSundayWeekOfYear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date *arg1 = (simdata::Date *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Date_getSundayWeekOfYear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Date,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((simdata::Date const *)arg1)->getSundayWeekOfYear();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Date_isFirstOfMonth(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date *arg1 = (simdata::Date *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Date_isFirstOfMonth",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Date,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((simdata::Date const *)arg1)->isFirstOfMonth();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Date_isLastOfMonth(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date *arg1 = (simdata::Date *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Date_isLastOfMonth",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Date,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((simdata::Date const *)arg1)->isLastOfMonth();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Date_addDays(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date *arg1 = (simdata::Date *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Date_addDays",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Date,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->addDays(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Date_subtractDays(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date *arg1 = (simdata::Date *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Date_subtractDays",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Date,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->subtractDays(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Date_addMonths(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date *arg1 = (simdata::Date *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Date_addMonths",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Date,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->addMonths(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Date_subtractMonths(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date *arg1 = (simdata::Date *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Date_subtractMonths",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Date,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->subtractMonths(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Date_addYears(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date *arg1 = (simdata::Date *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Date_addYears",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Date,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->addYears(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Date_subtractYears(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date *arg1 = (simdata::Date *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Date_subtractYears",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Date,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->subtractYears(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Date_getDaysInMonth(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date::month_t arg1 ;
    simdata::Date::year_t arg2 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oh:Date_getDaysInMonth",&obj0,&arg2)) goto fail;
    arg1 = (simdata::Date::month_t) PyInt_AsLong(obj0);
    if (PyErr_Occurred()) SWIG_fail;
    result = (int)simdata::Date::getDaysInMonth(arg1,arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Date_getWeeksInYear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date::year_t arg1 ;
    int result;
    
    if(!PyArg_ParseTuple(args,(char *)"h:Date_getWeeksInYear",&arg1)) goto fail;
    result = (int)simdata::Date::getWeeksInYear(arg1);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Date_getSundayWeeksInYear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date::year_t arg1 ;
    int result;
    
    if(!PyArg_ParseTuple(args,(char *)"h:Date_getSundayWeeksInYear",&arg1)) goto fail;
    result = (int)simdata::Date::getSundayWeeksInYear(arg1);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Date_compare(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date *arg1 = 0 ;
    simdata::Date *arg2 = 0 ;
    int result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Date_compare",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Date,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Date,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)simdata::Date::compare((simdata::Date const &)*arg1,(simdata::Date const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Date_convert(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date *arg1 = (simdata::Date *) 0 ;
    tm *arg2 = (tm *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Date_convert",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Date,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_tm,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    ((simdata::Date const *)arg1)->convert(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Date_formatString(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date *arg1 = (simdata::Date *) 0 ;
    char *arg2 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:Date_formatString",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Date,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::Date const *)arg1)->formatString((char const *)arg2);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Date___repr__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date *arg1 = (simdata::Date *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Date___repr__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Date,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::Date const *)arg1)->asString();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Date(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date *arg1 = (simdata::Date *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Date",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Date,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Date_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__Date, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Zulu__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Zulu *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Zulu")) goto fail;
    result = (simdata::Zulu *)new simdata::Zulu();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Zulu, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Zulu__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    int arg2 ;
    simdata::Zulu::time_t arg3 ;
    int arg4 = (int) 0 ;
    simdata::Zulu *result;
    
    if(!PyArg_ParseTuple(args,(char *)"iid|i:new_Zulu",&arg1,&arg2,&arg3,&arg4)) goto fail;
    result = (simdata::Zulu *)new simdata::Zulu(arg1,arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Zulu, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Zulu__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Zulu::time_t arg1 ;
    int arg2 = (int) 0 ;
    simdata::Zulu *result;
    
    if(!PyArg_ParseTuple(args,(char *)"d|i:new_Zulu",&arg1,&arg2)) goto fail;
    result = (simdata::Zulu *)new simdata::Zulu(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Zulu, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Zulu__SWIG_3(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Zulu *arg1 = 0 ;
    simdata::Zulu *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Zulu",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Zulu,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (simdata::Zulu *)new simdata::Zulu((simdata::Zulu const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Zulu, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Zulu(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Zulu__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Zulu, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_Zulu__SWIG_3(self,args);
        }
    }
    if ((argc >= 1) && (argc <= 2)) {
        int _v;
        {
            _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            if (argc <= 1) {
                return _wrap_new_Zulu__SWIG_2(self,args);
            }
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_new_Zulu__SWIG_2(self,args);
            }
        }
    }
    if ((argc >= 3) && (argc <= 4)) {
        int _v;
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_new_Zulu__SWIG_1(self,args);
                    }
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_new_Zulu__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_Zulu'");
    return NULL;
}


static PyObject *_wrap_Zulu_setTZ(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Zulu *arg1 = (simdata::Zulu *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Zulu_setTZ",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Zulu,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setTZ(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Zulu_getTZ(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Zulu *arg1 = (simdata::Zulu *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Zulu_getTZ",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Zulu,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((simdata::Zulu const *)arg1)->getTZ();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Zulu_reduce(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Zulu *arg1 = (simdata::Zulu *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Zulu_reduce",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Zulu,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->reduce();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Zulu_getTime(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Zulu *arg1 = (simdata::Zulu *) 0 ;
    bool arg2 = (bool) false ;
    simdata::Zulu::time_t result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:Zulu_getTime",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Zulu,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = (bool) PyInt_AsLong(obj1);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (simdata::Zulu::time_t)((simdata::Zulu const *)arg1)->getTime(arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Zulu_overflow(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Zulu *arg1 = (simdata::Zulu *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Zulu_overflow",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Zulu,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((simdata::Zulu const *)arg1)->overflow();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Zulu_getHour(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Zulu *arg1 = (simdata::Zulu *) 0 ;
    bool arg2 = (bool) false ;
    int result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:Zulu_getHour",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Zulu,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = (bool) PyInt_AsLong(obj1);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (int)((simdata::Zulu const *)arg1)->getHour(arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Zulu_getMinute(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Zulu *arg1 = (simdata::Zulu *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Zulu_getMinute",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Zulu,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((simdata::Zulu const *)arg1)->getMinute();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Zulu_getSecond(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Zulu *arg1 = (simdata::Zulu *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Zulu_getSecond",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Zulu,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)((simdata::Zulu const *)arg1)->getSecond();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Zulu_addTime(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Zulu *arg1 = (simdata::Zulu *) 0 ;
    simdata::Zulu::time_t arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:Zulu_addTime",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Zulu,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->addTime(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Zulu_setTime(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Zulu *arg1 = (simdata::Zulu *) 0 ;
    simdata::Zulu::time_t arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:Zulu_setTime",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Zulu,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setTime(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Zulu_convert(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Zulu *arg1 = (simdata::Zulu *) 0 ;
    tm *arg2 = (tm *) 0 ;
    bool arg3 = (bool) false ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:Zulu_convert",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Zulu,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_tm,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = (bool) PyInt_AsLong(obj2);
        if (PyErr_Occurred()) SWIG_fail;
    }
    ((simdata::Zulu const *)arg1)->convert(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Zulu_formatString(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Zulu *arg1 = (simdata::Zulu *) 0 ;
    char *arg2 ;
    bool arg3 = (bool) false ;
    std::string result;
    PyObject * obj0  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os|O:Zulu_formatString",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Zulu,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = (bool) PyInt_AsLong(obj2);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = ((simdata::Zulu const *)arg1)->formatString((char const *)arg2,arg3);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Zulu___repr__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Zulu *arg1 = (simdata::Zulu *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Zulu___repr__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Zulu,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::Zulu const *)arg1)->asString();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Zulu(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Zulu *arg1 = (simdata::Zulu *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Zulu",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Zulu,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Zulu_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__Zulu, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_DateZulu__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::DateZulu *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_DateZulu")) goto fail;
    result = (simdata::DateZulu *)new simdata::DateZulu();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__DateZulu, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DateZulu__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date::year_t arg1 ;
    simdata::Date::month_t arg2 ;
    simdata::Date::day_t arg3 ;
    int arg4 ;
    int arg5 ;
    simdata::Zulu::time_t arg6 ;
    simdata::DateZulu *result;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"hOOiid:new_DateZulu",&arg1,&obj1,&obj2,&arg4,&arg5,&arg6)) goto fail;
    arg2 = (simdata::Date::month_t) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (simdata::Date::day_t) PyInt_AsLong(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    result = (simdata::DateZulu *)new simdata::DateZulu(arg1,arg2,arg3,arg4,arg5,arg6);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__DateZulu, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DateZulu__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date::julian_t arg1 ;
    int arg2 ;
    int arg3 ;
    simdata::Zulu::time_t arg4 ;
    simdata::DateZulu *result;
    
    if(!PyArg_ParseTuple(args,(char *)"iiid:new_DateZulu",&arg1,&arg2,&arg3,&arg4)) goto fail;
    result = (simdata::DateZulu *)new simdata::DateZulu(arg1,arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__DateZulu, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DateZulu__SWIG_3(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::DateZulu *arg1 = 0 ;
    simdata::DateZulu *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_DateZulu",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__DateZulu,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (simdata::DateZulu *)new simdata::DateZulu((simdata::DateZulu const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__DateZulu, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_DateZulu(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[7];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 6); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_DateZulu__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__DateZulu, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_DateZulu__SWIG_3(self,args);
        }
    }
    if (argc == 4) {
        int _v;
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_new_DateZulu__SWIG_2(self,args);
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            {
                                _v = (PyFloat_Check(argv[5]) || PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
                            }
                            if (_v) {
                                return _wrap_new_DateZulu__SWIG_1(self,args);
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_DateZulu'");
    return NULL;
}


static PyObject *_wrap_DateZulu_convert(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::DateZulu *arg1 = (simdata::DateZulu *) 0 ;
    tm *arg2 = (tm *) 0 ;
    bool arg3 = (bool) false ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:DateZulu_convert",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__DateZulu,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_tm,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = (bool) PyInt_AsLong(obj2);
        if (PyErr_Occurred()) SWIG_fail;
    }
    ((simdata::DateZulu const *)arg1)->convert(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateZulu_formatString(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::DateZulu *arg1 = (simdata::DateZulu *) 0 ;
    char *arg2 ;
    bool arg3 = (bool) false ;
    std::string result;
    PyObject * obj0  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os|O:DateZulu_formatString",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__DateZulu,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = (bool) PyInt_AsLong(obj2);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = ((simdata::DateZulu const *)arg1)->formatString((char const *)arg2,arg3);
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateZulu___repr__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::DateZulu *arg1 = (simdata::DateZulu *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateZulu___repr__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__DateZulu,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::DateZulu const *)arg1)->asString();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateZulu_addTime(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::DateZulu *arg1 = (simdata::DateZulu *) 0 ;
    simdata::Zulu::time_t arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:DateZulu_addTime",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__DateZulu,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->addTime(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateZulu_setTime(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::DateZulu *arg1 = (simdata::DateZulu *) 0 ;
    simdata::Zulu::time_t arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:DateZulu_setTime",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__DateZulu,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setTime(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateZulu_getJulianDate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::DateZulu *arg1 = (simdata::DateZulu *) 0 ;
    double result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DateZulu_getJulianDate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__DateZulu,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double)((simdata::DateZulu const *)arg1)->getJulianDate();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateZulu_getAccurateMST(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::DateZulu *arg1 = (simdata::DateZulu *) 0 ;
    radian_t arg2 = (radian_t) 0.0L ;
    double result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|d:DateZulu_getAccurateMST",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__DateZulu,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double)((simdata::DateZulu const *)arg1)->getAccurateMST(arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DateZulu_getMST(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::DateZulu *arg1 = (simdata::DateZulu *) 0 ;
    radian_t arg2 = (radian_t) 0.0L ;
    double result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|d:DateZulu_getMST",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__DateZulu,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double)((simdata::DateZulu const *)arg1)->getMST(arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_DateZulu(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::DateZulu *arg1 = (simdata::DateZulu *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_DateZulu",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__DateZulu,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DateZulu_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__DateZulu, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_SimDate__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::SimDate *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_SimDate")) goto fail;
    result = (simdata::SimDate *)new simdata::SimDate();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__SimDate, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SimDate__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date::year_t arg1 ;
    simdata::Date::month_t arg2 ;
    simdata::Date::day_t arg3 ;
    int arg4 ;
    int arg5 ;
    simdata::Zulu::time_t arg6 ;
    simdata::SimDate *result;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"hOOiid:new_SimDate",&arg1,&obj1,&obj2,&arg4,&arg5,&arg6)) goto fail;
    arg2 = (simdata::Date::month_t) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg3 = (simdata::Date::day_t) PyInt_AsLong(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    result = (simdata::SimDate *)new simdata::SimDate(arg1,arg2,arg3,arg4,arg5,arg6);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__SimDate, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SimDate__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Date::julian_t arg1 ;
    int arg2 ;
    int arg3 ;
    simdata::Zulu::time_t arg4 ;
    simdata::SimDate *result;
    
    if(!PyArg_ParseTuple(args,(char *)"iiid:new_SimDate",&arg1,&arg2,&arg3,&arg4)) goto fail;
    result = (simdata::SimDate *)new simdata::SimDate(arg1,arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__SimDate, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SimDate__SWIG_3(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::SimDate *arg1 = 0 ;
    simdata::SimDate *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_SimDate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__SimDate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (simdata::SimDate *)new simdata::SimDate((simdata::SimDate const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__SimDate, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SimDate(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[7];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 6); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_SimDate__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__SimDate, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_SimDate__SWIG_3(self,args);
        }
    }
    if (argc == 4) {
        int _v;
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_new_SimDate__SWIG_2(self,args);
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = (PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            {
                                _v = (PyFloat_Check(argv[5]) || PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
                            }
                            if (_v) {
                                return _wrap_new_SimDate__SWIG_1(self,args);
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_SimDate'");
    return NULL;
}


static PyObject *_wrap_SimDate___repr__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::SimDate *arg1 = (simdata::SimDate *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SimDate___repr__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__SimDate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::SimDate const *)arg1)->asString();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SimDate_interval(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::SimTime arg1 ;
    simdata::SimTime arg2 ;
    simdata::SimTime result;
    
    if(!PyArg_ParseTuple(args,(char *)"dd:SimDate_interval",&arg1,&arg2)) goto fail;
    result = (simdata::SimTime)simdata::SimDate::interval(arg1,arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SimDate_getSystemTime(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::SimTime result;
    
    if(!PyArg_ParseTuple(args,(char *)":SimDate_getSystemTime")) goto fail;
    result = (simdata::SimTime)simdata::SimDate::getSystemTime();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SimDate_update(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::SimDate *arg1 = (simdata::SimDate *) 0 ;
    double result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SimDate_update",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__SimDate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double)(arg1)->update();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SimDate_setReferenceTime(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::SimDate *arg1 = (simdata::SimDate *) 0 ;
    simdata::SimTime arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:SimDate_setReferenceTime",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__SimDate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setReferenceTime(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SimDate_pause(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::SimDate *arg1 = (simdata::SimDate *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SimDate_pause",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__SimDate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->pause();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SimDate_unpause(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::SimDate *arg1 = (simdata::SimDate *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SimDate_unpause",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__SimDate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->unpause();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SimDate_isPaused(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::SimDate *arg1 = (simdata::SimDate *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SimDate_isPaused",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__SimDate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->isPaused();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SimDate_pack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::SimDate *arg1 = (simdata::SimDate *) 0 ;
    simdata::Packer *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SimDate_pack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__SimDate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    ((simdata::SimDate const *)arg1)->pack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SimDate_unpack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::SimDate *arg1 = (simdata::SimDate *) 0 ;
    simdata::UnPacker *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SimDate_unpack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__SimDate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->unpack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SimDate_parseXML(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::SimDate *arg1 = (simdata::SimDate *) 0 ;
    char *arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:SimDate_parseXML",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__SimDate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->parseXML((char const *)arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_SimDate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::SimDate *arg1 = (simdata::SimDate *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_SimDate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__SimDate,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * SimDate_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__SimDate, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Vector3_x_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = (simdata::Vector3 *) 0 ;
    double arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:Vector3_x_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->x = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector3_x_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = (simdata::Vector3 *) 0 ;
    double result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vector3_x_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double) ((arg1)->x);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector3_y_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = (simdata::Vector3 *) 0 ;
    double arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:Vector3_y_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->y = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector3_y_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = (simdata::Vector3 *) 0 ;
    double result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vector3_y_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double) ((arg1)->y);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector3_z_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = (simdata::Vector3 *) 0 ;
    double arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:Vector3_z_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->z = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector3_z_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = (simdata::Vector3 *) 0 ;
    double result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vector3_z_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double) ((arg1)->z);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Vector3__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Vector3")) goto fail;
    result = (simdata::Vector3 *)new simdata::Vector3();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Vector3, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Vector3__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 ;
    double arg3 ;
    simdata::Vector3 *result;
    
    if(!PyArg_ParseTuple(args,(char *)"ddd:new_Vector3",&arg1,&arg2,&arg3)) goto fail;
    result = (simdata::Vector3 *)new simdata::Vector3(arg1,arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Vector3, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Vector3__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = 0 ;
    simdata::Vector3 *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Vector3",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (simdata::Vector3 *)new simdata::Vector3((simdata::Vector3 const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Vector3, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Vector3(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Vector3__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Vector3, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_Vector3__SWIG_2(self,args);
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_new_Vector3__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_Vector3'");
    return NULL;
}


static PyObject *_wrap_Vector3___sub__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = (simdata::Vector3 *) 0 ;
    simdata::Vector3 *arg2 = 0 ;
    simdata::Vector3 result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vector3___sub__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::Vector3 const *)arg1)->operator -((simdata::Vector3 const &)*arg2);
    
    {
        simdata::Vector3 * resultptr;
        resultptr = new simdata::Vector3((simdata::Vector3 &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__Vector3, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector3___add__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = (simdata::Vector3 *) 0 ;
    simdata::Vector3 *arg2 = 0 ;
    simdata::Vector3 result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vector3___add__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::Vector3 const *)arg1)->operator +((simdata::Vector3 const &)*arg2);
    
    {
        simdata::Vector3 * resultptr;
        resultptr = new simdata::Vector3((simdata::Vector3 &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__Vector3, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector3___neg__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = (simdata::Vector3 *) 0 ;
    simdata::Vector3 result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vector3___neg__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::Vector3 const *)arg1)->operator -();
    
    {
        simdata::Vector3 * resultptr;
        resultptr = new simdata::Vector3((simdata::Vector3 &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__Vector3, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector3___mul____SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = (simdata::Vector3 *) 0 ;
    double arg2 ;
    simdata::Vector3 result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:Vector3___mul__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::Vector3 const *)arg1)->operator *(arg2);
    
    {
        simdata::Vector3 * resultptr;
        resultptr = new simdata::Vector3((simdata::Vector3 &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__Vector3, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector3_Set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = (simdata::Vector3 *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oddd:Vector3_Set",&obj0,&arg2,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->Set(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector3_Length(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = (simdata::Vector3 *) 0 ;
    double result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vector3_Length",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double)((simdata::Vector3 const *)arg1)->Length();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector3_LengthSquared(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = (simdata::Vector3 *) 0 ;
    double result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vector3_LengthSquared",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double)((simdata::Vector3 const *)arg1)->LengthSquared();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector3_IsNull(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = (simdata::Vector3 *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vector3_IsNull",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)(arg1)->IsNull();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector3_Normalize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = (simdata::Vector3 *) 0 ;
    simdata::Vector3 *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vector3_Normalize",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        simdata::Vector3 &_result_ref = (arg1)->Normalize();
        result = (simdata::Vector3 *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Vector3, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector3_Unitize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = (simdata::Vector3 *) 0 ;
    double arg2 = (double) 1e-06 ;
    double result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|d:Vector3_Unitize",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double)(arg1)->Unitize(arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector3_Cross(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = (simdata::Vector3 *) 0 ;
    simdata::Vector3 *arg2 = 0 ;
    simdata::Vector3 result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vector3_Cross",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->Cross((simdata::Vector3 const &)*arg2);
    
    {
        simdata::Vector3 * resultptr;
        resultptr = new simdata::Vector3((simdata::Vector3 &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__Vector3, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector3_Dot(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = (simdata::Vector3 *) 0 ;
    simdata::Vector3 *arg2 = 0 ;
    double result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vector3_Dot",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double)(arg1)->Dot((simdata::Vector3 const &)*arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector3_GetElements(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = (simdata::Vector3 *) 0 ;
    SwigValueWrapper< std::vector<double > > result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vector3_GetElements",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->GetElements();
    
    {
        std::vector<double > * resultptr;
        resultptr = new std::vector<double >((std::vector<double > &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_std__vectorTdouble_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector3_StarMatrix(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = (simdata::Vector3 *) 0 ;
    simdata::Matrix3 result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vector3_StarMatrix",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->StarMatrix();
    
    {
        simdata::Matrix3 * resultptr;
        resultptr = new simdata::Matrix3((simdata::Matrix3 &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__Matrix3, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector3_Print(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = (simdata::Vector3 *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vector3_Print",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (!PyFile_Check(obj1)) {
            FILE* fp;
            if ((SWIG_ConvertPtr(obj1,(void **) &fp, SWIGTYPE_p_FILE,SWIG_POINTER_EXCEPTION | 0 )) == -1) {
                PyErr_SetString(PyExc_TypeError, "Need a file!");
                return NULL;
            }
            arg2 = fp;
        }else arg2 = PyFile_AsFile(obj1);
    }
    (arg1)->Print(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_Vector3_ZERO_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable Vector3_ZERO is read-only.");
    return 1;
}


static PyObject *_wrap_Vector3_ZERO_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &simdata::Vector3::ZERO, SWIGTYPE_p_simdata__Vector3, 0);
    return pyobj;
}


static int _wrap_Vector3_XAXIS_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable Vector3_XAXIS is read-only.");
    return 1;
}


static PyObject *_wrap_Vector3_XAXIS_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &simdata::Vector3::XAXIS, SWIGTYPE_p_simdata__Vector3, 0);
    return pyobj;
}


static int _wrap_Vector3_YAXIS_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable Vector3_YAXIS is read-only.");
    return 1;
}


static PyObject *_wrap_Vector3_YAXIS_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &simdata::Vector3::YAXIS, SWIGTYPE_p_simdata__Vector3, 0);
    return pyobj;
}


static int _wrap_Vector3_ZAXIS_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable Vector3_ZAXIS is read-only.");
    return 1;
}


static PyObject *_wrap_Vector3_ZAXIS_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &simdata::Vector3::ZAXIS, SWIGTYPE_p_simdata__Vector3, 0);
    return pyobj;
}


static PyObject *_wrap_Vector3___repr__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = (simdata::Vector3 *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Vector3___repr__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::Vector3 const *)arg1)->asString();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector3___eq__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = (simdata::Vector3 *) 0 ;
    simdata::Vector3 *arg2 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vector3___eq__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)simdata_Vector3_operator_ee___(arg1,(simdata::Vector3 const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector3___ne__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = (simdata::Vector3 *) 0 ;
    simdata::Vector3 *arg2 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vector3___ne__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)simdata_Vector3_operator_Ne___(arg1,(simdata::Vector3 const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector3___mul____SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = (simdata::Vector3 *) 0 ;
    simdata::Vector3 *arg2 = 0 ;
    double result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vector3___mul__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double)simdata_Vector3_operator_m_____SWIG_1(arg1,(simdata::Vector3 const &)*arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector3___mul__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Vector3, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__Vector3, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_Vector3___mul____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Vector3, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Vector3___mul____SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'Vector3___mul__'");
    return NULL;
}


static PyObject *_wrap_Vector3_pack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = (simdata::Vector3 *) 0 ;
    simdata::Packer *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vector3_pack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    ((simdata::Vector3 const *)arg1)->pack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector3_unpack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = (simdata::Vector3 *) 0 ;
    simdata::UnPacker *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Vector3_unpack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->unpack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Vector3_parseXML(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = (simdata::Vector3 *) 0 ;
    char *arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:Vector3_parseXML",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->parseXML((char const *)arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Vector3(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = (simdata::Vector3 *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Vector3",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Vector3_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__Vector3, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_External(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::External *arg1 = (simdata::External *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_External",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__External,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_External_setSource(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::External *arg1 = (simdata::External *) 0 ;
    char *arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:External_setSource",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__External,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setSource((char const *)arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_External_getSource(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::External *arg1 = (simdata::External *) 0 ;
    std::string *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:External_getSource",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__External,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        std::string const &_result_ref = ((simdata::External const *)arg1)->getSource();
        result = (std::string *) &_result_ref;
    }
    
    {
        resultobj = PyString_FromString(result->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_External_pack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::External *arg1 = (simdata::External *) 0 ;
    simdata::Packer *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:External_pack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__External,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    ((simdata::External const *)arg1)->pack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_External_unpack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::External *arg1 = (simdata::External *) 0 ;
    simdata::UnPacker *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:External_unpack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__External,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->unpack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_External___repr__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::External *arg1 = (simdata::External *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:External___repr__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__External,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::External const *)arg1)->asString();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_External(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::External *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_External")) goto fail;
    result = (simdata::External *)new simdata::External();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__External, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * External_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__External, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Spread(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    float arg1 = (float) 0.0 ;
    float arg2 = (float) 0.0 ;
    simdata::Spread *result;
    
    if(!PyArg_ParseTuple(args,(char *)"|ff:new_Spread",&arg1,&arg2)) goto fail;
    result = (simdata::Spread *)new simdata::Spread(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Spread, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Spread_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Spread *arg1 = (simdata::Spread *) 0 ;
    float arg2 ;
    float arg3 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Off:Spread_set",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Spread,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->set(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Spread_regen(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Spread *arg1 = (simdata::Spread *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Spread_regen",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Spread,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->regen();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Spread_getMean(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Spread *arg1 = (simdata::Spread *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Spread_getMean",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Spread,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)(arg1)->getMean();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Spread_getSigma(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Spread *arg1 = (simdata::Spread *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Spread_getSigma",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Spread,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)(arg1)->getSigma();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Spread_getValue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Spread *arg1 = (simdata::Spread *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Spread_getValue",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Spread,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)(arg1)->getValue();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Spread___repr__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Spread *arg1 = (simdata::Spread *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Spread___repr__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Spread,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::Spread const *)arg1)->asString();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Spread___neg__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Spread *arg1 = (simdata::Spread *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Spread___neg__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Spread,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)(arg1)->__neg__();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Spread___pos__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Spread *arg1 = (simdata::Spread *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Spread___pos__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Spread,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)(arg1)->__pos__();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Spread___abs__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Spread *arg1 = (simdata::Spread *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Spread___abs__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Spread,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)(arg1)->__abs__();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Spread___nonzero__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Spread *arg1 = (simdata::Spread *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Spread___nonzero__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Spread,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->__nonzero__();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Spread___float__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Spread *arg1 = (simdata::Spread *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Spread___float__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Spread,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)(arg1)->__float__();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Spread___int__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Spread *arg1 = (simdata::Spread *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Spread___int__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Spread,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->__int__();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Spread___long__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Spread *arg1 = (simdata::Spread *) 0 ;
    long result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Spread___long__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Spread,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (long)(arg1)->__long__();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Spread___add__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Spread *arg1 = (simdata::Spread *) 0 ;
    float arg2 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:Spread___add__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Spread,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)(arg1)->__add__(arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Spread___radd__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Spread *arg1 = (simdata::Spread *) 0 ;
    float arg2 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:Spread___radd__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Spread,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)(arg1)->__radd__(arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Spread___sub__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Spread *arg1 = (simdata::Spread *) 0 ;
    float arg2 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:Spread___sub__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Spread,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)(arg1)->__sub__(arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Spread___rsub__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Spread *arg1 = (simdata::Spread *) 0 ;
    float arg2 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:Spread___rsub__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Spread,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)(arg1)->__rsub__(arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Spread___mul__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Spread *arg1 = (simdata::Spread *) 0 ;
    float arg2 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:Spread___mul__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Spread,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)(arg1)->__mul__(arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Spread___rmul__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Spread *arg1 = (simdata::Spread *) 0 ;
    float arg2 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:Spread___rmul__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Spread,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)(arg1)->__rmul__(arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Spread___div__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Spread *arg1 = (simdata::Spread *) 0 ;
    float arg2 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:Spread___div__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Spread,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)(arg1)->__div__(arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Spread___rdiv__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Spread *arg1 = (simdata::Spread *) 0 ;
    float arg2 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:Spread___rdiv__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Spread,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)(arg1)->__rdiv__(arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Spread___rpow__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Spread *arg1 = (simdata::Spread *) 0 ;
    float arg2 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:Spread___rpow__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Spread,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)(arg1)->__rpow__(arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Spread___pow__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Spread *arg1 = (simdata::Spread *) 0 ;
    float arg2 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:Spread___pow__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Spread,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)(arg1)->__pow__(arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Spread_pack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Spread *arg1 = (simdata::Spread *) 0 ;
    simdata::Packer *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Spread_pack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Spread,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    ((simdata::Spread const *)arg1)->pack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Spread_unpack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Spread *arg1 = (simdata::Spread *) 0 ;
    simdata::UnPacker *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Spread_unpack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Spread,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->unpack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Spread_parseXML(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Spread *arg1 = (simdata::Spread *) 0 ;
    char *arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:Spread_parseXML",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Spread,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->parseXML((char const *)arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Spread(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Spread *arg1 = (simdata::Spread *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Spread",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Spread,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Spread_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__Spread, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_swig_string_bug_workaround(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::string arg1 ;
    swig_string_bug_workaround *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_swig_string_bug_workaround",&obj0)) goto fail;
    {
        if (PyString_Check(obj0))
        arg1 = std::string(PyString_AsString(obj0));
        else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    result = (swig_string_bug_workaround *)new swig_string_bug_workaround(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_swig_string_bug_workaround, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_swig_string_bug_workaround_get_as_swig_wrapped_pointer_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    swig_string_bug_workaround *arg1 = (swig_string_bug_workaround *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:swig_string_bug_workaround_get_as_swig_wrapped_pointer_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_swig_string_bug_workaround,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->get_as_swig_wrapped_pointer = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_swig_string_bug_workaround_get_as_swig_wrapped_pointer_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    swig_string_bug_workaround *arg1 = (swig_string_bug_workaround *) 0 ;
    std::string *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:swig_string_bug_workaround_get_as_swig_wrapped_pointer_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_swig_string_bug_workaround,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (std::string *)& ((arg1)->get_as_swig_wrapped_pointer);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_swig_string_bug_workaround(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    swig_string_bug_workaround *arg1 = (swig_string_bug_workaround *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_swig_string_bug_workaround",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_swig_string_bug_workaround,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * swig_string_bug_workaround_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_swig_string_bug_workaround, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_vEnum__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 = (unsigned int) 0 ;
    std::vector<simdata::Enum > *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_vEnum",&obj0)) goto fail;
    if (obj0) {
        arg1 = (unsigned int) PyInt_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (std::vector<simdata::Enum > *)new std::vector<simdata::Enum >(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTsimdata__Enum_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vEnum__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    simdata::Enum *arg2 = 0 ;
    std::vector<simdata::Enum > *result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_vEnum",&obj0,&obj1)) goto fail;
    arg1 = (unsigned int) PyInt_AsLong(obj0);
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (std::vector<simdata::Enum > *)new std::vector<simdata::Enum >(arg1,(simdata::Enum const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTsimdata__Enum_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vEnum__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Enum > *arg1 = 0 ;
    std::vector<simdata::Enum > *result;
    std::vector<simdata::Enum > temp1 ;
    std::vector<simdata::Enum > *v1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vEnum",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<simdata::Enum >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                simdata::Enum* x;
                PyObject* o = PySequence_GetItem(obj0,i);
                if ((SWIG_ConvertPtr(o,(void **) &x, 
                SWIGTYPE_p_simdata__Enum,0)) != -1) {
                    temp1[i] = *x;
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""simdata::Enum""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTsimdata__Enum_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<" "simdata::Enum" "> expected");
            SWIG_fail;
        }
    }
    result = (std::vector<simdata::Enum > *)new std::vector<simdata::Enum >((std::vector<simdata::Enum > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTsimdata__Enum_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vEnum(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 0) && (argc <= 1)) {
        int _v;
        if (argc <= 0) {
            return _wrap_new_vEnum__SWIG_0(self,args);
        }
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_vEnum__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            /* native sequence? */
            if (PyTuple_Check(argv[0]) || PyList_Check(argv[0])) {
                unsigned int size = (PyTuple_Check(argv[0]) ?
                PyTuple_Size(argv[0]) :
                PyList_Size(argv[0]));
                if (size == 0) {
                    /* an empty sequence can be of any type */
                    _v = 1;
                }else {
                    /* check the first element only */
                    simdata::Enum* x;
                    PyObject* o = PySequence_GetItem(argv[0],0);
                    if ((SWIG_ConvertPtr(o,(void **) &x, 
                    SWIGTYPE_p_simdata__Enum,0)) != -1)
                    _v = 1;
                    else
                    _v = 0;
                }
            }else {
                /* wrapped vector? */
                std::vector<simdata::Enum >* v;
                if (SWIG_ConvertPtr(argv[0],(void **) &v, 
                SWIGTYPE_p_std__vectorTsimdata__Enum_t,0) != -1)
                _v = 1;
                else
                _v = 0;
            }
        }
        if (_v) {
            return _wrap_new_vEnum__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__Enum, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_new_vEnum__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_vEnum'");
    return NULL;
}


static PyObject *_wrap_vEnum___len__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Enum > *arg1 = (std::vector<simdata::Enum > *) 0 ;
    unsigned int result;
    std::vector<simdata::Enum > temp1 ;
    std::vector<simdata::Enum > *v1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vEnum___len__",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<simdata::Enum >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                simdata::Enum* x;
                PyObject* o = PySequence_GetItem(obj0,i);
                if ((SWIG_ConvertPtr(o,(void **) &x, 
                SWIGTYPE_p_simdata__Enum,0)) != -1) {
                    temp1[i] = *x;
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""simdata::Enum""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTsimdata__Enum_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<" "simdata::Enum" "> expected");
            SWIG_fail;
        }
    }
    result = (unsigned int)((std::vector<simdata::Enum > const *)arg1)->size();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vEnum_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Enum > *arg1 = (std::vector<simdata::Enum > *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vEnum_clear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Enum_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vEnum_append(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Enum > *arg1 = (std::vector<simdata::Enum > *) 0 ;
    simdata::Enum *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vEnum_append",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Enum_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->push_back((simdata::Enum const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vEnum___nonzero__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Enum > *arg1 = (std::vector<simdata::Enum > *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vEnum___nonzero__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Enum_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)std_vectorlsimdata_Enum_g___nonzero_____(arg1);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vEnum_pop(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Enum > *arg1 = (std::vector<simdata::Enum > *) 0 ;
    simdata::Enum result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vEnum_pop",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Enum_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = std_vectorlsimdata_Enum_g_pop___(arg1);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    {
        simdata::Enum * resultptr;
        resultptr = new simdata::Enum((simdata::Enum &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__Enum, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vEnum___getitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Enum > *arg1 = (std::vector<simdata::Enum > *) 0 ;
    int arg2 ;
    simdata::Enum *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:vEnum___getitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Enum_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            {
                simdata::Enum &_result_ref = std_vectorlsimdata_Enum_g___getitem_____(arg1,arg2);
                result = (simdata::Enum *) &_result_ref;
            }
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Enum, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vEnum___getslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Enum > *arg1 = (std::vector<simdata::Enum > *) 0 ;
    int arg2 ;
    int arg3 ;
    SwigValueWrapper< std::vector<simdata::Enum > > result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:vEnum___getslice__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Enum_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = std_vectorlsimdata_Enum_g___getslice_____(arg1,arg2,arg3);
    
    {
        resultobj = PyTuple_New((&result)->size());
        for (unsigned int i=0; i<(&result)->size(); i++) {
            simdata::Enum* ptr = new simdata::Enum(((std::vector<simdata::Enum > &)result)[i]);
            PyTuple_SetItem(resultobj,i,
            SWIG_NewPointerObj((void *) ptr, 
            SWIGTYPE_p_simdata__Enum, 1));
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vEnum___setitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Enum > *arg1 = (std::vector<simdata::Enum > *) 0 ;
    int arg2 ;
    simdata::Enum *arg3 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiO:vEnum___setitem__",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Enum_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            std_vectorlsimdata_Enum_g___setitem_____(arg1,arg2,(simdata::Enum const &)*arg3);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vEnum___setslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Enum > *arg1 = (std::vector<simdata::Enum > *) 0 ;
    int arg2 ;
    int arg3 ;
    std::vector<simdata::Enum > *arg4 = 0 ;
    std::vector<simdata::Enum > temp4 ;
    std::vector<simdata::Enum > *v4 ;
    PyObject * obj0  = 0 ;
    PyObject * obj3  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiiO:vEnum___setslice__",&obj0,&arg2,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Enum_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyTuple_Check(obj3) || PyList_Check(obj3)) {
            unsigned int size = (PyTuple_Check(obj3) ?
            PyTuple_Size(obj3) :
            PyList_Size(obj3));
            temp4 = std::vector<simdata::Enum >(size);
            arg4 = &temp4;
            for (unsigned int i=0; i<size; i++) {
                simdata::Enum* x;
                PyObject* o = PySequence_GetItem(obj3,i);
                if ((SWIG_ConvertPtr(o,(void **) &x, 
                SWIGTYPE_p_simdata__Enum,0)) != -1) {
                    temp4[i] = *x;
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""simdata::Enum""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj3,(void **) &v4, 
        SWIGTYPE_p_std__vectorTsimdata__Enum_t,1) != -1){
            arg4 = v4;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<" "simdata::Enum" "> expected");
            SWIG_fail;
        }
    }
    std_vectorlsimdata_Enum_g___setslice_____(arg1,arg2,arg3,(std::vector<simdata::Enum > const &)*arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vEnum___delitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Enum > *arg1 = (std::vector<simdata::Enum > *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:vEnum___delitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Enum_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            std_vectorlsimdata_Enum_g___delitem_____(arg1,arg2);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vEnum___delslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Enum > *arg1 = (std::vector<simdata::Enum > *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:vEnum___delslice__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Enum_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    std_vectorlsimdata_Enum_g___delslice_____(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_vEnum(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Enum > *arg1 = (std::vector<simdata::Enum > *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_vEnum",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Enum_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * vEnum_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTsimdata__Enum_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_vString__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 = (unsigned int) 0 ;
    std::vector<std::string > *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_vString",&obj0)) goto fail;
    if (obj0) {
        arg1 = (unsigned int) PyInt_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (std::vector<std::string > *)new std::vector<std::string >(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTstd__string_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vString__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    std::string *arg2 = 0 ;
    std::vector<std::string > *result;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_vString",&obj0,&obj1)) goto fail;
    arg1 = (unsigned int) PyInt_AsLong(obj0);
    if (PyErr_Occurred()) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    result = (std::vector<std::string > *)new std::vector<std::string >(arg1,(std::string const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTstd__string_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vString__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = 0 ;
    std::vector<std::string > *result;
    std::vector<std::string > temp1 ;
    std::vector<std::string > *v1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vString",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<std::string >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj0,i);
                if (PyString_Check(o)) {
                    temp1[i] = (std::string)(\
                    SwigString_AsString(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""std::string""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTstd__string_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""std::string" "> expected");
            SWIG_fail;
        }
    }
    result = (std::vector<std::string > *)new std::vector<std::string >((std::vector<std::string > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTstd__string_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vString(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 0) && (argc <= 1)) {
        int _v;
        if (argc <= 0) {
            return _wrap_new_vString__SWIG_0(self,args);
        }
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_vString__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            /* native sequence? */
            if (PyTuple_Check(argv[0]) || PyList_Check(argv[0])) {
                unsigned int size = (PyTuple_Check(argv[0]) ?
                PyTuple_Size(argv[0]) :
                PyList_Size(argv[0]));
                if (size == 0) {
                    /* an empty sequence can be of any type */
                    _v = 1;
                }else {
                    /* check the first element only */
                    PyObject* o = PySequence_GetItem(argv[0],0);
                    if (PyString_Check(o))
                    _v = 1;
                    else
                    _v = 0;
                }
            }else {
                /* wrapped vector? */
                std::vector<std::string >* v;
                if (SWIG_ConvertPtr(argv[0],(void **) &v, 
                SWIGTYPE_p_std__vectorTstd__string_t,0) != -1)
                _v = 1;
                else
                _v = 0;
            }
        }
        if (_v) {
            return _wrap_new_vString__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_new_vString__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_vString'");
    return NULL;
}


static PyObject *_wrap_vString___len__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    unsigned int result;
    std::vector<std::string > temp1 ;
    std::vector<std::string > *v1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vString___len__",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<std::string >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj0,i);
                if (PyString_Check(o)) {
                    temp1[i] = (std::string)(\
                    SwigString_AsString(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""std::string""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTstd__string_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""std::string" "> expected");
            SWIG_fail;
        }
    }
    result = (unsigned int)((std::vector<std::string > const *)arg1)->size();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vString___nonzero__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    bool result;
    std::vector<std::string > temp1 ;
    std::vector<std::string > *v1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vString___nonzero__",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<std::string >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj0,i);
                if (PyString_Check(o)) {
                    temp1[i] = (std::string)(\
                    SwigString_AsString(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""std::string""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTstd__string_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""std::string" "> expected");
            SWIG_fail;
        }
    }
    result = (bool)((std::vector<std::string > const *)arg1)->empty();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vString_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vString_clear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vString_append(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::string arg2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vString_append",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1))
        arg2 = std::string(PyString_AsString(obj1));
        else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    (arg1)->push_back(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vString_pop(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vString_pop",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = std_vectorlstd_string_g_pop___(arg1);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vString___getitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    int arg2 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:vString___getitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = std_vectorlstd_string_g___getitem_____(arg1,arg2);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vString___getslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    int arg2 ;
    int arg3 ;
    SwigValueWrapper< std::vector<std::string > > result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:vString___getslice__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = std_vectorlstd_string_g___getslice_____(arg1,arg2,arg3);
    
    {
        resultobj = PyTuple_New((&result)->size());
        for (unsigned int i=0; i<(&result)->size(); i++)
        PyTuple_SetItem(resultobj,i,
        SwigString_FromString(((std::vector<std::string > &)result)[i]));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vString___setitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    int arg2 ;
    std::string arg3 ;
    PyObject * obj0  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiO:vString___setitem__",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj2))
        arg3 = std::string(PyString_AsString(obj2));
        else
        SWIG_exception(SWIG_TypeError, "string expected");
    }
    {
        try {
            std_vectorlstd_string_g___setitem_____(arg1,arg2,arg3);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vString___setslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    int arg2 ;
    int arg3 ;
    std::vector<std::string > *arg4 = 0 ;
    std::vector<std::string > temp4 ;
    std::vector<std::string > *v4 ;
    PyObject * obj0  = 0 ;
    PyObject * obj3  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiiO:vString___setslice__",&obj0,&arg2,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyTuple_Check(obj3) || PyList_Check(obj3)) {
            unsigned int size = (PyTuple_Check(obj3) ?
            PyTuple_Size(obj3) :
            PyList_Size(obj3));
            temp4 = std::vector<std::string >(size);
            arg4 = &temp4;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj3,i);
                if (PyString_Check(o)) {
                    temp4[i] = (std::string)(\
                    SwigString_AsString(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""std::string""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj3,(void **) &v4, 
        SWIGTYPE_p_std__vectorTstd__string_t,1) != -1){
            arg4 = v4;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""std::string" "> expected");
            SWIG_fail;
        }
    }
    std_vectorlstd_string_g___setslice_____(arg1,arg2,arg3,(std::vector<std::string > const &)*arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vString___delitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:vString___delitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            std_vectorlstd_string_g___delitem_____(arg1,arg2);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vString___delslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:vString___delslice__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    std_vectorlstd_string_g___delslice_____(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_vString(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_vString",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTstd__string_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * vString_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTstd__string_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_EnumError(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::string arg1 = (std::string) (std::string)"" ;
    simdata::EnumError *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_EnumError",&obj0)) goto fail;
    if (obj0) {
        {
            if (PyString_Check(obj0))
            arg1 = std::string(PyString_AsString(obj0));
            else
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        try {
            result = (simdata::EnumError *)new simdata::EnumError(arg1);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__EnumError, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EnumError_disarm(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::EnumError *arg1 = (simdata::EnumError *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EnumError_disarm",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__EnumError,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->disarm();
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_EnumError(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::EnumError *arg1 = (simdata::EnumError *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_EnumError",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__EnumError,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EnumError_getError(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::EnumError *arg1 = (simdata::EnumError *) 0 ;
    std::string *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:EnumError_getError",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__EnumError,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            {
                std::string const &_result_ref = (arg1)->getError();
                result = (std::string *) &_result_ref;
            }
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    {
        resultobj = PyString_FromString(result->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * EnumError_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__EnumError, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_EnumIndexError(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::string arg1 = (std::string) (std::string)"" ;
    simdata::EnumIndexError *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_EnumIndexError",&obj0)) goto fail;
    if (obj0) {
        {
            if (PyString_Check(obj0))
            arg1 = std::string(PyString_AsString(obj0));
            else
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        try {
            result = (simdata::EnumIndexError *)new simdata::EnumIndexError(arg1);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__EnumIndexError, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_EnumIndexError(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::EnumIndexError *arg1 = (simdata::EnumIndexError *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_EnumIndexError",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__EnumIndexError,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * EnumIndexError_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__EnumIndexError, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_EnumTypeError(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::string arg1 = (std::string) (std::string)"" ;
    simdata::EnumTypeError *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_EnumTypeError",&obj0)) goto fail;
    if (obj0) {
        {
            if (PyString_Check(obj0))
            arg1 = std::string(PyString_AsString(obj0));
            else
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        try {
            result = (simdata::EnumTypeError *)new simdata::EnumTypeError(arg1);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__EnumTypeError, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_EnumTypeError(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::EnumTypeError *arg1 = (simdata::EnumTypeError *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_EnumTypeError",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__EnumTypeError,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * EnumTypeError_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__EnumTypeError, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Enum__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enum *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Enum")) goto fail;
    {
        try {
            result = (simdata::Enum *)new simdata::Enum();
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Enum, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Enum__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enumeration *arg1 = 0 ;
    int arg2 = (int) 0 ;
    simdata::Enum *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|i:new_Enum",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enumeration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (simdata::Enum *)new simdata::Enum((simdata::Enumeration const &)*arg1,arg2);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Enum, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Enum__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enumeration *arg1 = 0 ;
    std::string *arg2 = 0 ;
    simdata::Enum *result;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_Enum",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enumeration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        try {
            result = (simdata::Enum *)new simdata::Enum((simdata::Enumeration const &)*arg1,(std::string const &)*arg2);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Enum, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Enum(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Enum__SWIG_0(self,args);
    }
    if ((argc >= 1) && (argc <= 2)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Enumeration, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            if (argc <= 1) {
                return _wrap_new_Enum__SWIG_1(self,args);
            }
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_new_Enum__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Enumeration, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_new_Enum__SWIG_2(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_Enum'");
    return NULL;
}


static PyObject *_wrap_delete_Enum(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enum *arg1 = (simdata::Enum *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Enum",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enum_asInt(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enum *arg1 = (simdata::Enum *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Enum_asInt",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (int)((simdata::Enum const *)arg1)->asInt();
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enum___repr____SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enum *arg1 = (simdata::Enum *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Enum___repr__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = ((simdata::Enum const *)arg1)->asString();
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enum_cycle(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enum *arg1 = (simdata::Enum *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Enum_cycle",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->cycle();
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enum_cycleBack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enum *arg1 = (simdata::Enum *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Enum_cycleBack",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->cycleBack();
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enum_pack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enum *arg1 = (simdata::Enum *) 0 ;
    simdata::Packer *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Enum_pack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            ((simdata::Enum const *)arg1)->pack(*arg2);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enum_unpack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enum *arg1 = (simdata::Enum *) 0 ;
    simdata::UnPacker *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Enum_unpack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->unpack(*arg2);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enum_parseXML(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enum *arg1 = (simdata::Enum *) 0 ;
    char *arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:Enum_parseXML",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->parseXML((char const *)arg2);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enum___repr____SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enum *arg1 = (simdata::Enum *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Enum___repr__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (arg1)->__repr__();
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enum___repr__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Enum, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Enum___repr____SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Enum, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_Enum___repr____SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'Enum___repr__'");
    return NULL;
}


static PyObject *_wrap_Enum___eq____SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enum *arg1 = (simdata::Enum *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Enum___eq__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        try {
            result = (bool)(arg1)->__eq__((std::string const &)*arg2);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enum___ne____SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enum *arg1 = (simdata::Enum *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Enum___ne__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        try {
            result = (bool)(arg1)->__ne__((std::string const &)*arg2);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enum___le____SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enum *arg1 = (simdata::Enum *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Enum___le__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        try {
            result = (bool)(arg1)->__le__((std::string const &)*arg2);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enum___ge____SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enum *arg1 = (simdata::Enum *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Enum___ge__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        try {
            result = (bool)(arg1)->__ge__((std::string const &)*arg2);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enum___lt____SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enum *arg1 = (simdata::Enum *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Enum___lt__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        try {
            result = (bool)(arg1)->__lt__((std::string const &)*arg2);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enum___gt____SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enum *arg1 = (simdata::Enum *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Enum___gt__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        try {
            result = (bool)(arg1)->__gt__((std::string const &)*arg2);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enum___eq____SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enum *arg1 = (simdata::Enum *) 0 ;
    simdata::Enum *arg2 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Enum___eq__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (bool)(arg1)->__eq__((simdata::Enum const &)*arg2);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enum___eq__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Enum, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__Enum, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_Enum___eq____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Enum, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Enum___eq____SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'Enum___eq__'");
    return NULL;
}


static PyObject *_wrap_Enum___ne____SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enum *arg1 = (simdata::Enum *) 0 ;
    simdata::Enum *arg2 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Enum___ne__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (bool)(arg1)->__ne__((simdata::Enum const &)*arg2);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enum___ne__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Enum, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__Enum, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_Enum___ne____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Enum, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Enum___ne____SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'Enum___ne__'");
    return NULL;
}


static PyObject *_wrap_Enum___le____SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enum *arg1 = (simdata::Enum *) 0 ;
    simdata::Enum *arg2 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Enum___le__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (bool)(arg1)->__le__((simdata::Enum const &)*arg2);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enum___le__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Enum, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__Enum, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_Enum___le____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Enum, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Enum___le____SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'Enum___le__'");
    return NULL;
}


static PyObject *_wrap_Enum___ge____SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enum *arg1 = (simdata::Enum *) 0 ;
    simdata::Enum *arg2 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Enum___ge__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (bool)(arg1)->__ge__((simdata::Enum const &)*arg2);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enum___ge__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Enum, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__Enum, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_Enum___ge____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Enum, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Enum___ge____SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'Enum___ge__'");
    return NULL;
}


static PyObject *_wrap_Enum___lt____SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enum *arg1 = (simdata::Enum *) 0 ;
    simdata::Enum *arg2 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Enum___lt__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (bool)(arg1)->__lt__((simdata::Enum const &)*arg2);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enum___lt__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Enum, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__Enum, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_Enum___lt____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Enum, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Enum___lt____SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'Enum___lt__'");
    return NULL;
}


static PyObject *_wrap_Enum___gt____SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enum *arg1 = (simdata::Enum *) 0 ;
    simdata::Enum *arg2 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Enum___gt__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (bool)(arg1)->__gt__((simdata::Enum const &)*arg2);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enum___gt__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Enum, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__Enum, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_Enum___gt____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Enum, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Enum___gt____SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'Enum___gt__'");
    return NULL;
}


static PyObject *_wrap_Enum_fromString(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enum *arg1 = (simdata::Enum *) 0 ;
    std::string *arg2 = 0 ;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Enum_fromString",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        try {
            (arg1)->fromString((std::string const &)*arg2);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enum_fromEnum(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enum *arg1 = (simdata::Enum *) 0 ;
    simdata::Enum *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Enum_fromEnum",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->fromEnum((simdata::Enum const &)*arg2);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enum___copy__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enum *arg1 = (simdata::Enum *) 0 ;
    simdata::Enum result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Enum___copy__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (arg1)->__copy__();
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    {
        simdata::Enum * resultptr;
        resultptr = new simdata::Enum((simdata::Enum &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__Enum, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Enum_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__Enum, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Enumeration(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    simdata::Enumeration *result;
    
    if(!PyArg_ParseTuple(args,(char *)"s:new_Enumeration",&arg1)) goto fail;
    {
        try {
            result = (simdata::Enumeration *)new simdata::Enumeration((char const *)arg1);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Enumeration, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enumeration_each(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enumeration *arg1 = (simdata::Enumeration *) 0 ;
    std::vector<simdata::Enum > result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Enumeration_each",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enumeration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = ((simdata::Enumeration const *)arg1)->each();
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    {
        resultobj = PyTuple_New((&result)->size());
        for (unsigned int i=0; i<(&result)->size(); i++) {
            simdata::Enum* ptr = new simdata::Enum(((std::vector<simdata::Enum > const &)result)[i]);
            PyTuple_SetItem(resultobj,i,
            SWIG_NewPointerObj((void *) ptr, 
            SWIGTYPE_p_simdata__Enum, 1));
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enumeration_eachString(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enumeration *arg1 = (simdata::Enumeration *) 0 ;
    std::vector<std::string > result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Enumeration_eachString",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enumeration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = ((simdata::Enumeration const *)arg1)->eachString();
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    {
        resultobj = PyTuple_New((&result)->size());
        for (unsigned int i=0; i<(&result)->size(); i++)
        PyTuple_SetItem(resultobj,i,
        SwigString_FromString(((std::vector<std::string > const &)result)[i]));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enumeration_getLabels(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enumeration *arg1 = (simdata::Enumeration *) 0 ;
    std::vector<std::string > result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Enumeration_getLabels",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enumeration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = ((simdata::Enumeration const *)arg1)->getLabels();
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    {
        resultobj = PyTuple_New((&result)->size());
        for (unsigned int i=0; i<(&result)->size(); i++)
        PyTuple_SetItem(resultobj,i,
        SwigString_FromString(((std::vector<std::string > const &)result)[i]));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enumeration_size(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enumeration *arg1 = (simdata::Enumeration *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Enumeration_size",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enumeration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (int)((simdata::Enumeration const *)arg1)->size();
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enumeration__getID(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enumeration *arg1 = (simdata::Enumeration *) 0 ;
    std::string *arg2 = 0 ;
    int result;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Enumeration__getID",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enumeration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        try {
            result = (int)((simdata::Enumeration const *)arg1)->_getID((std::string const &)*arg2);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enumeration__getName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enumeration *arg1 = (simdata::Enumeration *) 0 ;
    int arg2 ;
    std::string *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Enumeration__getName",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enumeration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            {
                std::string const &_result_ref = ((simdata::Enumeration const *)arg1)->_getName(arg2);
                result = (std::string *) &_result_ref;
            }
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    {
        resultobj = PyString_FromString(result->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enumeration_irange(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enumeration *arg1 = (simdata::Enumeration *) 0 ;
    simdata::Enum *arg2 = 0 ;
    simdata::Enum *arg3 = 0 ;
    std::vector<simdata::Enum > result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Enumeration_irange",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enumeration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = ((simdata::Enumeration const *)arg1)->irange((simdata::Enum const &)*arg2,(simdata::Enum const &)*arg3);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    {
        resultobj = PyTuple_New((&result)->size());
        for (unsigned int i=0; i<(&result)->size(); i++) {
            simdata::Enum* ptr = new simdata::Enum(((std::vector<simdata::Enum > const &)result)[i]);
            PyTuple_SetItem(resultobj,i,
            SWIG_NewPointerObj((void *) ptr, 
            SWIGTYPE_p_simdata__Enum, 1));
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enumeration_contains__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enumeration *arg1 = (simdata::Enumeration *) 0 ;
    simdata::Enum *arg2 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Enumeration_contains",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enumeration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (bool)((simdata::Enumeration const *)arg1)->contains((simdata::Enum const &)*arg2);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enumeration_contains__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enumeration *arg1 = (simdata::Enumeration *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Enumeration_contains",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enumeration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (bool)((simdata::Enumeration const *)arg1)->contains(arg2);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enumeration_contains__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enumeration *arg1 = (simdata::Enumeration *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Enumeration_contains",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enumeration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        try {
            result = (bool)((simdata::Enumeration const *)arg1)->contains((std::string const &)*arg2);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enumeration_contains(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Enumeration, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__Enum, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_Enumeration_contains__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Enumeration, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Enumeration_contains__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Enumeration, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Enumeration_contains__SWIG_2(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'Enumeration_contains'");
    return NULL;
}


static PyObject *_wrap_Enumeration___getslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enumeration *arg1 = (simdata::Enumeration *) 0 ;
    int arg2 ;
    int arg3 ;
    std::vector<simdata::Enum > result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:Enumeration___getslice__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enumeration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = ((simdata::Enumeration const *)arg1)->__getslice__(arg2,arg3);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    {
        resultobj = PyTuple_New((&result)->size());
        for (unsigned int i=0; i<(&result)->size(); i++) {
            simdata::Enum* ptr = new simdata::Enum(((std::vector<simdata::Enum > const &)result)[i]);
            PyTuple_SetItem(resultobj,i,
            SWIG_NewPointerObj((void *) ptr, 
            SWIGTYPE_p_simdata__Enum, 1));
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enumeration___len__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enumeration *arg1 = (simdata::Enumeration *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Enumeration___len__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enumeration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (int)((simdata::Enumeration const *)arg1)->__len__();
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enumeration___contains____SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enumeration *arg1 = (simdata::Enumeration *) 0 ;
    simdata::Enum *arg2 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Enumeration___contains__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enumeration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (bool)((simdata::Enumeration const *)arg1)->__contains__((simdata::Enum const &)*arg2);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enumeration___contains____SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enumeration *arg1 = (simdata::Enumeration *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Enumeration___contains__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enumeration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (bool)((simdata::Enumeration const *)arg1)->__contains__(arg2);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enumeration___contains____SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enumeration *arg1 = (simdata::Enumeration *) 0 ;
    std::string *arg2 = 0 ;
    bool result;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Enumeration___contains__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enumeration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        try {
            result = (bool)((simdata::Enumeration const *)arg1)->__contains__((std::string const &)*arg2);
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enumeration___contains__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Enumeration, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__Enum, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_Enumeration___contains____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Enumeration, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Enumeration___contains____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Enumeration, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Enumeration___contains____SWIG_2(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'Enumeration___contains__'");
    return NULL;
}


static PyObject *_wrap_Enumeration___getitem____SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enumeration *arg1 = (simdata::Enumeration *) 0 ;
    int arg2 ;
    simdata::Enum *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Enumeration___getitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enumeration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            {
                simdata::Enum const &_result_ref = ((simdata::Enumeration const *)arg1)->__getitem__(arg2);
                result = (simdata::Enum *) &_result_ref;
            }
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Enum, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enumeration___getitem____SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enumeration *arg1 = (simdata::Enumeration *) 0 ;
    std::string *arg2 = 0 ;
    simdata::Enum *result;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Enumeration___getitem__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enumeration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        try {
            {
                simdata::Enum const &_result_ref = ((simdata::Enumeration const *)arg1)->__getitem__((std::string const &)*arg2);
                result = (simdata::Enum *) &_result_ref;
            }
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Enum, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enumeration___getitem__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Enumeration, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Enumeration___getitem____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Enumeration, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Enumeration___getitem____SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'Enumeration___getitem__'");
    return NULL;
}


static PyObject *_wrap_Enumeration___getattr_c__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enumeration *arg1 = (simdata::Enumeration *) 0 ;
    std::string *arg2 = 0 ;
    simdata::Enum *result;
    std::string temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Enumeration___getattr_c__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enumeration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyString_Check(obj1)) {
            temp2 = std::string(PyString_AsString(obj1));
            arg2 = &temp2;
        }else {
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        try {
            {
                simdata::Enum const &_result_ref = ((simdata::Enumeration const *)arg1)->__getattr_c__((std::string const &)*arg2);
                result = (simdata::Enum *) &_result_ref;
            }
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Enum, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Enumeration___repr__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enumeration *arg1 = (simdata::Enumeration *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Enumeration___repr__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enumeration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = ((simdata::Enumeration const *)arg1)->asString();
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Enumeration(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Enumeration *arg1 = (simdata::Enumeration *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Enumeration",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Enumeration,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
        }
        catch (simdata::EnumTypeError& e) {
            SWIG_exception(SWIG_TypeError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumIndexError& e) {
            SWIG_exception(SWIG_IndexError, const_cast<char*>(e.getError().c_str())); 	
        }
        catch (simdata::EnumError& e) {
            SWIG_exception(SWIG_RuntimeError, const_cast<char*>(e.getError().c_str())); 	
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Enumeration_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__Enumeration, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_vector_t__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 = (unsigned int) 0 ;
    std::vector<float > *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_vector_t",&obj0)) goto fail;
    if (obj0) {
        arg1 = (unsigned int) PyInt_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (std::vector<float > *)new std::vector<float >(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTfloat_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_t__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    float *arg2 = 0 ;
    std::vector<float > *result;
    float temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_vector_t",&obj0,&obj1)) goto fail;
    arg1 = (unsigned int) PyInt_AsLong(obj0);
    if (PyErr_Occurred()) SWIG_fail;
    temp2 = (float) PyFloat_AsDouble(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = &temp2;
    result = (std::vector<float > *)new std::vector<float >(arg1,(float const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTfloat_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_t__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<float > *arg1 = 0 ;
    std::vector<float > *result;
    std::vector<float > temp1 ;
    std::vector<float > *v1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vector_t",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<float >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj0,i);
                if (SwigNumber_Check(o)) {
                    temp1[i] = (float)(\
                    SwigNumber_AsDouble(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""float""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTfloat_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""float" "> expected");
            SWIG_fail;
        }
    }
    result = (std::vector<float > *)new std::vector<float >((std::vector<float > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTfloat_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vector_t(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 0) && (argc <= 1)) {
        int _v;
        if (argc <= 0) {
            return _wrap_new_vector_t__SWIG_0(self,args);
        }
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_vector_t__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            /* native sequence? */
            if (PyTuple_Check(argv[0]) || PyList_Check(argv[0])) {
                unsigned int size = (PyTuple_Check(argv[0]) ?
                PyTuple_Size(argv[0]) :
                PyList_Size(argv[0]));
                if (size == 0) {
                    /* an empty sequence can be of any type */
                    _v = 1;
                }else {
                    /* check the first element only */
                    PyObject* o = PySequence_GetItem(argv[0],0);
                    if (SwigNumber_Check(o))
                    _v = 1;
                    else
                    _v = 0;
                }
            }else {
                /* wrapped vector? */
                std::vector<float >* v;
                if (SWIG_ConvertPtr(argv[0],(void **) &v, 
                SWIGTYPE_p_std__vectorTfloat_t,0) != -1)
                _v = 1;
                else
                _v = 0;
            }
        }
        if (_v) {
            return _wrap_new_vector_t__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_new_vector_t__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_vector_t'");
    return NULL;
}


static PyObject *_wrap_vector_t___len__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    unsigned int result;
    std::vector<float > temp1 ;
    std::vector<float > *v1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_t___len__",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<float >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj0,i);
                if (SwigNumber_Check(o)) {
                    temp1[i] = (float)(\
                    SwigNumber_AsDouble(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""float""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTfloat_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""float" "> expected");
            SWIG_fail;
        }
    }
    result = (unsigned int)((std::vector<float > const *)arg1)->size();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_t___nonzero__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    bool result;
    std::vector<float > temp1 ;
    std::vector<float > *v1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_t___nonzero__",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<float >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj0,i);
                if (SwigNumber_Check(o)) {
                    temp1[i] = (float)(\
                    SwigNumber_AsDouble(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""float""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTfloat_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""float" "> expected");
            SWIG_fail;
        }
    }
    result = (bool)((std::vector<float > const *)arg1)->empty();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_t_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_t_clear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTfloat_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_t_append(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    float arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:vector_t_append",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTfloat_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->push_back(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_t_pop(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vector_t_pop",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTfloat_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (float)std_vectorlfloat_g_pop___(arg1);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_t___getitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    int arg2 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:vector_t___getitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTfloat_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (float)std_vectorlfloat_g___getitem_____(arg1,arg2);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_t___getslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    int arg2 ;
    int arg3 ;
    SwigValueWrapper< std::vector<float > > result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:vector_t___getslice__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTfloat_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = std_vectorlfloat_g___getslice_____(arg1,arg2,arg3);
    
    {
        resultobj = PyTuple_New((&result)->size());
        for (unsigned int i=0; i<(&result)->size(); i++)
        PyTuple_SetItem(resultobj,i,
        PyFloat_FromDouble(((std::vector<float > &)result)[i]));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_t___setitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    int arg2 ;
    float arg3 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oif:vector_t___setitem__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTfloat_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            std_vectorlfloat_g___setitem_____(arg1,arg2,arg3);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_t___setslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    int arg2 ;
    int arg3 ;
    std::vector<float > *arg4 = 0 ;
    std::vector<float > temp4 ;
    std::vector<float > *v4 ;
    PyObject * obj0  = 0 ;
    PyObject * obj3  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiiO:vector_t___setslice__",&obj0,&arg2,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTfloat_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyTuple_Check(obj3) || PyList_Check(obj3)) {
            unsigned int size = (PyTuple_Check(obj3) ?
            PyTuple_Size(obj3) :
            PyList_Size(obj3));
            temp4 = std::vector<float >(size);
            arg4 = &temp4;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj3,i);
                if (SwigNumber_Check(o)) {
                    temp4[i] = (float)(\
                    SwigNumber_AsDouble(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""float""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj3,(void **) &v4, 
        SWIGTYPE_p_std__vectorTfloat_t,1) != -1){
            arg4 = v4;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""float" "> expected");
            SWIG_fail;
        }
    }
    std_vectorlfloat_g___setslice_____(arg1,arg2,arg3,(std::vector<float > const &)*arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_t___delitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:vector_t___delitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTfloat_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            std_vectorlfloat_g___delitem_____(arg1,arg2);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vector_t___delslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:vector_t___delslice__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTfloat_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    std_vectorlfloat_g___delslice_____(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_vector_t(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<float > *arg1 = (std::vector<float > *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_vector_t",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTfloat_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * vector_t_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTfloat_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_InterpolatedData_Method_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable InterpolatedData_Method is read-only.");
    return 1;
}


static PyObject *_wrap_InterpolatedData_Method_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &simdata::InterpolatedData::Method, SWIGTYPE_p_simdata__Enumeration, 0);
    return pyobj;
}


static PyObject *_wrap_InterpolatedData_method_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterpolatedData *arg1 = (simdata::InterpolatedData *) 0 ;
    simdata::Enum *arg2 = (simdata::Enum *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:InterpolatedData_method_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterpolatedData,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Enum,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->method = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InterpolatedData_method_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterpolatedData *arg1 = (simdata::InterpolatedData *) 0 ;
    simdata::Enum *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:InterpolatedData_method_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterpolatedData,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (simdata::Enum *)& ((arg1)->method);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Enum, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_InterpolatedData(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterpolatedData *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_InterpolatedData")) goto fail;
    result = (simdata::InterpolatedData *)new simdata::InterpolatedData();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__InterpolatedData, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_InterpolatedData(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterpolatedData *arg1 = (simdata::InterpolatedData *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_InterpolatedData",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterpolatedData,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InterpolatedData_pack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterpolatedData *arg1 = (simdata::InterpolatedData *) 0 ;
    simdata::Packer *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:InterpolatedData_pack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterpolatedData,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    ((simdata::InterpolatedData const *)arg1)->pack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InterpolatedData_unpack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterpolatedData *arg1 = (simdata::InterpolatedData *) 0 ;
    simdata::UnPacker *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:InterpolatedData_unpack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterpolatedData,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->unpack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InterpolatedData_getValue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterpolatedData *arg1 = (simdata::InterpolatedData *) 0 ;
    float arg2 ;
    float arg3 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Off:InterpolatedData_getValue",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterpolatedData,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)((simdata::InterpolatedData const *)arg1)->getValue(arg2,arg3);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InterpolatedData_getPrecise(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterpolatedData *arg1 = (simdata::InterpolatedData *) 0 ;
    float arg2 ;
    float arg3 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Off:InterpolatedData_getPrecise",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterpolatedData,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)((simdata::InterpolatedData const *)arg1)->getPrecise(arg2,arg3);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InterpolatedData_compute_second_derivatives(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterpolatedData *arg1 = (simdata::InterpolatedData *) 0 ;
    std::vector<float > *arg2 = 0 ;
    std::vector<float > *arg3 = 0 ;
    SwigValueWrapper< std::vector<float > > result;
    std::vector<float > temp2 ;
    std::vector<float > *v2 ;
    std::vector<float > temp3 ;
    std::vector<float > *v3 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:InterpolatedData_compute_second_derivatives",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterpolatedData,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyTuple_Check(obj1) || PyList_Check(obj1)) {
            unsigned int size = (PyTuple_Check(obj1) ?
            PyTuple_Size(obj1) :
            PyList_Size(obj1));
            temp2 = std::vector<float >(size);
            arg2 = &temp2;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj1,i);
                if (SwigNumber_Check(o)) {
                    temp2[i] = (float)(\
                    SwigNumber_AsDouble(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""float""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj1,(void **) &v2, 
        SWIGTYPE_p_std__vectorTfloat_t,1) != -1){
            arg2 = v2;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""float" "> expected");
            SWIG_fail;
        }
    }
    {
        if (PyTuple_Check(obj2) || PyList_Check(obj2)) {
            unsigned int size = (PyTuple_Check(obj2) ?
            PyTuple_Size(obj2) :
            PyList_Size(obj2));
            temp3 = std::vector<float >(size);
            arg3 = &temp3;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj2,i);
                if (SwigNumber_Check(o)) {
                    temp3[i] = (float)(\
                    SwigNumber_AsDouble(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""float""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj2,(void **) &v3, 
        SWIGTYPE_p_std__vectorTfloat_t,1) != -1){
            arg3 = v3;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""float" "> expected");
            SWIG_fail;
        }
    }
    result = (arg1)->compute_second_derivatives((std::vector<float > const &)*arg2,(std::vector<float > const &)*arg3);
    
    {
        resultobj = PyTuple_New((&result)->size());
        for (unsigned int i=0; i<(&result)->size(); i++)
        PyTuple_SetItem(resultobj,i,
        PyFloat_FromDouble(((std::vector<float > &)result)[i]));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InterpolatedData_find(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterpolatedData *arg1 = (simdata::InterpolatedData *) 0 ;
    SwigValueWrapper< std::vector<float > > arg2 ;
    float arg3 ;
    int result;
    std::vector<float > *v2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOf:InterpolatedData_find",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterpolatedData,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyTuple_Check(obj1) || PyList_Check(obj1)) {
            unsigned int size = (PyTuple_Check(obj1) ?
            PyTuple_Size(obj1) :
            PyList_Size(obj1));
            arg2 = std::vector<float >(size);
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj1,i);
                if (SwigNumber_Check(o)) {
                    ((std::vector<float > &)arg2)[i] = (float)(\
                    SwigNumber_AsDouble(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""float""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj1,(void **) &v2, 
        SWIGTYPE_p_std__vectorTfloat_t,1) != -1){
            arg2 = *v2;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""float" "> expected");
            SWIG_fail;
        }
    }
    result = (int)(arg1)->find(arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * InterpolatedData_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__InterpolatedData, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Curve__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Curve *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Curve")) goto fail;
    result = (simdata::Curve *)new simdata::Curve();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Curve, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Curve__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Curve *arg1 = 0 ;
    simdata::Curve *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Curve",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Curve,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (simdata::Curve *)new simdata::Curve((simdata::Curve const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Curve, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Curve(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Curve__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Curve, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_Curve__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_Curve'");
    return NULL;
}


static PyObject *_wrap_delete_Curve(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Curve *arg1 = (simdata::Curve *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Curve",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Curve,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Curve_pack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Curve *arg1 = (simdata::Curve *) 0 ;
    simdata::Packer *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Curve_pack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Curve,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    ((simdata::Curve const *)arg1)->pack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Curve_unpack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Curve *arg1 = (simdata::Curve *) 0 ;
    simdata::UnPacker *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Curve_unpack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Curve,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->unpack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Curve_getBreaks(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Curve *arg1 = (simdata::Curve *) 0 ;
    SwigValueWrapper< std::vector<float > > result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Curve_getBreaks",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Curve,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (arg1)->getBreaks();
    
    {
        resultobj = PyTuple_New((&result)->size());
        for (unsigned int i=0; i<(&result)->size(); i++)
        PyTuple_SetItem(resultobj,i,
        PyFloat_FromDouble(((std::vector<float > &)result)[i]));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Curve_setBreaks(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Curve *arg1 = (simdata::Curve *) 0 ;
    std::vector<float > *arg2 = 0 ;
    std::vector<float > temp2 ;
    std::vector<float > *v2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Curve_setBreaks",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Curve,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyTuple_Check(obj1) || PyList_Check(obj1)) {
            unsigned int size = (PyTuple_Check(obj1) ?
            PyTuple_Size(obj1) :
            PyList_Size(obj1));
            temp2 = std::vector<float >(size);
            arg2 = &temp2;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj1,i);
                if (SwigNumber_Check(o)) {
                    temp2[i] = (float)(\
                    SwigNumber_AsDouble(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""float""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj1,(void **) &v2, 
        SWIGTYPE_p_std__vectorTfloat_t,1) != -1){
            arg2 = v2;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""float" "> expected");
            SWIG_fail;
        }
    }
    (arg1)->setBreaks((std::vector<float > const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Curve_setData(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Curve *arg1 = (simdata::Curve *) 0 ;
    std::vector<float > *arg2 = 0 ;
    std::vector<float > temp2 ;
    std::vector<float > *v2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Curve_setData",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Curve,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyTuple_Check(obj1) || PyList_Check(obj1)) {
            unsigned int size = (PyTuple_Check(obj1) ?
            PyTuple_Size(obj1) :
            PyList_Size(obj1));
            temp2 = std::vector<float >(size);
            arg2 = &temp2;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj1,i);
                if (SwigNumber_Check(o)) {
                    temp2[i] = (float)(\
                    SwigNumber_AsDouble(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""float""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj1,(void **) &v2, 
        SWIGTYPE_p_std__vectorTfloat_t,1) != -1){
            arg2 = v2;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""float" "> expected");
            SWIG_fail;
        }
    }
    (arg1)->setData((std::vector<float > const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Curve_interpolate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Curve *arg1 = (simdata::Curve *) 0 ;
    float arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:Curve_interpolate",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Curve,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->interpolate(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Curve__compute_second_derivatives(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Curve *arg1 = (simdata::Curve *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Curve__compute_second_derivatives",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Curve,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->_compute_second_derivatives();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Curve_getPrecise(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Curve *arg1 = (simdata::Curve *) 0 ;
    float arg2 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:Curve_getPrecise",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Curve,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)(arg1)->getPrecise(arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Curve_getValue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Curve *arg1 = (simdata::Curve *) 0 ;
    float arg2 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:Curve_getValue",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Curve,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)(arg1)->getValue(arg2);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Curve_dumpCurve(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Curve *arg1 = (simdata::Curve *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Curve_dumpCurve",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Curve,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (!PyFile_Check(obj1)) {
            FILE* fp;
            if ((SWIG_ConvertPtr(obj1,(void **) &fp, SWIGTYPE_p_FILE,SWIG_POINTER_EXCEPTION | 0 )) == -1) {
                PyErr_SetString(PyExc_TypeError, "Need a file!");
                return NULL;
            }
            arg2 = fp;
        }else arg2 = PyFile_AsFile(obj1);
    }
    (arg1)->dumpCurve(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Curve___repr__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Curve *arg1 = (simdata::Curve *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Curve___repr__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Curve,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::Curve const *)arg1)->asString();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Curve_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__Curve, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Table__x_label_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Table__x_label_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->_x_label = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__x_label_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    std::string *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table__x_label_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (std::string *)& ((arg1)->_x_label);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__y_label_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Table__y_label_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->_y_label = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__y_label_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    std::string *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table__y_label_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (std::string *)& ((arg1)->_y_label);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__x_breaks_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    std::vector<float > *arg2 = (std::vector<float > *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Table__x_breaks_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__vectorTfloat_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->_x_breaks = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__x_breaks_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    std::vector<float > *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table__x_breaks_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (std::vector<float > *)& ((arg1)->_x_breaks);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTfloat_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__y_breaks_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    std::vector<float > *arg2 = (std::vector<float > *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Table__y_breaks_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__vectorTfloat_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->_y_breaks = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__y_breaks_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    std::vector<float > *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table__y_breaks_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (std::vector<float > *)& ((arg1)->_y_breaks);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTfloat_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__data_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    std::vector<float > *arg2 = (std::vector<float > *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Table__data_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__vectorTfloat_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->_data = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__data_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    std::vector<float > *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table__data_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (std::vector<float > *)& ((arg1)->_data);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTfloat_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__table_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    std::vector<float > *arg2 = (std::vector<float > *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Table__table_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__vectorTfloat_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->_table = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__table_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    std::vector<float > *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table__table_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (std::vector<float > *)& ((arg1)->_table);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTfloat_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__dcols_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    std::vector<float > *arg2 = (std::vector<float > *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Table__dcols_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__vectorTfloat_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->_dcols = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__dcols_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    std::vector<float > *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table__dcols_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (std::vector<float > *)& ((arg1)->_dcols);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTfloat_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__drows_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    std::vector<float > *arg2 = (std::vector<float > *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Table__drows_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__vectorTfloat_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->_drows = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__drows_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    std::vector<float > *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table__drows_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (std::vector<float > *)& ((arg1)->_drows);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTfloat_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__x_spacing_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    float arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:Table__x_spacing_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->_x_spacing = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__x_spacing_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table__x_spacing_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float) ((arg1)->_x_spacing);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__y_spacing_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    float arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:Table__y_spacing_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->_y_spacing = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__y_spacing_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table__y_spacing_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float) ((arg1)->_y_spacing);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__x_min_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    float arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:Table__x_min_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->_x_min = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__x_min_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table__x_min_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float) ((arg1)->_x_min);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__y_min_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    float arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:Table__y_min_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->_y_min = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__y_min_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table__y_min_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float) ((arg1)->_y_min);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__x_range_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    float arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:Table__x_range_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->_x_range = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__x_range_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table__x_range_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float) ((arg1)->_x_range);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__y_range_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    float arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:Table__y_range_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->_y_range = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__y_range_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table__y_range_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float) ((arg1)->_y_range);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__x_in_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Table__x_in_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->_x_in = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__x_in_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table__x_in_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int) ((arg1)->_x_in);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__y_in_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Table__y_in_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->_y_in = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__y_in_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table__y_in_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int) ((arg1)->_y_in);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__x_n_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Table__x_n_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->_x_n = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__x_n_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table__x_n_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int) ((arg1)->_x_n);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__y_n_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Table__y_n_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->_y_n = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__y_n_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table__y_n_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int) ((arg1)->_y_n);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__valid_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Table__valid_set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->_valid = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__valid_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table__valid_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int) ((arg1)->_valid);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Table__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Table")) goto fail;
    result = (simdata::Table *)new simdata::Table();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Table, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Table__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = 0 ;
    simdata::Table *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Table",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (simdata::Table *)new simdata::Table((simdata::Table const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Table, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Table(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Table__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Table, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_Table__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_Table'");
    return NULL;
}


static PyObject *_wrap_delete_Table(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Table",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_invalidate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table_invalidate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->invalidate();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_isValid(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table_isValid",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (int)(arg1)->isValid();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_pack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    simdata::Packer *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Table_pack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    ((simdata::Table const *)arg1)->pack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_unpack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    simdata::UnPacker *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Table_unpack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->unpack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_getXBreaks(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    SwigValueWrapper< std::vector<float > > result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table_getXBreaks",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::Table const *)arg1)->getXBreaks();
    
    {
        resultobj = PyTuple_New((&result)->size());
        for (unsigned int i=0; i<(&result)->size(); i++)
        PyTuple_SetItem(resultobj,i,
        PyFloat_FromDouble(((std::vector<float > &)result)[i]));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_getYBreaks(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    SwigValueWrapper< std::vector<float > > result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table_getYBreaks",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::Table const *)arg1)->getYBreaks();
    
    {
        resultobj = PyTuple_New((&result)->size());
        for (unsigned int i=0; i<(&result)->size(); i++)
        PyTuple_SetItem(resultobj,i,
        PyFloat_FromDouble(((std::vector<float > &)result)[i]));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_setXBreaks(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    std::vector<float > *arg2 = 0 ;
    std::vector<float > temp2 ;
    std::vector<float > *v2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Table_setXBreaks",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyTuple_Check(obj1) || PyList_Check(obj1)) {
            unsigned int size = (PyTuple_Check(obj1) ?
            PyTuple_Size(obj1) :
            PyList_Size(obj1));
            temp2 = std::vector<float >(size);
            arg2 = &temp2;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj1,i);
                if (SwigNumber_Check(o)) {
                    temp2[i] = (float)(\
                    SwigNumber_AsDouble(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""float""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj1,(void **) &v2, 
        SWIGTYPE_p_std__vectorTfloat_t,1) != -1){
            arg2 = v2;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""float" "> expected");
            SWIG_fail;
        }
    }
    (arg1)->setXBreaks((std::vector<float > const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_setYBreaks(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    std::vector<float > *arg2 = 0 ;
    std::vector<float > temp2 ;
    std::vector<float > *v2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Table_setYBreaks",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyTuple_Check(obj1) || PyList_Check(obj1)) {
            unsigned int size = (PyTuple_Check(obj1) ?
            PyTuple_Size(obj1) :
            PyList_Size(obj1));
            temp2 = std::vector<float >(size);
            arg2 = &temp2;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj1,i);
                if (SwigNumber_Check(o)) {
                    temp2[i] = (float)(\
                    SwigNumber_AsDouble(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""float""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj1,(void **) &v2, 
        SWIGTYPE_p_std__vectorTfloat_t,1) != -1){
            arg2 = v2;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""float" "> expected");
            SWIG_fail;
        }
    }
    (arg1)->setYBreaks((std::vector<float > const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_setBreaks(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    std::vector<float > *arg2 = 0 ;
    std::vector<float > *arg3 = 0 ;
    std::vector<float > temp2 ;
    std::vector<float > *v2 ;
    std::vector<float > temp3 ;
    std::vector<float > *v3 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Table_setBreaks",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyTuple_Check(obj1) || PyList_Check(obj1)) {
            unsigned int size = (PyTuple_Check(obj1) ?
            PyTuple_Size(obj1) :
            PyList_Size(obj1));
            temp2 = std::vector<float >(size);
            arg2 = &temp2;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj1,i);
                if (SwigNumber_Check(o)) {
                    temp2[i] = (float)(\
                    SwigNumber_AsDouble(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""float""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj1,(void **) &v2, 
        SWIGTYPE_p_std__vectorTfloat_t,1) != -1){
            arg2 = v2;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""float" "> expected");
            SWIG_fail;
        }
    }
    {
        if (PyTuple_Check(obj2) || PyList_Check(obj2)) {
            unsigned int size = (PyTuple_Check(obj2) ?
            PyTuple_Size(obj2) :
            PyList_Size(obj2));
            temp3 = std::vector<float >(size);
            arg3 = &temp3;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj2,i);
                if (SwigNumber_Check(o)) {
                    temp3[i] = (float)(\
                    SwigNumber_AsDouble(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""float""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj2,(void **) &v3, 
        SWIGTYPE_p_std__vectorTfloat_t,1) != -1){
            arg3 = v3;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""float" "> expected");
            SWIG_fail;
        }
    }
    (arg1)->setBreaks((std::vector<float > const &)*arg2,(std::vector<float > const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_setXSpacing(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    float arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:Table_setXSpacing",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setXSpacing(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_setYSpacing(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    float arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Of:Table_setYSpacing",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setYSpacing(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_setSpacing(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    float arg2 ;
    float arg3 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Off:Table_setSpacing",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->setSpacing(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_getXSpacing(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table_getXSpacing",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)((simdata::Table const *)arg1)->getXSpacing();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_getYSpacing(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table_getYSpacing",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)((simdata::Table const *)arg1)->getYSpacing();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_setData(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    std::vector<float > *arg2 = 0 ;
    std::vector<float > temp2 ;
    std::vector<float > *v2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Table_setData",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyTuple_Check(obj1) || PyList_Check(obj1)) {
            unsigned int size = (PyTuple_Check(obj1) ?
            PyTuple_Size(obj1) :
            PyList_Size(obj1));
            temp2 = std::vector<float >(size);
            arg2 = &temp2;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj1,i);
                if (SwigNumber_Check(o)) {
                    temp2[i] = (float)(\
                    SwigNumber_AsDouble(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""float""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj1,(void **) &v2, 
        SWIGTYPE_p_std__vectorTfloat_t,1) != -1){
            arg2 = v2;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""float" "> expected");
            SWIG_fail;
        }
    }
    (arg1)->setData((std::vector<float > const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_interpolate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table_interpolate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->interpolate();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_getPrecise(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    float arg2 ;
    float arg3 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Off:Table_getPrecise",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)(arg1)->getPrecise(arg2,arg3);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_getValue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    float arg2 ;
    float arg3 ;
    float result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Off:Table_getValue",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (float)(arg1)->getValue(arg2,arg3);
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table__compute_second_derivatives(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table__compute_second_derivatives",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->_compute_second_derivatives();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_toPGM(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Table_toPGM",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (!PyFile_Check(obj1)) {
            FILE* fp;
            if ((SWIG_ConvertPtr(obj1,(void **) &fp, SWIGTYPE_p_FILE,SWIG_POINTER_EXCEPTION | 0 )) == -1) {
                PyErr_SetString(PyExc_TypeError, "Need a file!");
                return NULL;
            }
            arg2 = fp;
        }else arg2 = PyFile_AsFile(obj1);
    }
    (arg1)->toPGM(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_dumpTable(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Table_dumpTable",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (!PyFile_Check(obj1)) {
            FILE* fp;
            if ((SWIG_ConvertPtr(obj1,(void **) &fp, SWIGTYPE_p_FILE,SWIG_POINTER_EXCEPTION | 0 )) == -1) {
                PyErr_SetString(PyExc_TypeError, "Need a file!");
                return NULL;
            }
            arg2 = fp;
        }else arg2 = PyFile_AsFile(obj1);
    }
    (arg1)->dumpTable(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_dumpDRows(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Table_dumpDRows",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (!PyFile_Check(obj1)) {
            FILE* fp;
            if ((SWIG_ConvertPtr(obj1,(void **) &fp, SWIGTYPE_p_FILE,SWIG_POINTER_EXCEPTION | 0 )) == -1) {
                PyErr_SetString(PyExc_TypeError, "Need a file!");
                return NULL;
            }
            arg2 = fp;
        }else arg2 = PyFile_AsFile(obj1);
    }
    (arg1)->dumpDRows(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table_dumpDCols(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Table_dumpDCols",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (!PyFile_Check(obj1)) {
            FILE* fp;
            if ((SWIG_ConvertPtr(obj1,(void **) &fp, SWIGTYPE_p_FILE,SWIG_POINTER_EXCEPTION | 0 )) == -1) {
                PyErr_SetString(PyExc_TypeError, "Need a file!");
                return NULL;
            }
            arg2 = fp;
        }else arg2 = PyFile_AsFile(obj1);
    }
    (arg1)->dumpDCols(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Table___repr__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Table *arg1 = (simdata::Table *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Table___repr__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::Table const *)arg1)->asString();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Table_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__Table, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_ListBase(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::ListBase *arg1 = (simdata::ListBase *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ListBase",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ListBase,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ListBase(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::ListBase *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ListBase")) goto fail;
    result = (simdata::ListBase *)new simdata::ListBase();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__ListBase, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ListBase_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__ListBase, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_vInt__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 = (unsigned int) 0 ;
    std::vector<int > *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_vInt",&obj0)) goto fail;
    if (obj0) {
        arg1 = (unsigned int) PyInt_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (std::vector<int > *)new std::vector<int >(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTint_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vInt__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    int *arg2 = 0 ;
    std::vector<int > *result;
    int temp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_vInt",&obj0,&obj1)) goto fail;
    arg1 = (unsigned int) PyInt_AsLong(obj0);
    if (PyErr_Occurred()) SWIG_fail;
    temp2 = (int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = &temp2;
    result = (std::vector<int > *)new std::vector<int >(arg1,(int const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTint_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vInt__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<int > *arg1 = 0 ;
    std::vector<int > *result;
    std::vector<int > temp1 ;
    std::vector<int > *v1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vInt",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<int >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj0,i);
                if (PyInt_Check(o)) {
                    temp1[i] = (int)(PyInt_AsLong(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""int""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTint_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""int" "> expected");
            SWIG_fail;
        }
    }
    result = (std::vector<int > *)new std::vector<int >((std::vector<int > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTint_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vInt(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 0) && (argc <= 1)) {
        int _v;
        if (argc <= 0) {
            return _wrap_new_vInt__SWIG_0(self,args);
        }
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_vInt__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            /* native sequence? */
            if (PyTuple_Check(argv[0]) || PyList_Check(argv[0])) {
                unsigned int size = (PyTuple_Check(argv[0]) ?
                PyTuple_Size(argv[0]) :
                PyList_Size(argv[0]));
                if (size == 0) {
                    /* an empty sequence can be of any type */
                    _v = 1;
                }else {
                    /* check the first element only */
                    PyObject* o = PySequence_GetItem(argv[0],0);
                    if (PyInt_Check(o))
                    _v = 1;
                    else
                    _v = 0;
                }
            }else {
                /* wrapped vector? */
                std::vector<int >* v;
                if (SWIG_ConvertPtr(argv[0],(void **) &v, 
                SWIGTYPE_p_std__vectorTint_t,0) != -1)
                _v = 1;
                else
                _v = 0;
            }
        }
        if (_v) {
            return _wrap_new_vInt__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_new_vInt__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_vInt'");
    return NULL;
}


static PyObject *_wrap_vInt___len__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    unsigned int result;
    std::vector<int > temp1 ;
    std::vector<int > *v1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vInt___len__",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<int >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj0,i);
                if (PyInt_Check(o)) {
                    temp1[i] = (int)(PyInt_AsLong(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""int""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTint_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""int" "> expected");
            SWIG_fail;
        }
    }
    result = (unsigned int)((std::vector<int > const *)arg1)->size();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vInt___nonzero__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    bool result;
    std::vector<int > temp1 ;
    std::vector<int > *v1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vInt___nonzero__",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<int >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj0,i);
                if (PyInt_Check(o)) {
                    temp1[i] = (int)(PyInt_AsLong(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""int""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTint_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""int" "> expected");
            SWIG_fail;
        }
    }
    result = (bool)((std::vector<int > const *)arg1)->empty();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vInt_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vInt_clear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTint_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vInt_append(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:vInt_append",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTint_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->push_back(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vInt_pop(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vInt_pop",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTint_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (int)std_vectorlint_g_pop___(arg1);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vInt___getitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    int arg2 ;
    int result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:vInt___getitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTint_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (int)std_vectorlint_g___getitem_____(arg1,arg2);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vInt___getslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    int arg2 ;
    int arg3 ;
    SwigValueWrapper< std::vector<int > > result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:vInt___getslice__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTint_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = std_vectorlint_g___getslice_____(arg1,arg2,arg3);
    
    {
        resultobj = PyTuple_New((&result)->size());
        for (unsigned int i=0; i<(&result)->size(); i++)
        PyTuple_SetItem(resultobj,i,
        PyInt_FromLong(((std::vector<int > &)result)[i]));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vInt___setitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:vInt___setitem__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTint_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            std_vectorlint_g___setitem_____(arg1,arg2,arg3);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vInt___setslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    int arg2 ;
    int arg3 ;
    std::vector<int > *arg4 = 0 ;
    std::vector<int > temp4 ;
    std::vector<int > *v4 ;
    PyObject * obj0  = 0 ;
    PyObject * obj3  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiiO:vInt___setslice__",&obj0,&arg2,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTint_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyTuple_Check(obj3) || PyList_Check(obj3)) {
            unsigned int size = (PyTuple_Check(obj3) ?
            PyTuple_Size(obj3) :
            PyList_Size(obj3));
            temp4 = std::vector<int >(size);
            arg4 = &temp4;
            for (unsigned int i=0; i<size; i++) {
                PyObject* o = PySequence_GetItem(obj3,i);
                if (PyInt_Check(o)) {
                    temp4[i] = (int)(PyInt_AsLong(o));
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""int""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj3,(void **) &v4, 
        SWIGTYPE_p_std__vectorTint_t,1) != -1){
            arg4 = v4;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<""int" "> expected");
            SWIG_fail;
        }
    }
    std_vectorlint_g___setslice_____(arg1,arg2,arg3,(std::vector<int > const &)*arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vInt___delitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:vInt___delitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTint_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            std_vectorlint_g___delitem_____(arg1,arg2);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vInt___delslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:vInt___delslice__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTint_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    std_vectorlint_g___delslice_____(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_vInt(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<int > *arg1 = (std::vector<int > *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_vInt",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTint_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * vInt_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTint_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_lInt(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<int > *arg1 = (simdata::List<int > *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_lInt",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ListTint_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lInt_extend(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<int > *arg1 = (simdata::List<int > *) 0 ;
    int *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:lInt_extend",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ListTint_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        int &_result_ref = (arg1)->extend();
        result = (int *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_int, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lInt_pack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<int > *arg1 = (simdata::List<int > *) 0 ;
    simdata::Packer *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:lInt_pack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ListTint_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    ((simdata::List<int > const *)arg1)->pack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lInt_unpack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<int > *arg1 = (simdata::List<int > *) 0 ;
    simdata::UnPacker *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:lInt_unpack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ListTint_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->unpack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lInt___repr__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<int > *arg1 = (simdata::List<int > *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:lInt___repr__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ListTint_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::List<int > const *)arg1)->asString();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_lInt(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<int > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_lInt")) goto fail;
    result = (simdata::List<int > *)new simdata::List<int >();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__ListTint_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * lInt_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__ListTint_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_vSpread__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 = (unsigned int) 0 ;
    std::vector<simdata::Spread > *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_vSpread",&obj0)) goto fail;
    if (obj0) {
        arg1 = (unsigned int) PyInt_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (std::vector<simdata::Spread > *)new std::vector<simdata::Spread >(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTsimdata__Spread_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vSpread__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    simdata::Spread *arg2 = 0 ;
    std::vector<simdata::Spread > *result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_vSpread",&obj0,&obj1)) goto fail;
    arg1 = (unsigned int) PyInt_AsLong(obj0);
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Spread,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (std::vector<simdata::Spread > *)new std::vector<simdata::Spread >(arg1,(simdata::Spread const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTsimdata__Spread_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vSpread__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Spread > *arg1 = 0 ;
    std::vector<simdata::Spread > *result;
    std::vector<simdata::Spread > temp1 ;
    std::vector<simdata::Spread > *v1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vSpread",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<simdata::Spread >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                simdata::Spread* x;
                PyObject* o = PySequence_GetItem(obj0,i);
                if ((SWIG_ConvertPtr(o,(void **) &x, 
                SWIGTYPE_p_simdata__Spread,0)) != -1) {
                    temp1[i] = *x;
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""simdata::Spread""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTsimdata__Spread_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<" "simdata::Spread" "> expected");
            SWIG_fail;
        }
    }
    result = (std::vector<simdata::Spread > *)new std::vector<simdata::Spread >((std::vector<simdata::Spread > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTsimdata__Spread_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vSpread(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 0) && (argc <= 1)) {
        int _v;
        if (argc <= 0) {
            return _wrap_new_vSpread__SWIG_0(self,args);
        }
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_vSpread__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            /* native sequence? */
            if (PyTuple_Check(argv[0]) || PyList_Check(argv[0])) {
                unsigned int size = (PyTuple_Check(argv[0]) ?
                PyTuple_Size(argv[0]) :
                PyList_Size(argv[0]));
                if (size == 0) {
                    /* an empty sequence can be of any type */
                    _v = 1;
                }else {
                    /* check the first element only */
                    simdata::Spread* x;
                    PyObject* o = PySequence_GetItem(argv[0],0);
                    if ((SWIG_ConvertPtr(o,(void **) &x, 
                    SWIGTYPE_p_simdata__Spread,0)) != -1)
                    _v = 1;
                    else
                    _v = 0;
                }
            }else {
                /* wrapped vector? */
                std::vector<simdata::Spread >* v;
                if (SWIG_ConvertPtr(argv[0],(void **) &v, 
                SWIGTYPE_p_std__vectorTsimdata__Spread_t,0) != -1)
                _v = 1;
                else
                _v = 0;
            }
        }
        if (_v) {
            return _wrap_new_vSpread__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__Spread, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_new_vSpread__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_vSpread'");
    return NULL;
}


static PyObject *_wrap_vSpread___len__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Spread > *arg1 = (std::vector<simdata::Spread > *) 0 ;
    unsigned int result;
    std::vector<simdata::Spread > temp1 ;
    std::vector<simdata::Spread > *v1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vSpread___len__",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<simdata::Spread >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                simdata::Spread* x;
                PyObject* o = PySequence_GetItem(obj0,i);
                if ((SWIG_ConvertPtr(o,(void **) &x, 
                SWIGTYPE_p_simdata__Spread,0)) != -1) {
                    temp1[i] = *x;
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""simdata::Spread""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTsimdata__Spread_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<" "simdata::Spread" "> expected");
            SWIG_fail;
        }
    }
    result = (unsigned int)((std::vector<simdata::Spread > const *)arg1)->size();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vSpread_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Spread > *arg1 = (std::vector<simdata::Spread > *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vSpread_clear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Spread_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vSpread_append(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Spread > *arg1 = (std::vector<simdata::Spread > *) 0 ;
    simdata::Spread *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vSpread_append",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Spread_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Spread,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->push_back((simdata::Spread const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vSpread___nonzero__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Spread > *arg1 = (std::vector<simdata::Spread > *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vSpread___nonzero__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Spread_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)std_vectorlsimdata_Spread_g___nonzero_____(arg1);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vSpread_pop(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Spread > *arg1 = (std::vector<simdata::Spread > *) 0 ;
    simdata::Spread result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vSpread_pop",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Spread_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = std_vectorlsimdata_Spread_g_pop___(arg1);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    {
        simdata::Spread * resultptr;
        resultptr = new simdata::Spread((simdata::Spread &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__Spread, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vSpread___getitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Spread > *arg1 = (std::vector<simdata::Spread > *) 0 ;
    int arg2 ;
    simdata::Spread *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:vSpread___getitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Spread_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            {
                simdata::Spread &_result_ref = std_vectorlsimdata_Spread_g___getitem_____(arg1,arg2);
                result = (simdata::Spread *) &_result_ref;
            }
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Spread, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vSpread___getslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Spread > *arg1 = (std::vector<simdata::Spread > *) 0 ;
    int arg2 ;
    int arg3 ;
    SwigValueWrapper< std::vector<simdata::Spread > > result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:vSpread___getslice__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Spread_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = std_vectorlsimdata_Spread_g___getslice_____(arg1,arg2,arg3);
    
    {
        resultobj = PyTuple_New((&result)->size());
        for (unsigned int i=0; i<(&result)->size(); i++) {
            simdata::Spread* ptr = new simdata::Spread(((std::vector<simdata::Spread > &)result)[i]);
            PyTuple_SetItem(resultobj,i,
            SWIG_NewPointerObj((void *) ptr, 
            SWIGTYPE_p_simdata__Spread, 1));
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vSpread___setitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Spread > *arg1 = (std::vector<simdata::Spread > *) 0 ;
    int arg2 ;
    simdata::Spread *arg3 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiO:vSpread___setitem__",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Spread_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_simdata__Spread,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            std_vectorlsimdata_Spread_g___setitem_____(arg1,arg2,(simdata::Spread const &)*arg3);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vSpread___setslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Spread > *arg1 = (std::vector<simdata::Spread > *) 0 ;
    int arg2 ;
    int arg3 ;
    std::vector<simdata::Spread > *arg4 = 0 ;
    std::vector<simdata::Spread > temp4 ;
    std::vector<simdata::Spread > *v4 ;
    PyObject * obj0  = 0 ;
    PyObject * obj3  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiiO:vSpread___setslice__",&obj0,&arg2,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Spread_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyTuple_Check(obj3) || PyList_Check(obj3)) {
            unsigned int size = (PyTuple_Check(obj3) ?
            PyTuple_Size(obj3) :
            PyList_Size(obj3));
            temp4 = std::vector<simdata::Spread >(size);
            arg4 = &temp4;
            for (unsigned int i=0; i<size; i++) {
                simdata::Spread* x;
                PyObject* o = PySequence_GetItem(obj3,i);
                if ((SWIG_ConvertPtr(o,(void **) &x, 
                SWIGTYPE_p_simdata__Spread,0)) != -1) {
                    temp4[i] = *x;
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""simdata::Spread""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj3,(void **) &v4, 
        SWIGTYPE_p_std__vectorTsimdata__Spread_t,1) != -1){
            arg4 = v4;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<" "simdata::Spread" "> expected");
            SWIG_fail;
        }
    }
    std_vectorlsimdata_Spread_g___setslice_____(arg1,arg2,arg3,(std::vector<simdata::Spread > const &)*arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vSpread___delitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Spread > *arg1 = (std::vector<simdata::Spread > *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:vSpread___delitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Spread_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            std_vectorlsimdata_Spread_g___delitem_____(arg1,arg2);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vSpread___delslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Spread > *arg1 = (std::vector<simdata::Spread > *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:vSpread___delslice__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Spread_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    std_vectorlsimdata_Spread_g___delslice_____(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_vSpread(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Spread > *arg1 = (std::vector<simdata::Spread > *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_vSpread",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Spread_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * vSpread_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTsimdata__Spread_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_lSpread(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<simdata::Spread > *arg1 = (simdata::List<simdata::Spread > *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_lSpread",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ListTsimdata__Spread_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lSpread_extend(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<simdata::Spread > *arg1 = (simdata::List<simdata::Spread > *) 0 ;
    simdata::Spread *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:lSpread_extend",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ListTsimdata__Spread_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        simdata::Spread &_result_ref = (arg1)->extend();
        result = (simdata::Spread *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Spread, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lSpread_pack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<simdata::Spread > *arg1 = (simdata::List<simdata::Spread > *) 0 ;
    simdata::Packer *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:lSpread_pack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ListTsimdata__Spread_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    ((simdata::List<simdata::Spread > const *)arg1)->pack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lSpread_unpack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<simdata::Spread > *arg1 = (simdata::List<simdata::Spread > *) 0 ;
    simdata::UnPacker *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:lSpread_unpack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ListTsimdata__Spread_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->unpack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lSpread___repr__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<simdata::Spread > *arg1 = (simdata::List<simdata::Spread > *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:lSpread___repr__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ListTsimdata__Spread_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::List<simdata::Spread > const *)arg1)->asString();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_lSpread(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<simdata::Spread > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_lSpread")) goto fail;
    result = (simdata::List<simdata::Spread > *)new simdata::List<simdata::Spread >();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__ListTsimdata__Spread_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * lSpread_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__ListTsimdata__Spread_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_vPath__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 = (unsigned int) 0 ;
    std::vector<simdata::Path > *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_vPath",&obj0)) goto fail;
    if (obj0) {
        arg1 = (unsigned int) PyInt_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (std::vector<simdata::Path > *)new std::vector<simdata::Path >(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTsimdata__Path_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vPath__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    simdata::Path *arg2 = 0 ;
    std::vector<simdata::Path > *result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_vPath",&obj0,&obj1)) goto fail;
    arg1 = (unsigned int) PyInt_AsLong(obj0);
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Path,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (std::vector<simdata::Path > *)new std::vector<simdata::Path >(arg1,(simdata::Path const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTsimdata__Path_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vPath__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Path > *arg1 = 0 ;
    std::vector<simdata::Path > *result;
    std::vector<simdata::Path > temp1 ;
    std::vector<simdata::Path > *v1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vPath",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<simdata::Path >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                simdata::Path* x;
                PyObject* o = PySequence_GetItem(obj0,i);
                if ((SWIG_ConvertPtr(o,(void **) &x, 
                SWIGTYPE_p_simdata__Path,0)) != -1) {
                    temp1[i] = *x;
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""simdata::Path""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTsimdata__Path_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<" "simdata::Path" "> expected");
            SWIG_fail;
        }
    }
    result = (std::vector<simdata::Path > *)new std::vector<simdata::Path >((std::vector<simdata::Path > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTsimdata__Path_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vPath(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 0) && (argc <= 1)) {
        int _v;
        if (argc <= 0) {
            return _wrap_new_vPath__SWIG_0(self,args);
        }
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_vPath__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            /* native sequence? */
            if (PyTuple_Check(argv[0]) || PyList_Check(argv[0])) {
                unsigned int size = (PyTuple_Check(argv[0]) ?
                PyTuple_Size(argv[0]) :
                PyList_Size(argv[0]));
                if (size == 0) {
                    /* an empty sequence can be of any type */
                    _v = 1;
                }else {
                    /* check the first element only */
                    simdata::Path* x;
                    PyObject* o = PySequence_GetItem(argv[0],0);
                    if ((SWIG_ConvertPtr(o,(void **) &x, 
                    SWIGTYPE_p_simdata__Path,0)) != -1)
                    _v = 1;
                    else
                    _v = 0;
                }
            }else {
                /* wrapped vector? */
                std::vector<simdata::Path >* v;
                if (SWIG_ConvertPtr(argv[0],(void **) &v, 
                SWIGTYPE_p_std__vectorTsimdata__Path_t,0) != -1)
                _v = 1;
                else
                _v = 0;
            }
        }
        if (_v) {
            return _wrap_new_vPath__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__Path, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_new_vPath__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_vPath'");
    return NULL;
}


static PyObject *_wrap_vPath___len__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Path > *arg1 = (std::vector<simdata::Path > *) 0 ;
    unsigned int result;
    std::vector<simdata::Path > temp1 ;
    std::vector<simdata::Path > *v1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vPath___len__",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<simdata::Path >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                simdata::Path* x;
                PyObject* o = PySequence_GetItem(obj0,i);
                if ((SWIG_ConvertPtr(o,(void **) &x, 
                SWIGTYPE_p_simdata__Path,0)) != -1) {
                    temp1[i] = *x;
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""simdata::Path""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTsimdata__Path_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<" "simdata::Path" "> expected");
            SWIG_fail;
        }
    }
    result = (unsigned int)((std::vector<simdata::Path > const *)arg1)->size();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vPath_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Path > *arg1 = (std::vector<simdata::Path > *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vPath_clear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Path_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vPath_append(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Path > *arg1 = (std::vector<simdata::Path > *) 0 ;
    simdata::Path *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vPath_append",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Path_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Path,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->push_back((simdata::Path const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vPath___nonzero__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Path > *arg1 = (std::vector<simdata::Path > *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vPath___nonzero__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Path_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)std_vectorlsimdata_Path_g___nonzero_____(arg1);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vPath_pop(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Path > *arg1 = (std::vector<simdata::Path > *) 0 ;
    simdata::Path result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vPath_pop",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Path_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = std_vectorlsimdata_Path_g_pop___(arg1);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    {
        simdata::Path * resultptr;
        resultptr = new simdata::Path((simdata::Path &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__Path, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vPath___getitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Path > *arg1 = (std::vector<simdata::Path > *) 0 ;
    int arg2 ;
    simdata::Path *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:vPath___getitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Path_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            {
                simdata::Path &_result_ref = std_vectorlsimdata_Path_g___getitem_____(arg1,arg2);
                result = (simdata::Path *) &_result_ref;
            }
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Path, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vPath___getslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Path > *arg1 = (std::vector<simdata::Path > *) 0 ;
    int arg2 ;
    int arg3 ;
    SwigValueWrapper< std::vector<simdata::Path > > result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:vPath___getslice__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Path_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = std_vectorlsimdata_Path_g___getslice_____(arg1,arg2,arg3);
    
    {
        resultobj = PyTuple_New((&result)->size());
        for (unsigned int i=0; i<(&result)->size(); i++) {
            simdata::Path* ptr = new simdata::Path(((std::vector<simdata::Path > &)result)[i]);
            PyTuple_SetItem(resultobj,i,
            SWIG_NewPointerObj((void *) ptr, 
            SWIGTYPE_p_simdata__Path, 1));
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vPath___setitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Path > *arg1 = (std::vector<simdata::Path > *) 0 ;
    int arg2 ;
    simdata::Path *arg3 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiO:vPath___setitem__",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Path_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_simdata__Path,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            std_vectorlsimdata_Path_g___setitem_____(arg1,arg2,(simdata::Path const &)*arg3);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vPath___setslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Path > *arg1 = (std::vector<simdata::Path > *) 0 ;
    int arg2 ;
    int arg3 ;
    std::vector<simdata::Path > *arg4 = 0 ;
    std::vector<simdata::Path > temp4 ;
    std::vector<simdata::Path > *v4 ;
    PyObject * obj0  = 0 ;
    PyObject * obj3  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiiO:vPath___setslice__",&obj0,&arg2,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Path_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyTuple_Check(obj3) || PyList_Check(obj3)) {
            unsigned int size = (PyTuple_Check(obj3) ?
            PyTuple_Size(obj3) :
            PyList_Size(obj3));
            temp4 = std::vector<simdata::Path >(size);
            arg4 = &temp4;
            for (unsigned int i=0; i<size; i++) {
                simdata::Path* x;
                PyObject* o = PySequence_GetItem(obj3,i);
                if ((SWIG_ConvertPtr(o,(void **) &x, 
                SWIGTYPE_p_simdata__Path,0)) != -1) {
                    temp4[i] = *x;
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""simdata::Path""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj3,(void **) &v4, 
        SWIGTYPE_p_std__vectorTsimdata__Path_t,1) != -1){
            arg4 = v4;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<" "simdata::Path" "> expected");
            SWIG_fail;
        }
    }
    std_vectorlsimdata_Path_g___setslice_____(arg1,arg2,arg3,(std::vector<simdata::Path > const &)*arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vPath___delitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Path > *arg1 = (std::vector<simdata::Path > *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:vPath___delitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Path_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            std_vectorlsimdata_Path_g___delitem_____(arg1,arg2);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vPath___delslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Path > *arg1 = (std::vector<simdata::Path > *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:vPath___delslice__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Path_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    std_vectorlsimdata_Path_g___delslice_____(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_vPath(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Path > *arg1 = (std::vector<simdata::Path > *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_vPath",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Path_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * vPath_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTsimdata__Path_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_lPath(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<simdata::Path > *arg1 = (simdata::List<simdata::Path > *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_lPath",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ListTsimdata__Path_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lPath_extend(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<simdata::Path > *arg1 = (simdata::List<simdata::Path > *) 0 ;
    simdata::Path *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:lPath_extend",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ListTsimdata__Path_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        simdata::Path &_result_ref = (arg1)->extend();
        result = (simdata::Path *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Path, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lPath_pack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<simdata::Path > *arg1 = (simdata::List<simdata::Path > *) 0 ;
    simdata::Packer *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:lPath_pack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ListTsimdata__Path_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    ((simdata::List<simdata::Path > const *)arg1)->pack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lPath_unpack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<simdata::Path > *arg1 = (simdata::List<simdata::Path > *) 0 ;
    simdata::UnPacker *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:lPath_unpack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ListTsimdata__Path_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->unpack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lPath___repr__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<simdata::Path > *arg1 = (simdata::List<simdata::Path > *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:lPath___repr__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ListTsimdata__Path_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::List<simdata::Path > const *)arg1)->asString();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_lPath(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<simdata::Path > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_lPath")) goto fail;
    result = (simdata::List<simdata::Path > *)new simdata::List<simdata::Path >();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__ListTsimdata__Path_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * lPath_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__ListTsimdata__Path_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_vCurve__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 = (unsigned int) 0 ;
    std::vector<simdata::Curve > *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_vCurve",&obj0)) goto fail;
    if (obj0) {
        arg1 = (unsigned int) PyInt_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (std::vector<simdata::Curve > *)new std::vector<simdata::Curve >(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTsimdata__Curve_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vCurve__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    simdata::Curve *arg2 = 0 ;
    std::vector<simdata::Curve > *result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_vCurve",&obj0,&obj1)) goto fail;
    arg1 = (unsigned int) PyInt_AsLong(obj0);
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Curve,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (std::vector<simdata::Curve > *)new std::vector<simdata::Curve >(arg1,(simdata::Curve const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTsimdata__Curve_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vCurve__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Curve > *arg1 = 0 ;
    std::vector<simdata::Curve > *result;
    std::vector<simdata::Curve > temp1 ;
    std::vector<simdata::Curve > *v1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vCurve",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<simdata::Curve >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                simdata::Curve* x;
                PyObject* o = PySequence_GetItem(obj0,i);
                if ((SWIG_ConvertPtr(o,(void **) &x, 
                SWIGTYPE_p_simdata__Curve,0)) != -1) {
                    temp1[i] = *x;
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""simdata::Curve""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTsimdata__Curve_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<" "simdata::Curve" "> expected");
            SWIG_fail;
        }
    }
    result = (std::vector<simdata::Curve > *)new std::vector<simdata::Curve >((std::vector<simdata::Curve > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTsimdata__Curve_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vCurve(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 0) && (argc <= 1)) {
        int _v;
        if (argc <= 0) {
            return _wrap_new_vCurve__SWIG_0(self,args);
        }
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_vCurve__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            /* native sequence? */
            if (PyTuple_Check(argv[0]) || PyList_Check(argv[0])) {
                unsigned int size = (PyTuple_Check(argv[0]) ?
                PyTuple_Size(argv[0]) :
                PyList_Size(argv[0]));
                if (size == 0) {
                    /* an empty sequence can be of any type */
                    _v = 1;
                }else {
                    /* check the first element only */
                    simdata::Curve* x;
                    PyObject* o = PySequence_GetItem(argv[0],0);
                    if ((SWIG_ConvertPtr(o,(void **) &x, 
                    SWIGTYPE_p_simdata__Curve,0)) != -1)
                    _v = 1;
                    else
                    _v = 0;
                }
            }else {
                /* wrapped vector? */
                std::vector<simdata::Curve >* v;
                if (SWIG_ConvertPtr(argv[0],(void **) &v, 
                SWIGTYPE_p_std__vectorTsimdata__Curve_t,0) != -1)
                _v = 1;
                else
                _v = 0;
            }
        }
        if (_v) {
            return _wrap_new_vCurve__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__Curve, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_new_vCurve__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_vCurve'");
    return NULL;
}


static PyObject *_wrap_vCurve___len__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Curve > *arg1 = (std::vector<simdata::Curve > *) 0 ;
    unsigned int result;
    std::vector<simdata::Curve > temp1 ;
    std::vector<simdata::Curve > *v1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vCurve___len__",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<simdata::Curve >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                simdata::Curve* x;
                PyObject* o = PySequence_GetItem(obj0,i);
                if ((SWIG_ConvertPtr(o,(void **) &x, 
                SWIGTYPE_p_simdata__Curve,0)) != -1) {
                    temp1[i] = *x;
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""simdata::Curve""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTsimdata__Curve_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<" "simdata::Curve" "> expected");
            SWIG_fail;
        }
    }
    result = (unsigned int)((std::vector<simdata::Curve > const *)arg1)->size();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vCurve_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Curve > *arg1 = (std::vector<simdata::Curve > *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vCurve_clear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Curve_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vCurve_append(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Curve > *arg1 = (std::vector<simdata::Curve > *) 0 ;
    simdata::Curve *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vCurve_append",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Curve_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Curve,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->push_back((simdata::Curve const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vCurve___nonzero__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Curve > *arg1 = (std::vector<simdata::Curve > *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vCurve___nonzero__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Curve_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)std_vectorlsimdata_Curve_g___nonzero_____(arg1);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vCurve_pop(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Curve > *arg1 = (std::vector<simdata::Curve > *) 0 ;
    simdata::Curve result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vCurve_pop",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Curve_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = std_vectorlsimdata_Curve_g_pop___(arg1);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    {
        simdata::Curve * resultptr;
        resultptr = new simdata::Curve((simdata::Curve &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__Curve, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vCurve___getitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Curve > *arg1 = (std::vector<simdata::Curve > *) 0 ;
    int arg2 ;
    simdata::Curve *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:vCurve___getitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Curve_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            {
                simdata::Curve &_result_ref = std_vectorlsimdata_Curve_g___getitem_____(arg1,arg2);
                result = (simdata::Curve *) &_result_ref;
            }
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Curve, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vCurve___getslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Curve > *arg1 = (std::vector<simdata::Curve > *) 0 ;
    int arg2 ;
    int arg3 ;
    SwigValueWrapper< std::vector<simdata::Curve > > result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:vCurve___getslice__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Curve_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = std_vectorlsimdata_Curve_g___getslice_____(arg1,arg2,arg3);
    
    {
        resultobj = PyTuple_New((&result)->size());
        for (unsigned int i=0; i<(&result)->size(); i++) {
            simdata::Curve* ptr = new simdata::Curve(((std::vector<simdata::Curve > &)result)[i]);
            PyTuple_SetItem(resultobj,i,
            SWIG_NewPointerObj((void *) ptr, 
            SWIGTYPE_p_simdata__Curve, 1));
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vCurve___setitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Curve > *arg1 = (std::vector<simdata::Curve > *) 0 ;
    int arg2 ;
    simdata::Curve *arg3 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiO:vCurve___setitem__",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Curve_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_simdata__Curve,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            std_vectorlsimdata_Curve_g___setitem_____(arg1,arg2,(simdata::Curve const &)*arg3);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vCurve___setslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Curve > *arg1 = (std::vector<simdata::Curve > *) 0 ;
    int arg2 ;
    int arg3 ;
    std::vector<simdata::Curve > *arg4 = 0 ;
    std::vector<simdata::Curve > temp4 ;
    std::vector<simdata::Curve > *v4 ;
    PyObject * obj0  = 0 ;
    PyObject * obj3  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiiO:vCurve___setslice__",&obj0,&arg2,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Curve_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyTuple_Check(obj3) || PyList_Check(obj3)) {
            unsigned int size = (PyTuple_Check(obj3) ?
            PyTuple_Size(obj3) :
            PyList_Size(obj3));
            temp4 = std::vector<simdata::Curve >(size);
            arg4 = &temp4;
            for (unsigned int i=0; i<size; i++) {
                simdata::Curve* x;
                PyObject* o = PySequence_GetItem(obj3,i);
                if ((SWIG_ConvertPtr(o,(void **) &x, 
                SWIGTYPE_p_simdata__Curve,0)) != -1) {
                    temp4[i] = *x;
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""simdata::Curve""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj3,(void **) &v4, 
        SWIGTYPE_p_std__vectorTsimdata__Curve_t,1) != -1){
            arg4 = v4;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<" "simdata::Curve" "> expected");
            SWIG_fail;
        }
    }
    std_vectorlsimdata_Curve_g___setslice_____(arg1,arg2,arg3,(std::vector<simdata::Curve > const &)*arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vCurve___delitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Curve > *arg1 = (std::vector<simdata::Curve > *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:vCurve___delitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Curve_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            std_vectorlsimdata_Curve_g___delitem_____(arg1,arg2);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vCurve___delslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Curve > *arg1 = (std::vector<simdata::Curve > *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:vCurve___delslice__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Curve_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    std_vectorlsimdata_Curve_g___delslice_____(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_vCurve(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Curve > *arg1 = (std::vector<simdata::Curve > *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_vCurve",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Curve_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * vCurve_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTsimdata__Curve_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_lCurve(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<simdata::Curve > *arg1 = (simdata::List<simdata::Curve > *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_lCurve",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ListTsimdata__Curve_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lCurve_extend(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<simdata::Curve > *arg1 = (simdata::List<simdata::Curve > *) 0 ;
    simdata::Curve *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:lCurve_extend",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ListTsimdata__Curve_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        simdata::Curve &_result_ref = (arg1)->extend();
        result = (simdata::Curve *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Curve, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lCurve_pack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<simdata::Curve > *arg1 = (simdata::List<simdata::Curve > *) 0 ;
    simdata::Packer *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:lCurve_pack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ListTsimdata__Curve_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    ((simdata::List<simdata::Curve > const *)arg1)->pack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lCurve_unpack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<simdata::Curve > *arg1 = (simdata::List<simdata::Curve > *) 0 ;
    simdata::UnPacker *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:lCurve_unpack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ListTsimdata__Curve_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->unpack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lCurve___repr__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<simdata::Curve > *arg1 = (simdata::List<simdata::Curve > *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:lCurve___repr__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ListTsimdata__Curve_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::List<simdata::Curve > const *)arg1)->asString();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_lCurve(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<simdata::Curve > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_lCurve")) goto fail;
    result = (simdata::List<simdata::Curve > *)new simdata::List<simdata::Curve >();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__ListTsimdata__Curve_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * lCurve_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__ListTsimdata__Curve_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_vTable__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 = (unsigned int) 0 ;
    std::vector<simdata::Table > *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_vTable",&obj0)) goto fail;
    if (obj0) {
        arg1 = (unsigned int) PyInt_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (std::vector<simdata::Table > *)new std::vector<simdata::Table >(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTsimdata__Table_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vTable__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    simdata::Table *arg2 = 0 ;
    std::vector<simdata::Table > *result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_vTable",&obj0,&obj1)) goto fail;
    arg1 = (unsigned int) PyInt_AsLong(obj0);
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (std::vector<simdata::Table > *)new std::vector<simdata::Table >(arg1,(simdata::Table const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTsimdata__Table_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vTable__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Table > *arg1 = 0 ;
    std::vector<simdata::Table > *result;
    std::vector<simdata::Table > temp1 ;
    std::vector<simdata::Table > *v1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vTable",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<simdata::Table >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                simdata::Table* x;
                PyObject* o = PySequence_GetItem(obj0,i);
                if ((SWIG_ConvertPtr(o,(void **) &x, 
                SWIGTYPE_p_simdata__Table,0)) != -1) {
                    temp1[i] = *x;
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""simdata::Table""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTsimdata__Table_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<" "simdata::Table" "> expected");
            SWIG_fail;
        }
    }
    result = (std::vector<simdata::Table > *)new std::vector<simdata::Table >((std::vector<simdata::Table > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTsimdata__Table_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vTable(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 0) && (argc <= 1)) {
        int _v;
        if (argc <= 0) {
            return _wrap_new_vTable__SWIG_0(self,args);
        }
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_vTable__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            /* native sequence? */
            if (PyTuple_Check(argv[0]) || PyList_Check(argv[0])) {
                unsigned int size = (PyTuple_Check(argv[0]) ?
                PyTuple_Size(argv[0]) :
                PyList_Size(argv[0]));
                if (size == 0) {
                    /* an empty sequence can be of any type */
                    _v = 1;
                }else {
                    /* check the first element only */
                    simdata::Table* x;
                    PyObject* o = PySequence_GetItem(argv[0],0);
                    if ((SWIG_ConvertPtr(o,(void **) &x, 
                    SWIGTYPE_p_simdata__Table,0)) != -1)
                    _v = 1;
                    else
                    _v = 0;
                }
            }else {
                /* wrapped vector? */
                std::vector<simdata::Table >* v;
                if (SWIG_ConvertPtr(argv[0],(void **) &v, 
                SWIGTYPE_p_std__vectorTsimdata__Table_t,0) != -1)
                _v = 1;
                else
                _v = 0;
            }
        }
        if (_v) {
            return _wrap_new_vTable__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__Table, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_new_vTable__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_vTable'");
    return NULL;
}


static PyObject *_wrap_vTable___len__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Table > *arg1 = (std::vector<simdata::Table > *) 0 ;
    unsigned int result;
    std::vector<simdata::Table > temp1 ;
    std::vector<simdata::Table > *v1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vTable___len__",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<simdata::Table >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                simdata::Table* x;
                PyObject* o = PySequence_GetItem(obj0,i);
                if ((SWIG_ConvertPtr(o,(void **) &x, 
                SWIGTYPE_p_simdata__Table,0)) != -1) {
                    temp1[i] = *x;
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""simdata::Table""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTsimdata__Table_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<" "simdata::Table" "> expected");
            SWIG_fail;
        }
    }
    result = (unsigned int)((std::vector<simdata::Table > const *)arg1)->size();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vTable_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Table > *arg1 = (std::vector<simdata::Table > *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vTable_clear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Table_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vTable_append(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Table > *arg1 = (std::vector<simdata::Table > *) 0 ;
    simdata::Table *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vTable_append",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Table_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->push_back((simdata::Table const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vTable___nonzero__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Table > *arg1 = (std::vector<simdata::Table > *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vTable___nonzero__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Table_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)std_vectorlsimdata_Table_g___nonzero_____(arg1);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vTable_pop(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Table > *arg1 = (std::vector<simdata::Table > *) 0 ;
    simdata::Table result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vTable_pop",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Table_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = std_vectorlsimdata_Table_g_pop___(arg1);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    {
        simdata::Table * resultptr;
        resultptr = new simdata::Table((simdata::Table &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__Table, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vTable___getitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Table > *arg1 = (std::vector<simdata::Table > *) 0 ;
    int arg2 ;
    simdata::Table *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:vTable___getitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Table_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            {
                simdata::Table &_result_ref = std_vectorlsimdata_Table_g___getitem_____(arg1,arg2);
                result = (simdata::Table *) &_result_ref;
            }
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Table, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vTable___getslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Table > *arg1 = (std::vector<simdata::Table > *) 0 ;
    int arg2 ;
    int arg3 ;
    SwigValueWrapper< std::vector<simdata::Table > > result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:vTable___getslice__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Table_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = std_vectorlsimdata_Table_g___getslice_____(arg1,arg2,arg3);
    
    {
        resultobj = PyTuple_New((&result)->size());
        for (unsigned int i=0; i<(&result)->size(); i++) {
            simdata::Table* ptr = new simdata::Table(((std::vector<simdata::Table > &)result)[i]);
            PyTuple_SetItem(resultobj,i,
            SWIG_NewPointerObj((void *) ptr, 
            SWIGTYPE_p_simdata__Table, 1));
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vTable___setitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Table > *arg1 = (std::vector<simdata::Table > *) 0 ;
    int arg2 ;
    simdata::Table *arg3 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiO:vTable___setitem__",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Table_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_simdata__Table,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            std_vectorlsimdata_Table_g___setitem_____(arg1,arg2,(simdata::Table const &)*arg3);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vTable___setslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Table > *arg1 = (std::vector<simdata::Table > *) 0 ;
    int arg2 ;
    int arg3 ;
    std::vector<simdata::Table > *arg4 = 0 ;
    std::vector<simdata::Table > temp4 ;
    std::vector<simdata::Table > *v4 ;
    PyObject * obj0  = 0 ;
    PyObject * obj3  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiiO:vTable___setslice__",&obj0,&arg2,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Table_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyTuple_Check(obj3) || PyList_Check(obj3)) {
            unsigned int size = (PyTuple_Check(obj3) ?
            PyTuple_Size(obj3) :
            PyList_Size(obj3));
            temp4 = std::vector<simdata::Table >(size);
            arg4 = &temp4;
            for (unsigned int i=0; i<size; i++) {
                simdata::Table* x;
                PyObject* o = PySequence_GetItem(obj3,i);
                if ((SWIG_ConvertPtr(o,(void **) &x, 
                SWIGTYPE_p_simdata__Table,0)) != -1) {
                    temp4[i] = *x;
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""simdata::Table""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj3,(void **) &v4, 
        SWIGTYPE_p_std__vectorTsimdata__Table_t,1) != -1){
            arg4 = v4;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<" "simdata::Table" "> expected");
            SWIG_fail;
        }
    }
    std_vectorlsimdata_Table_g___setslice_____(arg1,arg2,arg3,(std::vector<simdata::Table > const &)*arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vTable___delitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Table > *arg1 = (std::vector<simdata::Table > *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:vTable___delitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Table_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            std_vectorlsimdata_Table_g___delitem_____(arg1,arg2);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vTable___delslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Table > *arg1 = (std::vector<simdata::Table > *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:vTable___delslice__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Table_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    std_vectorlsimdata_Table_g___delslice_____(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_vTable(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::Table > *arg1 = (std::vector<simdata::Table > *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_vTable",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__Table_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * vTable_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTsimdata__Table_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_lTable(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<simdata::Table > *arg1 = (simdata::List<simdata::Table > *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_lTable",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ListTsimdata__Table_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lTable_extend(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<simdata::Table > *arg1 = (simdata::List<simdata::Table > *) 0 ;
    simdata::Table *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:lTable_extend",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ListTsimdata__Table_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        simdata::Table &_result_ref = (arg1)->extend();
        result = (simdata::Table *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Table, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lTable_pack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<simdata::Table > *arg1 = (simdata::List<simdata::Table > *) 0 ;
    simdata::Packer *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:lTable_pack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ListTsimdata__Table_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    ((simdata::List<simdata::Table > const *)arg1)->pack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lTable_unpack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<simdata::Table > *arg1 = (simdata::List<simdata::Table > *) 0 ;
    simdata::UnPacker *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:lTable_unpack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ListTsimdata__Table_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->unpack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lTable___repr__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<simdata::Table > *arg1 = (simdata::List<simdata::Table > *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:lTable___repr__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ListTsimdata__Table_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::List<simdata::Table > const *)arg1)->asString();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_lTable(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<simdata::Table > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_lTable")) goto fail;
    result = (simdata::List<simdata::Table > *)new simdata::List<simdata::Table >();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__ListTsimdata__Table_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * lTable_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__ListTsimdata__Table_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_vExternal__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 = (unsigned int) 0 ;
    std::vector<simdata::External > *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_vExternal",&obj0)) goto fail;
    if (obj0) {
        arg1 = (unsigned int) PyInt_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (std::vector<simdata::External > *)new std::vector<simdata::External >(arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTsimdata__External_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vExternal__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 ;
    simdata::External *arg2 = 0 ;
    std::vector<simdata::External > *result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_vExternal",&obj0,&obj1)) goto fail;
    arg1 = (unsigned int) PyInt_AsLong(obj0);
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__External,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (std::vector<simdata::External > *)new std::vector<simdata::External >(arg1,(simdata::External const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTsimdata__External_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vExternal__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::External > *arg1 = 0 ;
    std::vector<simdata::External > *result;
    std::vector<simdata::External > temp1 ;
    std::vector<simdata::External > *v1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_vExternal",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<simdata::External >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                simdata::External* x;
                PyObject* o = PySequence_GetItem(obj0,i);
                if ((SWIG_ConvertPtr(o,(void **) &x, 
                SWIGTYPE_p_simdata__External,0)) != -1) {
                    temp1[i] = *x;
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""simdata::External""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTsimdata__External_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<" "simdata::External" "> expected");
            SWIG_fail;
        }
    }
    result = (std::vector<simdata::External > *)new std::vector<simdata::External >((std::vector<simdata::External > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTsimdata__External_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_vExternal(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 0) && (argc <= 1)) {
        int _v;
        if (argc <= 0) {
            return _wrap_new_vExternal__SWIG_0(self,args);
        }
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_vExternal__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            /* native sequence? */
            if (PyTuple_Check(argv[0]) || PyList_Check(argv[0])) {
                unsigned int size = (PyTuple_Check(argv[0]) ?
                PyTuple_Size(argv[0]) :
                PyList_Size(argv[0]));
                if (size == 0) {
                    /* an empty sequence can be of any type */
                    _v = 1;
                }else {
                    /* check the first element only */
                    simdata::External* x;
                    PyObject* o = PySequence_GetItem(argv[0],0);
                    if ((SWIG_ConvertPtr(o,(void **) &x, 
                    SWIGTYPE_p_simdata__External,0)) != -1)
                    _v = 1;
                    else
                    _v = 0;
                }
            }else {
                /* wrapped vector? */
                std::vector<simdata::External >* v;
                if (SWIG_ConvertPtr(argv[0],(void **) &v, 
                SWIGTYPE_p_std__vectorTsimdata__External_t,0) != -1)
                _v = 1;
                else
                _v = 0;
            }
        }
        if (_v) {
            return _wrap_new_vExternal__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__External, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_new_vExternal__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_vExternal'");
    return NULL;
}


static PyObject *_wrap_vExternal___len__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::External > *arg1 = (std::vector<simdata::External > *) 0 ;
    unsigned int result;
    std::vector<simdata::External > temp1 ;
    std::vector<simdata::External > *v1 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vExternal___len__",&obj0)) goto fail;
    {
        if (PyTuple_Check(obj0) || PyList_Check(obj0)) {
            unsigned int size = (PyTuple_Check(obj0) ?
            PyTuple_Size(obj0) :
            PyList_Size(obj0));
            temp1 = std::vector<simdata::External >(size);
            arg1 = &temp1;
            for (unsigned int i=0; i<size; i++) {
                simdata::External* x;
                PyObject* o = PySequence_GetItem(obj0,i);
                if ((SWIG_ConvertPtr(o,(void **) &x, 
                SWIGTYPE_p_simdata__External,0)) != -1) {
                    temp1[i] = *x;
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""simdata::External""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj0,(void **) &v1, 
        SWIGTYPE_p_std__vectorTsimdata__External_t,1) != -1){
            arg1 = v1;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<" "simdata::External" "> expected");
            SWIG_fail;
        }
    }
    result = (unsigned int)((std::vector<simdata::External > const *)arg1)->size();
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vExternal_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::External > *arg1 = (std::vector<simdata::External > *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vExternal_clear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__External_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vExternal_append(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::External > *arg1 = (std::vector<simdata::External > *) 0 ;
    simdata::External *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:vExternal_append",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__External_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__External,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->push_back((simdata::External const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vExternal___nonzero__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::External > *arg1 = (std::vector<simdata::External > *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vExternal___nonzero__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__External_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)std_vectorlsimdata_External_g___nonzero_____(arg1);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vExternal_pop(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::External > *arg1 = (std::vector<simdata::External > *) 0 ;
    simdata::External result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:vExternal_pop",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__External_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = std_vectorlsimdata_External_g_pop___(arg1);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    {
        simdata::External * resultptr;
        resultptr = new simdata::External((simdata::External &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__External, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vExternal___getitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::External > *arg1 = (std::vector<simdata::External > *) 0 ;
    int arg2 ;
    simdata::External *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:vExternal___getitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__External_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            {
                simdata::External &_result_ref = std_vectorlsimdata_External_g___getitem_____(arg1,arg2);
                result = (simdata::External *) &_result_ref;
            }
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__External, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vExternal___getslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::External > *arg1 = (std::vector<simdata::External > *) 0 ;
    int arg2 ;
    int arg3 ;
    SwigValueWrapper< std::vector<simdata::External > > result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:vExternal___getslice__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__External_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = std_vectorlsimdata_External_g___getslice_____(arg1,arg2,arg3);
    
    {
        resultobj = PyTuple_New((&result)->size());
        for (unsigned int i=0; i<(&result)->size(); i++) {
            simdata::External* ptr = new simdata::External(((std::vector<simdata::External > &)result)[i]);
            PyTuple_SetItem(resultobj,i,
            SWIG_NewPointerObj((void *) ptr, 
            SWIGTYPE_p_simdata__External, 1));
        }
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vExternal___setitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::External > *arg1 = (std::vector<simdata::External > *) 0 ;
    int arg2 ;
    simdata::External *arg3 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiO:vExternal___setitem__",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__External_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_simdata__External,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            std_vectorlsimdata_External_g___setitem_____(arg1,arg2,(simdata::External const &)*arg3);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vExternal___setslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::External > *arg1 = (std::vector<simdata::External > *) 0 ;
    int arg2 ;
    int arg3 ;
    std::vector<simdata::External > *arg4 = 0 ;
    std::vector<simdata::External > temp4 ;
    std::vector<simdata::External > *v4 ;
    PyObject * obj0  = 0 ;
    PyObject * obj3  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiiO:vExternal___setslice__",&obj0,&arg2,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__External_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (PyTuple_Check(obj3) || PyList_Check(obj3)) {
            unsigned int size = (PyTuple_Check(obj3) ?
            PyTuple_Size(obj3) :
            PyList_Size(obj3));
            temp4 = std::vector<simdata::External >(size);
            arg4 = &temp4;
            for (unsigned int i=0; i<size; i++) {
                simdata::External* x;
                PyObject* o = PySequence_GetItem(obj3,i);
                if ((SWIG_ConvertPtr(o,(void **) &x, 
                SWIGTYPE_p_simdata__External,0)) != -1) {
                    temp4[i] = *x;
                    Py_DECREF(o);
                }else {
                    Py_DECREF(o);
                    PyErr_SetString(PyExc_TypeError,
                    "vector<""simdata::External""> expected");
                    SWIG_fail;
                }
            }
        }else if (SWIG_ConvertPtr(obj3,(void **) &v4, 
        SWIGTYPE_p_std__vectorTsimdata__External_t,1) != -1){
            arg4 = v4;
        }else {
            PyErr_SetString(PyExc_TypeError,"vector<" "simdata::External" "> expected");
            SWIG_fail;
        }
    }
    std_vectorlsimdata_External_g___setslice_____(arg1,arg2,arg3,(std::vector<simdata::External > const &)*arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vExternal___delitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::External > *arg1 = (std::vector<simdata::External > *) 0 ;
    int arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:vExternal___delitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__External_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            std_vectorlsimdata_External_g___delitem_____(arg1,arg2);
            
        }catch (std::out_of_range& e) {
            SWIG_exception(SWIG_IndexError,const_cast<char*>(e.what()));
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_vExternal___delslice__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::External > *arg1 = (std::vector<simdata::External > *) 0 ;
    int arg2 ;
    int arg3 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oii:vExternal___delslice__",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__External_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    std_vectorlsimdata_External_g___delslice_____(arg1,arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_vExternal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::vector<simdata::External > *arg1 = (std::vector<simdata::External > *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_vExternal",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_std__vectorTsimdata__External_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * vExternal_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_std__vectorTsimdata__External_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_lExternal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<simdata::External > *arg1 = (simdata::List<simdata::External > *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_lExternal",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ListTsimdata__External_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lExternal_extend(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<simdata::External > *arg1 = (simdata::List<simdata::External > *) 0 ;
    simdata::External *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:lExternal_extend",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ListTsimdata__External_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        simdata::External &_result_ref = (arg1)->extend();
        result = (simdata::External *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__External, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lExternal_pack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<simdata::External > *arg1 = (simdata::List<simdata::External > *) 0 ;
    simdata::Packer *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:lExternal_pack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ListTsimdata__External_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    ((simdata::List<simdata::External > const *)arg1)->pack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lExternal_unpack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<simdata::External > *arg1 = (simdata::List<simdata::External > *) 0 ;
    simdata::UnPacker *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:lExternal_unpack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ListTsimdata__External_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->unpack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lExternal___repr__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<simdata::External > *arg1 = (simdata::List<simdata::External > *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:lExternal___repr__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ListTsimdata__External_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::List<simdata::External > const *)arg1)->asString();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_lExternal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::List<simdata::External > *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_lExternal")) goto fail;
    result = (simdata::List<simdata::External > *)new simdata::List<simdata::External >();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__ListTsimdata__External_t, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * lExternal_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__ListTsimdata__External_t, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_Matrix3_rowcol_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    simdata::Matrix3::M_t (*arg2)[3] ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Matrix3_rowcol_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_a_3__simdata__Matrix3__M_t,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        int ii;
        simdata::Matrix3::M_t *b = (simdata::Matrix3::M_t *) arg1->rowcol;
        for (ii = 0; ii < 3*3; ii++) b[ii] = *((simdata::Matrix3::M_t *) arg2 + ii);
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3_rowcol_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    simdata::Matrix3::M_t (*result)[3];
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Matrix3_rowcol_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (simdata::Matrix3::M_t (*)[3])(simdata::Matrix3::M_t (*)[3]) ((arg1)->rowcol);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_a_3__simdata__Matrix3__M_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3_pack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    simdata::Packer *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Matrix3_pack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    ((simdata::Matrix3 const *)arg1)->pack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3_unpack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    simdata::UnPacker *arg2 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Matrix3_unpack",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->unpack(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3_parseXML(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    char *arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:Matrix3_parseXML",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->parseXML((char const *)arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Matrix3__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Matrix3")) goto fail;
    result = (simdata::Matrix3 *)new simdata::Matrix3();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Matrix3, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Matrix3__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    double (*arg1)[3] ;
    simdata::Matrix3 *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Matrix3",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_a_3__double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (simdata::Matrix3 *)new simdata::Matrix3((double const (*)[3])arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Matrix3, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Matrix3__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = 0 ;
    simdata::Matrix3 *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_Matrix3",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (simdata::Matrix3 *)new simdata::Matrix3((simdata::Matrix3 const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Matrix3, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Matrix3__SWIG_3(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    double arg5 ;
    double arg6 ;
    double arg7 ;
    double arg8 ;
    double arg9 ;
    simdata::Matrix3 *result;
    
    if(!PyArg_ParseTuple(args,(char *)"ddddddddd:new_Matrix3",&arg1,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7,&arg8,&arg9)) goto fail;
    result = (simdata::Matrix3 *)new simdata::Matrix3(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Matrix3, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Matrix3__SWIG_4(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = 0 ;
    simdata::Vector3 *arg2 = 0 ;
    simdata::Vector3 *arg3 = 0 ;
    simdata::Matrix3 *result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_Matrix3",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (simdata::Matrix3 *)new simdata::Matrix3((simdata::Vector3 const &)*arg1,(simdata::Vector3 const &)*arg2,(simdata::Vector3 const &)*arg3);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Matrix3, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_Matrix3(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[10];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 9); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_Matrix3__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_a_3__double, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_Matrix3__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Matrix3, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_Matrix3__SWIG_2(self,args);
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Vector3, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__Vector3, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_simdata__Vector3, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    }else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_new_Matrix3__SWIG_4(self,args);
                }
            }
        }
    }
    if (argc == 9) {
        int _v;
        {
            _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyFloat_Check(argv[2]) || PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = (PyFloat_Check(argv[4]) || PyInt_Check(argv[4]) || PyLong_Check(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            {
                                _v = (PyFloat_Check(argv[5]) || PyInt_Check(argv[5]) || PyLong_Check(argv[5])) ? 1 : 0;
                            }
                            if (_v) {
                                {
                                    _v = (PyFloat_Check(argv[6]) || PyInt_Check(argv[6]) || PyLong_Check(argv[6])) ? 1 : 0;
                                }
                                if (_v) {
                                    {
                                        _v = (PyFloat_Check(argv[7]) || PyInt_Check(argv[7]) || PyLong_Check(argv[7])) ? 1 : 0;
                                    }
                                    if (_v) {
                                        {
                                            _v = (PyFloat_Check(argv[8]) || PyInt_Check(argv[8]) || PyLong_Check(argv[8])) ? 1 : 0;
                                        }
                                        if (_v) {
                                            return _wrap_new_Matrix3__SWIG_3(self,args);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_Matrix3'");
    return NULL;
}


static PyObject *_wrap_Matrix3_SetColumn(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    int arg2 ;
    simdata::Vector3 *arg3 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiO:Matrix3_SetColumn",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->SetColumn(arg2,(simdata::Vector3 const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3_GetColumn(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    int arg2 ;
    simdata::Vector3 result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Matrix3_GetColumn",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::Matrix3 const *)arg1)->GetColumn(arg2);
    
    {
        simdata::Vector3 * resultptr;
        resultptr = new simdata::Vector3((simdata::Vector3 &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__Vector3, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3_GetRow(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    int arg2 ;
    simdata::Vector3 result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:Matrix3_GetRow",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::Matrix3 const *)arg1)->GetRow(arg2);
    
    {
        simdata::Vector3 * resultptr;
        resultptr = new simdata::Vector3((simdata::Vector3 &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__Vector3, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3_GetElements(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    SwigValueWrapper< std::vector<double > > result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Matrix3_GetElements",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::Matrix3 const *)arg1)->GetElements();
    
    {
        std::vector<double > * resultptr;
        resultptr = new std::vector<double >((std::vector<double > &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_std__vectorTdouble_t, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3___eq__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    simdata::Matrix3 *arg2 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Matrix3___eq__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((simdata::Matrix3 const *)arg1)->operator ==((simdata::Matrix3 const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3___ne__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    simdata::Matrix3 *arg2 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Matrix3___ne__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((simdata::Matrix3 const *)arg1)->operator !=((simdata::Matrix3 const &)*arg2);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3___add__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    simdata::Matrix3 *arg2 = 0 ;
    simdata::Matrix3 result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Matrix3___add__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::Matrix3 const *)arg1)->operator +((simdata::Matrix3 const &)*arg2);
    
    {
        simdata::Matrix3 * resultptr;
        resultptr = new simdata::Matrix3((simdata::Matrix3 &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__Matrix3, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3___sub__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    simdata::Matrix3 *arg2 = 0 ;
    simdata::Matrix3 result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Matrix3___sub__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::Matrix3 const *)arg1)->operator -((simdata::Matrix3 const &)*arg2);
    
    {
        simdata::Matrix3 * resultptr;
        resultptr = new simdata::Matrix3((simdata::Matrix3 &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__Matrix3, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3___mul____SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    simdata::Matrix3 *arg2 = 0 ;
    simdata::Matrix3 result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Matrix3___mul__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::Matrix3 const *)arg1)->operator *((simdata::Matrix3 const &)*arg2);
    
    {
        simdata::Matrix3 * resultptr;
        resultptr = new simdata::Matrix3((simdata::Matrix3 &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__Matrix3, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3___neg__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    simdata::Matrix3 result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Matrix3___neg__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::Matrix3 const *)arg1)->operator -();
    
    {
        simdata::Matrix3 * resultptr;
        resultptr = new simdata::Matrix3((simdata::Matrix3 &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__Matrix3, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3___mul____SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    double arg2 ;
    simdata::Matrix3 result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:Matrix3___mul__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::Matrix3 const *)arg1)->operator *(arg2);
    
    {
        simdata::Matrix3 * resultptr;
        resultptr = new simdata::Matrix3((simdata::Matrix3 &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__Matrix3, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3___mul__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Matrix3, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__Matrix3, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_Matrix3___mul____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Matrix3, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyFloat_Check(argv[1]) || PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Matrix3___mul____SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'Matrix3___mul__'");
    return NULL;
}


static PyObject *_wrap_Matrix3_Transpose(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    simdata::Matrix3 result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Matrix3_Transpose",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::Matrix3 const *)arg1)->Transpose();
    
    {
        simdata::Matrix3 * resultptr;
        resultptr = new simdata::Matrix3((simdata::Matrix3 &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__Matrix3, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3_Inverse(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    double arg2 = (double) 1e-06 ;
    simdata::Matrix3 result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|d:Matrix3_Inverse",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::Matrix3 const *)arg1)->Inverse(arg2);
    
    {
        simdata::Matrix3 * resultptr;
        resultptr = new simdata::Matrix3((simdata::Matrix3 &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__Matrix3, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3_Determinant(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    double result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Matrix3_Determinant",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (double)((simdata::Matrix3 const *)arg1)->Determinant();
    
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3_ToAxisAngle(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    simdata::Vector3 *arg2 = 0 ;
    double *arg3 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Matrix3_ToAxisAngle",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    ((simdata::Matrix3 const *)arg1)->ToAxisAngle(*arg2,*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3_FromAxisAngle(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    simdata::Vector3 *arg2 = 0 ;
    double arg3 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOd:Matrix3_FromAxisAngle",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->FromAxisAngle((simdata::Vector3 const &)*arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3_ToEulerAnglesXYZ(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    double *arg2 = 0 ;
    double *arg3 = 0 ;
    double *arg4 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    PyObject * obj3  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Matrix3_ToEulerAnglesXYZ",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((simdata::Matrix3 const *)arg1)->ToEulerAnglesXYZ(*arg2,*arg3,*arg4);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3_ToEulerAnglesXZY(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    double *arg2 = 0 ;
    double *arg3 = 0 ;
    double *arg4 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    PyObject * obj3  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Matrix3_ToEulerAnglesXZY",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((simdata::Matrix3 const *)arg1)->ToEulerAnglesXZY(*arg2,*arg3,*arg4);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3_ToEulerAnglesYXZ(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    double *arg2 = 0 ;
    double *arg3 = 0 ;
    double *arg4 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    PyObject * obj3  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Matrix3_ToEulerAnglesYXZ",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((simdata::Matrix3 const *)arg1)->ToEulerAnglesYXZ(*arg2,*arg3,*arg4);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3_ToEulerAnglesYZX(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    double *arg2 = 0 ;
    double *arg3 = 0 ;
    double *arg4 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    PyObject * obj3  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Matrix3_ToEulerAnglesYZX",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((simdata::Matrix3 const *)arg1)->ToEulerAnglesYZX(*arg2,*arg3,*arg4);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3_ToEulerAnglesZXY(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    double *arg2 = 0 ;
    double *arg3 = 0 ;
    double *arg4 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    PyObject * obj3  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Matrix3_ToEulerAnglesZXY",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((simdata::Matrix3 const *)arg1)->ToEulerAnglesZXY(*arg2,*arg3,*arg4);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3_ToEulerAnglesZYX(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    double *arg2 = 0 ;
    double *arg3 = 0 ;
    double *arg4 = 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    PyObject * obj3  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:Matrix3_ToEulerAnglesZYX",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_double,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool)((simdata::Matrix3 const *)arg1)->ToEulerAnglesZYX(*arg2,*arg3,*arg4);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3_FromEulerAnglesXYZ(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oddd:Matrix3_FromEulerAnglesXYZ",&obj0,&arg2,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->FromEulerAnglesXYZ(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3_FromEulerAnglesXZY(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oddd:Matrix3_FromEulerAnglesXZY",&obj0,&arg2,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->FromEulerAnglesXZY(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3_FromEulerAnglesYXZ(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oddd:Matrix3_FromEulerAnglesYXZ",&obj0,&arg2,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->FromEulerAnglesYXZ(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3_FromEulerAnglesYZX(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oddd:Matrix3_FromEulerAnglesYZX",&obj0,&arg2,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->FromEulerAnglesYZX(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3_FromEulerAnglesZXY(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oddd:Matrix3_FromEulerAnglesZXY",&obj0,&arg2,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->FromEulerAnglesZXY(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3_FromEulerAnglesZYX(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    double arg2 ;
    double arg3 ;
    double arg4 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oddd:Matrix3_FromEulerAnglesZYX",&obj0,&arg2,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->FromEulerAnglesZYX(arg2,arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3_TensorProduct(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Vector3 *arg1 = 0 ;
    simdata::Vector3 *arg2 = 0 ;
    simdata::Matrix3 *arg3 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:Matrix3_TensorProduct",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Vector3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    simdata::Matrix3::TensorProduct((simdata::Vector3 const &)*arg1,(simdata::Vector3 const &)*arg2,*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_Matrix3_EPSILON_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable Matrix3_EPSILON is read-only.");
    return 1;
}


static PyObject *_wrap_Matrix3_EPSILON_get() {
    PyObject *pyobj;
    
    pyobj = PyFloat_FromDouble(simdata::Matrix3::EPSILON);
    return pyobj;
}


static int _wrap_Matrix3_ZERO_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable Matrix3_ZERO is read-only.");
    return 1;
}


static PyObject *_wrap_Matrix3_ZERO_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &simdata::Matrix3::ZERO, SWIGTYPE_p_simdata__Matrix3, 0);
    return pyobj;
}


static int _wrap_Matrix3_IDENTITY_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable Matrix3_IDENTITY is read-only.");
    return 1;
}


static PyObject *_wrap_Matrix3_IDENTITY_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &simdata::Matrix3::IDENTITY, SWIGTYPE_p_simdata__Matrix3, 0);
    return pyobj;
}


static PyObject *_wrap_Matrix3_Print__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:Matrix3_Print",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (!PyFile_Check(obj1)) {
            FILE* fp;
            if ((SWIG_ConvertPtr(obj1,(void **) &fp, SWIGTYPE_p_FILE,SWIG_POINTER_EXCEPTION | 0 )) == -1) {
                PyErr_SetString(PyExc_TypeError, "Need a file!");
                return NULL;
            }
            arg2 = fp;
        }else arg2 = PyFile_AsFile(obj1);
    }
    (arg1)->Print(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3_Print__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    char *arg2 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:Matrix3_Print",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->Print(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Matrix3_Print(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Matrix3, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_FILE, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_Matrix3_Print__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__Matrix3, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_Matrix3_Print__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'Matrix3_Print'");
    return NULL;
}


static PyObject *_wrap_Matrix3___repr__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    std::string result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Matrix3___repr__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = ((simdata::Matrix3 const *)arg1)->asString();
    
    {
        resultobj = PyString_FromString((&result)->c_str());
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Matrix3(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::Matrix3 *arg1 = (simdata::Matrix3 *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Matrix3",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__Matrix3,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Matrix3_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__Matrix3, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_BadMagic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    simdata::BadMagic *result;
    
    if(!PyArg_ParseTuple(args,(char *)"s:new_BadMagic",&arg1)) goto fail;
    {
        try {
            result = (simdata::BadMagic *)new simdata::BadMagic((char const *)arg1);
            
        }catch (simdata::PythonException &e) {
            printf("SWIG: passing Python exception back\n");
            return NULL;
        }catch (...) {
            printf("SWIG: passing C++ exception back\n");
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__BadMagic, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_BadMagic(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::BadMagic *arg1 = (simdata::BadMagic *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_BadMagic",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__BadMagic,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
            
        }catch (simdata::PythonException &e) {
            printf("SWIG: passing Python exception back\n");
            return NULL;
        }catch (...) {
            printf("SWIG: passing C++ exception back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * BadMagic_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__BadMagic, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_BadByteOrder(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    simdata::BadByteOrder *result;
    
    if(!PyArg_ParseTuple(args,(char *)"s:new_BadByteOrder",&arg1)) goto fail;
    {
        try {
            result = (simdata::BadByteOrder *)new simdata::BadByteOrder((char const *)arg1);
            
        }catch (simdata::PythonException &e) {
            printf("SWIG: passing Python exception back\n");
            return NULL;
        }catch (...) {
            printf("SWIG: passing C++ exception back\n");
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__BadByteOrder, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_BadByteOrder(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::BadByteOrder *arg1 = (simdata::BadByteOrder *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_BadByteOrder",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__BadByteOrder,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
            
        }catch (simdata::PythonException &e) {
            printf("SWIG: passing Python exception back\n");
            return NULL;
        }catch (...) {
            printf("SWIG: passing C++ exception back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * BadByteOrder_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__BadByteOrder, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_CorruptArchive(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    simdata::CorruptArchive *result;
    
    if(!PyArg_ParseTuple(args,(char *)"s:new_CorruptArchive",&arg1)) goto fail;
    {
        try {
            result = (simdata::CorruptArchive *)new simdata::CorruptArchive((char const *)arg1);
            
        }catch (simdata::PythonException &e) {
            printf("SWIG: passing Python exception back\n");
            return NULL;
        }catch (...) {
            printf("SWIG: passing C++ exception back\n");
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__CorruptArchive, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CorruptArchive(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::CorruptArchive *arg1 = (simdata::CorruptArchive *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CorruptArchive",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__CorruptArchive,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
            
        }catch (simdata::PythonException &e) {
            printf("SWIG: passing Python exception back\n");
            return NULL;
        }catch (...) {
            printf("SWIG: passing C++ exception back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CorruptArchive_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__CorruptArchive, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_IndexError(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    simdata::IndexError *result;
    
    if(!PyArg_ParseTuple(args,(char *)"s:new_IndexError",&arg1)) goto fail;
    {
        try {
            result = (simdata::IndexError *)new simdata::IndexError((char const *)arg1);
            
        }catch (simdata::PythonException &e) {
            printf("SWIG: passing Python exception back\n");
            return NULL;
        }catch (...) {
            printf("SWIG: passing C++ exception back\n");
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__IndexError, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_IndexError(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::IndexError *arg1 = (simdata::IndexError *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_IndexError",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__IndexError,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
            
        }catch (simdata::PythonException &e) {
            printf("SWIG: passing Python exception back\n");
            return NULL;
        }catch (...) {
            printf("SWIG: passing C++ exception back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * IndexError_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__IndexError, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ObjectMismatch(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    simdata::ObjectMismatch *result;
    
    if(!PyArg_ParseTuple(args,(char *)"s:new_ObjectMismatch",&arg1)) goto fail;
    {
        try {
            result = (simdata::ObjectMismatch *)new simdata::ObjectMismatch((char const *)arg1);
            
        }catch (simdata::PythonException &e) {
            printf("SWIG: passing Python exception back\n");
            return NULL;
        }catch (...) {
            printf("SWIG: passing C++ exception back\n");
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__ObjectMismatch, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ObjectMismatch(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::ObjectMismatch *arg1 = (simdata::ObjectMismatch *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ObjectMismatch",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__ObjectMismatch,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
            
        }catch (simdata::PythonException &e) {
            printf("SWIG: passing Python exception back\n");
            return NULL;
        }catch (...) {
            printf("SWIG: passing C++ exception back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ObjectMismatch_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__ObjectMismatch, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_IOError(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    std::string arg1 = (std::string) "" ;
    simdata::IOError *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_IOError",&obj0)) goto fail;
    if (obj0) {
        {
            if (PyString_Check(obj0))
            arg1 = std::string(PyString_AsString(obj0));
            else
            SWIG_exception(SWIG_TypeError, "string expected");
        }
    }
    {
        try {
            result = (simdata::IOError *)new simdata::IOError(arg1);
            
        }catch (simdata::PythonException &e) {
            printf("SWIG: passing Python exception back\n");
            return NULL;
        }catch (...) {
            printf("SWIG: passing C++ exception back\n");
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__IOError, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_IOError(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::IOError *arg1 = (simdata::IOError *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_IOError",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__IOError,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
            
        }catch (simdata::PythonException &e) {
            printf("SWIG: passing Python exception back\n");
            return NULL;
        }catch (...) {
            printf("SWIG: passing C++ exception back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * IOError_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__IOError, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_TableEntry_pathhash_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::TableEntry *arg1 = (simdata::TableEntry *) 0 ;
    simdata::hasht *arg2 = (simdata::hasht *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:TableEntry_pathhash_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__TableEntry,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__hasht,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->pathhash = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TableEntry_pathhash_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::TableEntry *arg1 = (simdata::TableEntry *) 0 ;
    simdata::hasht *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TableEntry_pathhash_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__TableEntry,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (simdata::hasht *)& ((arg1)->pathhash);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__hasht, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TableEntry_classhash_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::TableEntry *arg1 = (simdata::TableEntry *) 0 ;
    simdata::hasht *arg2 = (simdata::hasht *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:TableEntry_classhash_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__TableEntry,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__hasht,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->classhash = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TableEntry_classhash_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::TableEntry *arg1 = (simdata::TableEntry *) 0 ;
    simdata::hasht *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TableEntry_classhash_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__TableEntry,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (simdata::hasht *)& ((arg1)->classhash);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__hasht, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TableEntry_offset_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::TableEntry *arg1 = (simdata::TableEntry *) 0 ;
    gint32 arg2 ;
    gint32 *argp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:TableEntry_offset_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__TableEntry,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_gint32,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    if (arg1) (arg1)->offset = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TableEntry_offset_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::TableEntry *arg1 = (simdata::TableEntry *) 0 ;
    gint32 result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TableEntry_offset_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__TableEntry,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result =  ((arg1)->offset);
    
    {
        gint32 * resultptr;
        resultptr = new gint32((gint32 &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_gint32, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TableEntry_length_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::TableEntry *arg1 = (simdata::TableEntry *) 0 ;
    gint32 arg2 ;
    gint32 *argp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:TableEntry_length_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__TableEntry,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_gint32,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    if (arg1) (arg1)->length = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TableEntry_length_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::TableEntry *arg1 = (simdata::TableEntry *) 0 ;
    gint32 result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TableEntry_length_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__TableEntry,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result =  ((arg1)->length);
    
    {
        gint32 * resultptr;
        resultptr = new gint32((gint32 &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_gint32, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_TableEntry(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::TableEntry *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_TableEntry")) goto fail;
    {
        try {
            result = (simdata::TableEntry *)new simdata::TableEntry();
            
        }catch (simdata::PythonException &e) {
            printf("SWIG: passing Python exception back\n");
            return NULL;
        }catch (...) {
            printf("SWIG: passing C++ exception back\n");
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__TableEntry, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_TableEntry(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::TableEntry *arg1 = (simdata::TableEntry *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_TableEntry",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__TableEntry,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
            
        }catch (simdata::PythonException &e) {
            printf("SWIG: passing Python exception back\n");
            return NULL;
        }catch (...) {
            printf("SWIG: passing C++ exception back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * TableEntry_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__TableEntry, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_FP_f_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::FP *arg1 = (simdata::FP *) 0 ;
    FILE *arg2 = (FILE *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FP_f_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__FP,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        if (!PyFile_Check(obj1)) {
            FILE* fp;
            if ((SWIG_ConvertPtr(obj1,(void **) &fp, SWIGTYPE_p_FILE,SWIG_POINTER_EXCEPTION | 0 )) == -1) {
                PyErr_SetString(PyExc_TypeError, "Need a file!");
                return NULL;
            }
            arg2 = fp;
        }else arg2 = PyFile_AsFile(obj1);
    }
    if (arg1) (arg1)->f = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FP_f_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::FP *arg1 = (simdata::FP *) 0 ;
    FILE *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FP_f_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__FP,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (FILE *) ((arg1)->f);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_FILE, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FP_name_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::FP *arg1 = (simdata::FP *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FP_name_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__FP,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->name = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FP_name_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::FP *arg1 = (simdata::FP *) 0 ;
    std::string *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FP_name_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__FP,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (std::string *)& ((arg1)->name);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FP_mode_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::FP *arg1 = (simdata::FP *) 0 ;
    std::string *arg2 = (std::string *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FP_mode_set",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__FP,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg1) (arg1)->mode = *arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FP_mode_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::FP *arg1 = (simdata::FP *) 0 ;
    std::string *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FP_mode_get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__FP,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (std::string *)& ((arg1)->mode);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__string, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FP(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::FP *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_FP")) goto fail;
    {
        try {
            result = (simdata::FP *)new simdata::FP();
            
        }catch (simdata::PythonException &e) {
            printf("SWIG: passing Python exception back\n");
            return NULL;
        }catch (...) {
            printf("SWIG: passing C++ exception back\n");
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__FP, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_FP(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::FP *arg1 = (simdata::FP *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_FP",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__FP,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
            
        }catch (simdata::PythonException &e) {
            printf("SWIG: passing Python exception back\n");
            return NULL;
        }catch (...) {
            printf("SWIG: passing C++ exception back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * FP_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__FP, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_DataArchive(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    int arg2 ;
    simdata::DataArchive *result;
    
    if(!PyArg_ParseTuple(args,(char *)"si:new_DataArchive",&arg1,&arg2)) goto fail;
    {
        try {
            result = (simdata::DataArchive *)new simdata::DataArchive((char const *)arg1,arg2);
            
        }catch (simdata::PythonException &e) {
            printf("SWIG: passing Python exception back\n");
            return NULL;
        }catch (...) {
            printf("SWIG: passing C++ exception back\n");
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__DataArchive, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_DataArchive(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::DataArchive *arg1 = (simdata::DataArchive *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_DataArchive",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__DataArchive,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
            
        }catch (simdata::PythonException &e) {
            printf("SWIG: passing Python exception back\n");
            return NULL;
        }catch (...) {
            printf("SWIG: passing C++ exception back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataArchive__addEntry(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::DataArchive *arg1 = (simdata::DataArchive *) 0 ;
    int arg2 ;
    int arg3 ;
    simdata::hasht arg4 ;
    char *arg5 ;
    simdata::hasht *argp4 ;
    PyObject * obj0  = 0 ;
    PyObject * obj3  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiiOs:DataArchive__addEntry",&obj0,&arg2,&arg3,&obj3,&arg5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__DataArchive,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **) &argp4, SWIGTYPE_p_simdata__hasht,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg4 = *argp4; 
    {
        try {
            (arg1)->_addEntry(arg2,arg3,arg4,(char const *)arg5);
            
        }catch (simdata::PythonException &e) {
            printf("SWIG: passing Python exception back\n");
            return NULL;
        }catch (...) {
            printf("SWIG: passing C++ exception back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataArchive_addObject(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::DataArchive *arg1 = (simdata::DataArchive *) 0 ;
    simdata::Object *arg2 = 0 ;
    char *arg3 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOs:DataArchive_addObject",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__DataArchive,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Object,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->addObject(*arg2,(char const *)arg3);
            
        }catch (simdata::PythonException &e) {
            printf("SWIG: passing Python exception back\n");
            return NULL;
        }catch (...) {
            printf("SWIG: passing C++ exception back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataArchive_close(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::DataArchive *arg1 = (simdata::DataArchive *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DataArchive_close",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__DataArchive,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->close();
            
        }catch (simdata::PythonException &e) {
            printf("SWIG: passing Python exception back\n");
            return NULL;
        }catch (...) {
            printf("SWIG: passing C++ exception back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataArchive_isClosed(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::DataArchive *arg1 = (simdata::DataArchive *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DataArchive_isClosed",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__DataArchive,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (bool)(arg1)->isClosed();
            
        }catch (simdata::PythonException &e) {
            printf("SWIG: passing Python exception back\n");
            return NULL;
        }catch (...) {
            printf("SWIG: passing C++ exception back\n");
            return NULL;
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataArchive_isWrite(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::DataArchive *arg1 = (simdata::DataArchive *) 0 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DataArchive_isWrite",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__DataArchive,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (bool)(arg1)->isWrite();
            
        }catch (simdata::PythonException &e) {
            printf("SWIG: passing Python exception back\n");
            return NULL;
        }catch (...) {
            printf("SWIG: passing C++ exception back\n");
            return NULL;
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataArchive_setDefault(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::DataArchive *arg1 = (simdata::DataArchive *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DataArchive_setDefault",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__DataArchive,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->setDefault();
            
        }catch (simdata::PythonException &e) {
            printf("SWIG: passing Python exception back\n");
            return NULL;
        }catch (...) {
            printf("SWIG: passing C++ exception back\n");
            return NULL;
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataArchive_getObject__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::DataArchive *arg1 = (simdata::DataArchive *) 0 ;
    char *arg2 ;
    simdata::PathPointerBase result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:DataArchive_getObject",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__DataArchive,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (arg1)->getObject((char const *)arg2);
            
        }catch (simdata::PythonException &e) {
            printf("SWIG: passing Python exception back\n");
            return NULL;
        }catch (...) {
            printf("SWIG: passing C++ exception back\n");
            return NULL;
        }
    }
    {
        simdata::PathPointerBase * resultptr;
        resultptr = new simdata::PathPointerBase((simdata::PathPointerBase &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__PathPointerBase, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataArchive_getObject__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::DataArchive *arg1 = (simdata::DataArchive *) 0 ;
    simdata::Path *arg2 = 0 ;
    char *arg3 = (char *) 0 ;
    simdata::PathPointerBase result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|s:DataArchive_getObject",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__DataArchive,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Path,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (arg1)->getObject((simdata::Path const &)*arg2,(char const *)arg3);
            
        }catch (simdata::PythonException &e) {
            printf("SWIG: passing Python exception back\n");
            return NULL;
        }catch (...) {
            printf("SWIG: passing C++ exception back\n");
            return NULL;
        }
    }
    {
        simdata::PathPointerBase * resultptr;
        resultptr = new simdata::PathPointerBase((simdata::PathPointerBase &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__PathPointerBase, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataArchive_getObject(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__DataArchive, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__Path, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_DataArchive_getObject__SWIG_1(self,args);
                }
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_DataArchive_getObject__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__DataArchive, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_DataArchive_getObject__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'DataArchive_getObject'");
    return NULL;
}


static PyObject *_wrap_DataArchive__getOffset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::DataArchive *arg1 = (simdata::DataArchive *) 0 ;
    long result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DataArchive__getOffset",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__DataArchive,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (long)(arg1)->_getOffset();
            
        }catch (simdata::PythonException &e) {
            printf("SWIG: passing Python exception back\n");
            return NULL;
        }catch (...) {
            printf("SWIG: passing C++ exception back\n");
            return NULL;
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataArchive__filePointer(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::DataArchive *arg1 = (simdata::DataArchive *) 0 ;
    simdata::FP result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DataArchive__filePointer",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__DataArchive,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (arg1)->_filePointer();
            
        }catch (simdata::PythonException &e) {
            printf("SWIG: passing Python exception back\n");
            return NULL;
        }catch (...) {
            printf("SWIG: passing C++ exception back\n");
            return NULL;
        }
    }
    {
        simdata::FP * resultptr;
        resultptr = new simdata::FP((simdata::FP &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__FP, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DataArchive__lookupPath(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::DataArchive *arg1 = (simdata::DataArchive *) 0 ;
    simdata::Path *arg2 = 0 ;
    char *arg3 = (char *) 0 ;
    simdata::TableEntry *result;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|s:DataArchive__lookupPath",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__DataArchive,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Path,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            {
                simdata::TableEntry const &_result_ref = (arg1)->_lookupPath((simdata::Path const &)*arg2,(char const *)arg3);
                result = (simdata::TableEntry *) &_result_ref;
            }
            
        }catch (simdata::PythonException &e) {
            printf("SWIG: passing Python exception back\n");
            return NULL;
        }catch (...) {
            printf("SWIG: passing C++ exception back\n");
            return NULL;
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__TableEntry, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DataArchive_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__DataArchive, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_g_defaultArchive_set(PyObject *_val) {
    {
        void *temp;
        if ((SWIG_ConvertPtr(_val,(void **) &temp, SWIGTYPE_p_simdata__DataArchive, SWIG_POINTER_EXCEPTION | SWIG_POINTER_DISOWN)) == -1) {
            PyErr_SetString(PyExc_TypeError, "C variable 'simdata::g_defaultArchive (simdata::DataArchive *)'");
            return 1;
        }
        simdata::g_defaultArchive = (simdata::DataArchive *) temp;
    }
    return 0;
}


static PyObject *_wrap_g_defaultArchive_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) simdata::g_defaultArchive, SWIGTYPE_p_simdata__DataArchive, 0);
    return pyobj;
}


static PyObject *_wrap_new_InterfaceProxy__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterfaceProxy *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_InterfaceProxy")) goto fail;
    {
        try {
            result = (simdata::InterfaceProxy *)new simdata::InterfaceProxy();
            
        }catch (simdata::TypeMismatch &e) {
            e.clear();
            SWIG_exception(SWIG_TypeError, e.getMessage().c_str());
        }catch (simdata::InterfaceError &e) {
            e.clear();
            SWIG_exception(SWIG_SyntaxError, e.getMessage().c_str());
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__InterfaceProxy, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_InterfaceProxy__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    simdata::hasht arg2 ;
    simdata::InterfaceProxy *result;
    simdata::hasht *argp2 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"sO:new_InterfaceProxy",&arg1,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_simdata__hasht,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        try {
            result = (simdata::InterfaceProxy *)new simdata::InterfaceProxy((char const *)arg1,arg2);
            
        }catch (simdata::TypeMismatch &e) {
            e.clear();
            SWIG_exception(SWIG_TypeError, e.getMessage().c_str());
        }catch (simdata::InterfaceError &e) {
            e.clear();
            SWIG_exception(SWIG_SyntaxError, e.getMessage().c_str());
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__InterfaceProxy, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_InterfaceProxy(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_InterfaceProxy__SWIG_0(self,args);
    }
    if (argc == 2) {
        int _v;
        {
            _v = PyString_Check(argv[0]) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__hasht, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_new_InterfaceProxy__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_InterfaceProxy'");
    return NULL;
}


static PyObject *_wrap_delete_InterfaceProxy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterfaceProxy *arg1 = (simdata::InterfaceProxy *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_InterfaceProxy",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterfaceProxy,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
            
        }catch (simdata::TypeMismatch &e) {
            e.clear();
            SWIG_exception(SWIG_TypeError, e.getMessage().c_str());
        }catch (simdata::InterfaceError &e) {
            e.clear();
            SWIG_exception(SWIG_SyntaxError, e.getMessage().c_str());
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InterfaceProxy_createObject(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterfaceProxy *arg1 = (simdata::InterfaceProxy *) 0 ;
    simdata::Object *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:InterfaceProxy_createObject",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterfaceProxy,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (simdata::Object *)((simdata::InterfaceProxy const *)arg1)->createObject();
            
        }catch (simdata::TypeMismatch &e) {
            e.clear();
            SWIG_exception(SWIG_TypeError, e.getMessage().c_str());
        }catch (simdata::InterfaceError &e) {
            e.clear();
            SWIG_exception(SWIG_SyntaxError, e.getMessage().c_str());
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__Object, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InterfaceProxy_set_enum(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterfaceProxy *arg1 = (simdata::InterfaceProxy *) 0 ;
    simdata::Object *arg2 = (simdata::Object *) 0 ;
    char *arg3 ;
    char *arg4 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOss:InterfaceProxy_set_enum",&obj0,&obj1,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterfaceProxy,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Object,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->set_enum(arg2,(char const *)arg3,(char const *)arg4);
            
        }catch (simdata::TypeMismatch &e) {
            e.clear();
            SWIG_exception(SWIG_TypeError, e.getMessage().c_str());
        }catch (simdata::InterfaceError &e) {
            e.clear();
            SWIG_exception(SWIG_SyntaxError, e.getMessage().c_str());
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InterfaceProxy_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterfaceProxy *arg1 = (simdata::InterfaceProxy *) 0 ;
    simdata::Object *arg2 = (simdata::Object *) 0 ;
    char *arg3 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOs:InterfaceProxy_clear",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterfaceProxy,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Object,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->clear(arg2,(char const *)arg3);
            
        }catch (simdata::TypeMismatch &e) {
            e.clear();
            SWIG_exception(SWIG_TypeError, e.getMessage().c_str());
        }catch (simdata::InterfaceError &e) {
            e.clear();
            SWIG_exception(SWIG_SyntaxError, e.getMessage().c_str());
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InterfaceProxy_variableExists(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterfaceProxy *arg1 = (simdata::InterfaceProxy *) 0 ;
    char *arg2 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:InterfaceProxy_variableExists",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterfaceProxy,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (bool)((simdata::InterfaceProxy const *)arg1)->variableExists((char const *)arg2);
            
        }catch (simdata::TypeMismatch &e) {
            e.clear();
            SWIG_exception(SWIG_TypeError, e.getMessage().c_str());
        }catch (simdata::InterfaceError &e) {
            e.clear();
            SWIG_exception(SWIG_SyntaxError, e.getMessage().c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InterfaceProxy_variableRequired(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterfaceProxy *arg1 = (simdata::InterfaceProxy *) 0 ;
    char *arg2 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:InterfaceProxy_variableRequired",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterfaceProxy,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (bool)((simdata::InterfaceProxy const *)arg1)->variableRequired((char const *)arg2);
            
        }catch (simdata::TypeMismatch &e) {
            e.clear();
            SWIG_exception(SWIG_TypeError, e.getMessage().c_str());
        }catch (simdata::InterfaceError &e) {
            e.clear();
            SWIG_exception(SWIG_SyntaxError, e.getMessage().c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InterfaceProxy_pack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterfaceProxy *arg1 = (simdata::InterfaceProxy *) 0 ;
    simdata::Object *arg2 = (simdata::Object *) 0 ;
    simdata::Packer *arg3 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:InterfaceProxy_pack",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterfaceProxy,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Object,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_simdata__Packer,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            ((simdata::InterfaceProxy const *)arg1)->pack(arg2,*arg3);
            
        }catch (simdata::TypeMismatch &e) {
            e.clear();
            SWIG_exception(SWIG_TypeError, e.getMessage().c_str());
        }catch (simdata::InterfaceError &e) {
            e.clear();
            SWIG_exception(SWIG_SyntaxError, e.getMessage().c_str());
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InterfaceProxy_unpack(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterfaceProxy *arg1 = (simdata::InterfaceProxy *) 0 ;
    simdata::Object *arg2 = (simdata::Object *) 0 ;
    simdata::UnPacker *arg3 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj2  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:InterfaceProxy_unpack",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterfaceProxy,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Object,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &arg3, SWIGTYPE_p_simdata__UnPacker,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            ((simdata::InterfaceProxy const *)arg1)->unpack(arg2,*arg3);
            
        }catch (simdata::TypeMismatch &e) {
            e.clear();
            SWIG_exception(SWIG_TypeError, e.getMessage().c_str());
        }catch (simdata::InterfaceError &e) {
            e.clear();
            SWIG_exception(SWIG_SyntaxError, e.getMessage().c_str());
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InterfaceProxy_getClassHash(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterfaceProxy *arg1 = (simdata::InterfaceProxy *) 0 ;
    simdata::hasht result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:InterfaceProxy_getClassHash",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterfaceProxy,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = ((simdata::InterfaceProxy const *)arg1)->getClassHash();
            
        }catch (simdata::TypeMismatch &e) {
            e.clear();
            SWIG_exception(SWIG_TypeError, e.getMessage().c_str());
        }catch (simdata::InterfaceError &e) {
            e.clear();
            SWIG_exception(SWIG_SyntaxError, e.getMessage().c_str());
        }
    }
    {
        simdata::hasht * resultptr;
        resultptr = new simdata::hasht((simdata::hasht &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_simdata__hasht, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InterfaceProxy_getClassName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterfaceProxy *arg1 = (simdata::InterfaceProxy *) 0 ;
    char *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:InterfaceProxy_getClassName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterfaceProxy,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (char *)((simdata::InterfaceProxy const *)arg1)->getClassName();
            
        }catch (simdata::TypeMismatch &e) {
            e.clear();
            SWIG_exception(SWIG_TypeError, e.getMessage().c_str());
        }catch (simdata::InterfaceError &e) {
            e.clear();
            SWIG_exception(SWIG_SyntaxError, e.getMessage().c_str());
        }
    }
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InterfaceProxy_getVariableNames(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterfaceProxy *arg1 = (simdata::InterfaceProxy *) 0 ;
    SwigValueWrapper< std::vector<std::string > > result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:InterfaceProxy_getVariableNames",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterfaceProxy,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = ((simdata::InterfaceProxy const *)arg1)->getVariableNames();
            
        }catch (simdata::TypeMismatch &e) {
            e.clear();
            SWIG_exception(SWIG_TypeError, e.getMessage().c_str());
        }catch (simdata::InterfaceError &e) {
            e.clear();
            SWIG_exception(SWIG_SyntaxError, e.getMessage().c_str());
        }
    }
    {
        resultobj = PyTuple_New((&result)->size());
        for (unsigned int i=0; i<(&result)->size(); i++)
        PyTuple_SetItem(resultobj,i,
        SwigString_FromString(((std::vector<std::string > &)result)[i]));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InterfaceProxy_getRequiredNames(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterfaceProxy *arg1 = (simdata::InterfaceProxy *) 0 ;
    SwigValueWrapper< std::vector<std::string > > result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:InterfaceProxy_getRequiredNames",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterfaceProxy,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = ((simdata::InterfaceProxy const *)arg1)->getRequiredNames();
            
        }catch (simdata::TypeMismatch &e) {
            e.clear();
            SWIG_exception(SWIG_TypeError, e.getMessage().c_str());
        }catch (simdata::InterfaceError &e) {
            e.clear();
            SWIG_exception(SWIG_SyntaxError, e.getMessage().c_str());
        }
    }
    {
        resultobj = PyTuple_New((&result)->size());
        for (unsigned int i=0; i<(&result)->size(); i++)
        PyTuple_SetItem(resultobj,i,
        SwigString_FromString(((std::vector<std::string > &)result)[i]));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InterfaceProxy_set__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterfaceProxy *arg1 = (simdata::InterfaceProxy *) 0 ;
    simdata::Object *arg2 = (simdata::Object *) 0 ;
    char *arg3 ;
    int arg4 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOsi:InterfaceProxy_set",&obj0,&obj1,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterfaceProxy,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Object,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            simdata_InterfaceProxy_set__SWIG_0(arg1,arg2,(char const *)arg3,arg4);
            
        }catch (simdata::TypeMismatch &e) {
            e.clear();
            SWIG_exception(SWIG_TypeError, e.getMessage().c_str());
        }catch (simdata::InterfaceError &e) {
            e.clear();
            SWIG_exception(SWIG_SyntaxError, e.getMessage().c_str());
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InterfaceProxy_set__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterfaceProxy *arg1 = (simdata::InterfaceProxy *) 0 ;
    simdata::Object *arg2 = (simdata::Object *) 0 ;
    char *arg3 ;
    double arg4 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOsd:InterfaceProxy_set",&obj0,&obj1,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterfaceProxy,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Object,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            simdata_InterfaceProxy_set__SWIG_1(arg1,arg2,(char const *)arg3,arg4);
            
        }catch (simdata::TypeMismatch &e) {
            e.clear();
            SWIG_exception(SWIG_TypeError, e.getMessage().c_str());
        }catch (simdata::InterfaceError &e) {
            e.clear();
            SWIG_exception(SWIG_SyntaxError, e.getMessage().c_str());
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InterfaceProxy_set__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterfaceProxy *arg1 = (simdata::InterfaceProxy *) 0 ;
    simdata::Object *arg2 = (simdata::Object *) 0 ;
    char *arg3 ;
    char *arg4 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOss:InterfaceProxy_set",&obj0,&obj1,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterfaceProxy,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Object,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            simdata_InterfaceProxy_set__SWIG_2(arg1,arg2,(char const *)arg3,(char const *)arg4);
            
        }catch (simdata::TypeMismatch &e) {
            e.clear();
            SWIG_exception(SWIG_TypeError, e.getMessage().c_str());
        }catch (simdata::InterfaceError &e) {
            e.clear();
            SWIG_exception(SWIG_SyntaxError, e.getMessage().c_str());
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InterfaceProxy_set__SWIG_3(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterfaceProxy *arg1 = (simdata::InterfaceProxy *) 0 ;
    simdata::Object *arg2 = (simdata::Object *) 0 ;
    char *arg3 ;
    simdata::BaseType *arg4 = (simdata::BaseType *) 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj3  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOsO:InterfaceProxy_set",&obj0,&obj1,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterfaceProxy,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Object,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_simdata__BaseType,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            simdata_InterfaceProxy_set__SWIG_3(arg1,arg2,(char const *)arg3,arg4);
            
        }catch (simdata::TypeMismatch &e) {
            e.clear();
            SWIG_exception(SWIG_TypeError, e.getMessage().c_str());
        }catch (simdata::InterfaceError &e) {
            e.clear();
            SWIG_exception(SWIG_SyntaxError, e.getMessage().c_str());
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InterfaceProxy_set(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__InterfaceProxy, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__Object, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_simdata__BaseType, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        }else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_InterfaceProxy_set__SWIG_3(self,args);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__InterfaceProxy, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__Object, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_InterfaceProxy_set__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__InterfaceProxy, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__Object, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (PyFloat_Check(argv[3]) || PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_InterfaceProxy_set__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__InterfaceProxy, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__Object, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = PyString_Check(argv[3]) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_InterfaceProxy_set__SWIG_2(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'InterfaceProxy_set'");
    return NULL;
}


static PyObject *_wrap_InterfaceProxy_push_back(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterfaceProxy *arg1 = (simdata::InterfaceProxy *) 0 ;
    simdata::Object *arg2 = (simdata::Object *) 0 ;
    char *arg3 ;
    simdata::BaseType *arg4 = 0 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj3  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOsO:InterfaceProxy_push_back",&obj0,&obj1,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterfaceProxy,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_simdata__Object,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_simdata__BaseType,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            simdata_InterfaceProxy_push_back(arg1,arg2,(char const *)arg3,(simdata::BaseType const &)*arg4);
            
        }catch (simdata::TypeMismatch &e) {
            e.clear();
            SWIG_exception(SWIG_TypeError, e.getMessage().c_str());
        }catch (simdata::InterfaceError &e) {
            e.clear();
            SWIG_exception(SWIG_SyntaxError, e.getMessage().c_str());
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * InterfaceProxy_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__InterfaceProxy, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_InterfaceRegistry(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterfaceRegistry *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_InterfaceRegistry")) goto fail;
    {
        try {
            result = (simdata::InterfaceRegistry *)new simdata::InterfaceRegistry();
            
        }catch (simdata::TypeMismatch &e) {
            e.clear();
            SWIG_exception(SWIG_TypeError, e.getMessage().c_str());
        }catch (simdata::InterfaceError &e) {
            e.clear();
            SWIG_exception(SWIG_SyntaxError, e.getMessage().c_str());
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__InterfaceRegistry, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_InterfaceRegistry(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterfaceRegistry *arg1 = (simdata::InterfaceRegistry *) 0 ;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_InterfaceRegistry",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterfaceRegistry,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            delete arg1;
            
        }catch (simdata::TypeMismatch &e) {
            e.clear();
            SWIG_exception(SWIG_TypeError, e.getMessage().c_str());
        }catch (simdata::InterfaceError &e) {
            e.clear();
            SWIG_exception(SWIG_SyntaxError, e.getMessage().c_str());
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InterfaceRegistry_getInterface__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterfaceRegistry *arg1 = (simdata::InterfaceRegistry *) 0 ;
    char *arg2 ;
    simdata::InterfaceProxy *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:InterfaceRegistry_getInterface",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterfaceRegistry,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (simdata::InterfaceProxy *)(arg1)->getInterface((char const *)arg2);
            
        }catch (simdata::TypeMismatch &e) {
            e.clear();
            SWIG_exception(SWIG_TypeError, e.getMessage().c_str());
        }catch (simdata::InterfaceError &e) {
            e.clear();
            SWIG_exception(SWIG_SyntaxError, e.getMessage().c_str());
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__InterfaceProxy, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InterfaceRegistry_getInterface__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterfaceRegistry *arg1 = (simdata::InterfaceRegistry *) 0 ;
    simdata::hasht arg2 ;
    simdata::InterfaceProxy *result;
    simdata::hasht *argp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:InterfaceRegistry_getInterface",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterfaceRegistry,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_simdata__hasht,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        try {
            result = (simdata::InterfaceProxy *)(arg1)->getInterface(arg2);
            
        }catch (simdata::TypeMismatch &e) {
            e.clear();
            SWIG_exception(SWIG_TypeError, e.getMessage().c_str());
        }catch (simdata::InterfaceError &e) {
            e.clear();
            SWIG_exception(SWIG_SyntaxError, e.getMessage().c_str());
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_simdata__InterfaceProxy, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InterfaceRegistry_getInterface(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__InterfaceRegistry, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__hasht, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_InterfaceRegistry_getInterface__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__InterfaceRegistry, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_InterfaceRegistry_getInterface__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'InterfaceRegistry_getInterface'");
    return NULL;
}


static PyObject *_wrap_InterfaceRegistry_hasInterface__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterfaceRegistry *arg1 = (simdata::InterfaceRegistry *) 0 ;
    char *arg2 ;
    bool result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:InterfaceRegistry_hasInterface",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterfaceRegistry,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = (bool)(arg1)->hasInterface((char const *)arg2);
            
        }catch (simdata::TypeMismatch &e) {
            e.clear();
            SWIG_exception(SWIG_TypeError, e.getMessage().c_str());
        }catch (simdata::InterfaceError &e) {
            e.clear();
            SWIG_exception(SWIG_SyntaxError, e.getMessage().c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InterfaceRegistry_hasInterface__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterfaceRegistry *arg1 = (simdata::InterfaceRegistry *) 0 ;
    simdata::hasht arg2 ;
    bool result;
    simdata::hasht *argp2 ;
    PyObject * obj0  = 0 ;
    PyObject * obj1  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:InterfaceRegistry_hasInterface",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterfaceRegistry,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_simdata__hasht,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        try {
            result = (bool)(arg1)->hasInterface(arg2);
            
        }catch (simdata::TypeMismatch &e) {
            e.clear();
            SWIG_exception(SWIG_TypeError, e.getMessage().c_str());
        }catch (simdata::InterfaceError &e) {
            e.clear();
            SWIG_exception(SWIG_SyntaxError, e.getMessage().c_str());
        }
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InterfaceRegistry_hasInterface(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__InterfaceRegistry, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_simdata__hasht, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                }else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_InterfaceRegistry_hasInterface__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_simdata__InterfaceRegistry, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            }else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_InterfaceRegistry_hasInterface__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'InterfaceRegistry_hasInterface'");
    return NULL;
}


static PyObject *_wrap_InterfaceRegistry_getInterfaceNames(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterfaceRegistry *arg1 = (simdata::InterfaceRegistry *) 0 ;
    SwigValueWrapper< std::vector<std::string > > result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:InterfaceRegistry_getInterfaceNames",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterfaceRegistry,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            result = ((simdata::InterfaceRegistry const *)arg1)->getInterfaceNames();
            
        }catch (simdata::TypeMismatch &e) {
            e.clear();
            SWIG_exception(SWIG_TypeError, e.getMessage().c_str());
        }catch (simdata::InterfaceError &e) {
            e.clear();
            SWIG_exception(SWIG_SyntaxError, e.getMessage().c_str());
        }
    }
    {
        resultobj = PyTuple_New((&result)->size());
        for (unsigned int i=0; i<(&result)->size(); i++)
        PyTuple_SetItem(resultobj,i,
        SwigString_FromString(((std::vector<std::string > &)result)[i]));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InterfaceRegistry_getInterfaces(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterfaceRegistry *arg1 = (simdata::InterfaceRegistry *) 0 ;
    std::vector<simdata::InterfaceProxy * > *result;
    PyObject * obj0  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:InterfaceRegistry_getInterfaces",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterfaceRegistry,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            {
                std::vector<simdata::InterfaceProxy * > const &_result_ref = ((simdata::InterfaceRegistry const *)arg1)->getInterfaces();
                result = (std::vector<simdata::InterfaceProxy * > *) &_result_ref;
            }
            
        }catch (simdata::TypeMismatch &e) {
            e.clear();
            SWIG_exception(SWIG_TypeError, e.getMessage().c_str());
        }catch (simdata::InterfaceError &e) {
            e.clear();
            SWIG_exception(SWIG_SyntaxError, e.getMessage().c_str());
        }
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_std__vectorTsimdata__InterfaceProxy_p_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_InterfaceRegistry_addInterface(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    simdata::InterfaceRegistry *arg1 = (simdata::InterfaceRegistry *) 0 ;
    char *arg2 ;
    simdata::hasht arg3 ;
    simdata::InterfaceProxy *arg4 = (simdata::InterfaceProxy *) 0 ;
    simdata::hasht *argp3 ;
    PyObject * obj0  = 0 ;
    PyObject * obj2  = 0 ;
    PyObject * obj3  = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OsOO:InterfaceRegistry_addInterface",&obj0,&arg2,&obj2,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_simdata__InterfaceRegistry,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &argp3, SWIGTYPE_p_simdata__hasht,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg3 = *argp3; 
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_simdata__InterfaceProxy,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        try {
            (arg1)->addInterface((char const *)arg2,arg3,arg4);
            
        }catch (simdata::TypeMismatch &e) {
            e.clear();
            SWIG_exception(SWIG_TypeError, e.getMessage().c_str());
        }catch (simdata::InterfaceError &e) {
            e.clear();
            SWIG_exception(SWIG_SyntaxError, e.getMessage().c_str());
        }
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * InterfaceRegistry_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_simdata__InterfaceRegistry, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_g_InterfaceRegistry_set(PyObject *_val) {
    {
        simdata::InterfaceRegistry * temp;
        if ((SWIG_ConvertPtr(_val, (void **) &temp, SWIGTYPE_p_simdata__InterfaceRegistry, SWIG_POINTER_EXCEPTION)) == -1) {
            PyErr_SetString(PyExc_TypeError, "C variable 'simdata::g_InterfaceRegistry (simdata::InterfaceRegistry)'");
            return 1;
        }
        simdata::g_InterfaceRegistry = *((simdata::InterfaceRegistry *) temp);
    }
    return 0;
}


static PyObject *_wrap_g_InterfaceRegistry_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &simdata::g_InterfaceRegistry, SWIGTYPE_p_simdata__InterfaceRegistry, 0);
    return pyobj;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"new_Exception", _wrap_new_Exception, METH_VARARGS },
	 { (char *)"delete_Exception", _wrap_delete_Exception, METH_VARARGS },
	 { (char *)"Exception_getMessage", _wrap_Exception_getMessage, METH_VARARGS },
	 { (char *)"Exception_getType", _wrap_Exception_getType, METH_VARARGS },
	 { (char *)"Exception_appendMessage", _wrap_Exception_appendMessage, METH_VARARGS },
	 { (char *)"Exception_clear", _wrap_Exception_clear, METH_VARARGS },
	 { (char *)"Exception_details", _wrap_Exception_details, METH_VARARGS },
	 { (char *)"Exception_swigregister", Exception_swigregister, METH_VARARGS },
	 { (char *)"new_PythonException", _wrap_new_PythonException, METH_VARARGS },
	 { (char *)"delete_PythonException", _wrap_delete_PythonException, METH_VARARGS },
	 { (char *)"PythonException_swigregister", PythonException_swigregister, METH_VARARGS },
	 { (char *)"new_HashT", _wrap_new_HashT, METH_VARARGS },
	 { (char *)"HashT___eq__", _wrap_HashT___eq__, METH_VARARGS },
	 { (char *)"HashT___ne__", _wrap_HashT___ne__, METH_VARARGS },
	 { (char *)"delete_HashT", _wrap_delete_HashT, METH_VARARGS },
	 { (char *)"HashT_swigregister", HashT_swigregister, METH_VARARGS },
	 { (char *)"hash_string", _wrap_hash_string, METH_VARARGS },
	 { (char *)"new_ParseException", _wrap_new_ParseException, METH_VARARGS },
	 { (char *)"delete_ParseException", _wrap_delete_ParseException, METH_VARARGS },
	 { (char *)"ParseException_swigregister", ParseException_swigregister, METH_VARARGS },
	 { (char *)"BaseType_pack", _wrap_BaseType_pack, METH_VARARGS },
	 { (char *)"BaseType_unpack", _wrap_BaseType_unpack, METH_VARARGS },
	 { (char *)"BaseType_parseXML", _wrap_BaseType_parseXML, METH_VARARGS },
	 { (char *)"BaseType_convertXML", _wrap_BaseType_convertXML, METH_VARARGS },
	 { (char *)"BaseType_asString", _wrap_BaseType_asString, METH_VARARGS },
	 { (char *)"new_BaseType", _wrap_new_BaseType, METH_VARARGS },
	 { (char *)"delete_BaseType", _wrap_delete_BaseType, METH_VARARGS },
	 { (char *)"BaseType_swigregister", BaseType_swigregister, METH_VARARGS },
	 { (char *)"__lshift__", _wrap___lshift__, METH_VARARGS },
	 { (char *)"delete_Object", _wrap_delete_Object, METH_VARARGS },
	 { (char *)"Object__new", _wrap_Object__new, METH_VARARGS },
	 { (char *)"new_Object", _wrap_new_Object, METH_VARARGS },
	 { (char *)"Object__getClassName", _wrap_Object__getClassName, METH_VARARGS },
	 { (char *)"Object_getClassName", _wrap_Object_getClassName, METH_VARARGS },
	 { (char *)"Object__getClassHash", _wrap_Object__getClassHash, METH_VARARGS },
	 { (char *)"Object_getClassHash", _wrap_Object_getClassHash, METH_VARARGS },
	 { (char *)"Object__getClassVersion", _wrap_Object__getClassVersion, METH_VARARGS },
	 { (char *)"Object_getClassVersion", _wrap_Object_getClassVersion, METH_VARARGS },
	 { (char *)"Object_pack", _wrap_Object_pack, METH_VARARGS },
	 { (char *)"Object_unpack", _wrap_Object_unpack, METH_VARARGS },
	 { (char *)"Object_setStatic", _wrap_Object_setStatic, METH_VARARGS },
	 { (char *)"Object_isStatic", _wrap_Object_isStatic, METH_VARARGS },
	 { (char *)"Object_ref", _wrap_Object_ref, METH_VARARGS },
	 { (char *)"Object_deref", _wrap_Object_deref, METH_VARARGS },
	 { (char *)"Object_getCount", _wrap_Object_getCount, METH_VARARGS },
	 { (char *)"Object___repr__", _wrap_Object___repr__, METH_VARARGS },
	 { (char *)"Object_getPath", _wrap_Object_getPath, METH_VARARGS },
	 { (char *)"Object_swigregister", Object_swigregister, METH_VARARGS },
	 { (char *)"new_Packer", _wrap_new_Packer, METH_VARARGS },
	 { (char *)"Packer_resetCount", _wrap_Packer_resetCount, METH_VARARGS },
	 { (char *)"Packer_getCount", _wrap_Packer_getCount, METH_VARARGS },
	 { (char *)"Packer_pack", _wrap_Packer_pack, METH_VARARGS },
	 { (char *)"Packer_pack_double", _wrap_Packer_pack_double, METH_VARARGS },
	 { (char *)"Packer_pack_float", _wrap_Packer_pack_float, METH_VARARGS },
	 { (char *)"Packer_pack_int", _wrap_Packer_pack_int, METH_VARARGS },
	 { (char *)"Packer_pack_hasht", _wrap_Packer_pack_hasht, METH_VARARGS },
	 { (char *)"Packer_pack_string", _wrap_Packer_pack_string, METH_VARARGS },
	 { (char *)"Packer_pack_basetype", _wrap_Packer_pack_basetype, METH_VARARGS },
	 { (char *)"delete_Packer", _wrap_delete_Packer, METH_VARARGS },
	 { (char *)"Packer_swigregister", Packer_swigregister, METH_VARARGS },
	 { (char *)"UnPacker__getArchive", _wrap_UnPacker__getArchive, METH_VARARGS },
	 { (char *)"new_UnPacker", _wrap_new_UnPacker, METH_VARARGS },
	 { (char *)"UnPacker_isComplete", _wrap_UnPacker_isComplete, METH_VARARGS },
	 { (char *)"UnPacker_unpack", _wrap_UnPacker_unpack, METH_VARARGS },
	 { (char *)"UnPacker_unpack_packable", _wrap_UnPacker_unpack_packable, METH_VARARGS },
	 { (char *)"UnPacker_unpack_double", _wrap_UnPacker_unpack_double, METH_VARARGS },
	 { (char *)"UnPacker_unpack_float", _wrap_UnPacker_unpack_float, METH_VARARGS },
	 { (char *)"UnPacker_unpack_int", _wrap_UnPacker_unpack_int, METH_VARARGS },
	 { (char *)"UnPacker_unpack_hasht", _wrap_UnPacker_unpack_hasht, METH_VARARGS },
	 { (char *)"UnPacker_unpack_string", _wrap_UnPacker_unpack_string, METH_VARARGS },
	 { (char *)"UnPacker_unpack_basetype", _wrap_UnPacker_unpack_basetype, METH_VARARGS },
	 { (char *)"delete_UnPacker", _wrap_delete_UnPacker, METH_VARARGS },
	 { (char *)"UnPacker_swigregister", UnPacker_swigregister, METH_VARARGS },
	 { (char *)"new_ObjectTypeMismatch", _wrap_new_ObjectTypeMismatch, METH_VARARGS },
	 { (char *)"delete_ObjectTypeMismatch", _wrap_delete_ObjectTypeMismatch, METH_VARARGS },
	 { (char *)"ObjectTypeMismatch_swigregister", ObjectTypeMismatch_swigregister, METH_VARARGS },
	 { (char *)"new_Path", _wrap_new_Path, METH_VARARGS },
	 { (char *)"delete_Path", _wrap_delete_Path, METH_VARARGS },
	 { (char *)"Path_setPath", _wrap_Path_setPath, METH_VARARGS },
	 { (char *)"Path_setNone", _wrap_Path_setNone, METH_VARARGS },
	 { (char *)"Path_getPath", _wrap_Path_getPath, METH_VARARGS },
	 { (char *)"Path_pack", _wrap_Path_pack, METH_VARARGS },
	 { (char *)"Path_unpack", _wrap_Path_unpack, METH_VARARGS },
	 { (char *)"Path_isNone", _wrap_Path_isNone, METH_VARARGS },
	 { (char *)"Path___eq__", _wrap_Path___eq__, METH_VARARGS },
	 { (char *)"Path___repr__", _wrap_Path___repr__, METH_VARARGS },
	 { (char *)"Path_swigregister", Path_swigregister, METH_VARARGS },
	 { (char *)"PointerBase___ne__", _wrap_PointerBase___ne__, METH_VARARGS },
	 { (char *)"delete_PointerBase", _wrap_delete_PointerBase, METH_VARARGS },
	 { (char *)"PointerBase_unique", _wrap_PointerBase_unique, METH_VARARGS },
	 { (char *)"new_PointerBase", _wrap_new_PointerBase, METH_VARARGS },
	 { (char *)"PointerBase_isNull", _wrap_PointerBase_isNull, METH_VARARGS },
	 { (char *)"PointerBase___not__", _wrap_PointerBase___not__, METH_VARARGS },
	 { (char *)"PointerBase_valid", _wrap_PointerBase_valid, METH_VARARGS },
	 { (char *)"PointerBase___eq__", _wrap_PointerBase___eq__, METH_VARARGS },
	 { (char *)"PointerBase___get__", _wrap_PointerBase___get__, METH_VARARGS },
	 { (char *)"PointerBase_swigregister", PointerBase_swigregister, METH_VARARGS },
	 { (char *)"PathPointerBase___ne__", _wrap_PathPointerBase___ne__, METH_VARARGS },
	 { (char *)"delete_PathPointerBase", _wrap_delete_PathPointerBase, METH_VARARGS },
	 { (char *)"new_PathPointerBase", _wrap_new_PathPointerBase, METH_VARARGS },
	 { (char *)"PathPointerBase_unpack", _wrap_PathPointerBase_unpack, METH_VARARGS },
	 { (char *)"PathPointerBase___repr__", _wrap_PathPointerBase___repr__, METH_VARARGS },
	 { (char *)"PathPointerBase___eq__", _wrap_PathPointerBase___eq__, METH_VARARGS },
	 { (char *)"PathPointerBase_setNone", _wrap_PathPointerBase_setNone, METH_VARARGS },
	 { (char *)"PathPointerBase_setNull", _wrap_PathPointerBase_setNull, METH_VARARGS },
	 { (char *)"PathPointerBase_swigregister", PathPointerBase_swigregister, METH_VARARGS },
	 { (char *)"tstart", _wrap_tstart, METH_VARARGS },
	 { (char *)"tend", _wrap_tend, METH_VARARGS },
	 { (char *)"tval", _wrap_tval, METH_VARARGS },
	 { (char *)"get_realtime", _wrap_get_realtime, METH_VARARGS },
	 { (char *)"new_InvalidDate", _wrap_new_InvalidDate, METH_VARARGS },
	 { (char *)"delete_InvalidDate", _wrap_delete_InvalidDate, METH_VARARGS },
	 { (char *)"InvalidDate_swigregister", InvalidDate_swigregister, METH_VARARGS },
	 { (char *)"new_Date", _wrap_new_Date, METH_VARARGS },
	 { (char *)"Date_validYMD", _wrap_Date_validYMD, METH_VARARGS },
	 { (char *)"Date_isLeap", _wrap_Date_isLeap, METH_VARARGS },
	 { (char *)"Date_getWeekday", _wrap_Date_getWeekday, METH_VARARGS },
	 { (char *)"Date_getMonth", _wrap_Date_getMonth, METH_VARARGS },
	 { (char *)"Date_getDay", _wrap_Date_getDay, METH_VARARGS },
	 { (char *)"Date_getYear", _wrap_Date_getYear, METH_VARARGS },
	 { (char *)"Date_getJulian", _wrap_Date_getJulian, METH_VARARGS },
	 { (char *)"Date_getMonthName", _wrap_Date_getMonthName, METH_VARARGS },
	 { (char *)"Date_getMonthShortName", _wrap_Date_getMonthShortName, METH_VARARGS },
	 { (char *)"Date_getWeekdayName", _wrap_Date_getWeekdayName, METH_VARARGS },
	 { (char *)"Date_getWeekdayShortName", _wrap_Date_getWeekdayShortName, METH_VARARGS },
	 { (char *)"Date_setJulian", _wrap_Date_setJulian, METH_VARARGS },
	 { (char *)"Date_getDayOfYear", _wrap_Date_getDayOfYear, METH_VARARGS },
	 { (char *)"Date_getMondayWeekOfYear", _wrap_Date_getMondayWeekOfYear, METH_VARARGS },
	 { (char *)"Date_getSundayWeekOfYear", _wrap_Date_getSundayWeekOfYear, METH_VARARGS },
	 { (char *)"Date_isFirstOfMonth", _wrap_Date_isFirstOfMonth, METH_VARARGS },
	 { (char *)"Date_isLastOfMonth", _wrap_Date_isLastOfMonth, METH_VARARGS },
	 { (char *)"Date_addDays", _wrap_Date_addDays, METH_VARARGS },
	 { (char *)"Date_subtractDays", _wrap_Date_subtractDays, METH_VARARGS },
	 { (char *)"Date_addMonths", _wrap_Date_addMonths, METH_VARARGS },
	 { (char *)"Date_subtractMonths", _wrap_Date_subtractMonths, METH_VARARGS },
	 { (char *)"Date_addYears", _wrap_Date_addYears, METH_VARARGS },
	 { (char *)"Date_subtractYears", _wrap_Date_subtractYears, METH_VARARGS },
	 { (char *)"Date_getDaysInMonth", _wrap_Date_getDaysInMonth, METH_VARARGS },
	 { (char *)"Date_getWeeksInYear", _wrap_Date_getWeeksInYear, METH_VARARGS },
	 { (char *)"Date_getSundayWeeksInYear", _wrap_Date_getSundayWeeksInYear, METH_VARARGS },
	 { (char *)"Date_compare", _wrap_Date_compare, METH_VARARGS },
	 { (char *)"Date_convert", _wrap_Date_convert, METH_VARARGS },
	 { (char *)"Date_formatString", _wrap_Date_formatString, METH_VARARGS },
	 { (char *)"Date___repr__", _wrap_Date___repr__, METH_VARARGS },
	 { (char *)"delete_Date", _wrap_delete_Date, METH_VARARGS },
	 { (char *)"Date_swigregister", Date_swigregister, METH_VARARGS },
	 { (char *)"new_Zulu", _wrap_new_Zulu, METH_VARARGS },
	 { (char *)"Zulu_setTZ", _wrap_Zulu_setTZ, METH_VARARGS },
	 { (char *)"Zulu_getTZ", _wrap_Zulu_getTZ, METH_VARARGS },
	 { (char *)"Zulu_reduce", _wrap_Zulu_reduce, METH_VARARGS },
	 { (char *)"Zulu_getTime", _wrap_Zulu_getTime, METH_VARARGS },
	 { (char *)"Zulu_overflow", _wrap_Zulu_overflow, METH_VARARGS },
	 { (char *)"Zulu_getHour", _wrap_Zulu_getHour, METH_VARARGS },
	 { (char *)"Zulu_getMinute", _wrap_Zulu_getMinute, METH_VARARGS },
	 { (char *)"Zulu_getSecond", _wrap_Zulu_getSecond, METH_VARARGS },
	 { (char *)"Zulu_addTime", _wrap_Zulu_addTime, METH_VARARGS },
	 { (char *)"Zulu_setTime", _wrap_Zulu_setTime, METH_VARARGS },
	 { (char *)"Zulu_convert", _wrap_Zulu_convert, METH_VARARGS },
	 { (char *)"Zulu_formatString", _wrap_Zulu_formatString, METH_VARARGS },
	 { (char *)"Zulu___repr__", _wrap_Zulu___repr__, METH_VARARGS },
	 { (char *)"delete_Zulu", _wrap_delete_Zulu, METH_VARARGS },
	 { (char *)"Zulu_swigregister", Zulu_swigregister, METH_VARARGS },
	 { (char *)"new_DateZulu", _wrap_new_DateZulu, METH_VARARGS },
	 { (char *)"DateZulu_convert", _wrap_DateZulu_convert, METH_VARARGS },
	 { (char *)"DateZulu_formatString", _wrap_DateZulu_formatString, METH_VARARGS },
	 { (char *)"DateZulu___repr__", _wrap_DateZulu___repr__, METH_VARARGS },
	 { (char *)"DateZulu_addTime", _wrap_DateZulu_addTime, METH_VARARGS },
	 { (char *)"DateZulu_setTime", _wrap_DateZulu_setTime, METH_VARARGS },
	 { (char *)"DateZulu_getJulianDate", _wrap_DateZulu_getJulianDate, METH_VARARGS },
	 { (char *)"DateZulu_getAccurateMST", _wrap_DateZulu_getAccurateMST, METH_VARARGS },
	 { (char *)"DateZulu_getMST", _wrap_DateZulu_getMST, METH_VARARGS },
	 { (char *)"delete_DateZulu", _wrap_delete_DateZulu, METH_VARARGS },
	 { (char *)"DateZulu_swigregister", DateZulu_swigregister, METH_VARARGS },
	 { (char *)"new_SimDate", _wrap_new_SimDate, METH_VARARGS },
	 { (char *)"SimDate___repr__", _wrap_SimDate___repr__, METH_VARARGS },
	 { (char *)"SimDate_interval", _wrap_SimDate_interval, METH_VARARGS },
	 { (char *)"SimDate_getSystemTime", _wrap_SimDate_getSystemTime, METH_VARARGS },
	 { (char *)"SimDate_update", _wrap_SimDate_update, METH_VARARGS },
	 { (char *)"SimDate_setReferenceTime", _wrap_SimDate_setReferenceTime, METH_VARARGS },
	 { (char *)"SimDate_pause", _wrap_SimDate_pause, METH_VARARGS },
	 { (char *)"SimDate_unpause", _wrap_SimDate_unpause, METH_VARARGS },
	 { (char *)"SimDate_isPaused", _wrap_SimDate_isPaused, METH_VARARGS },
	 { (char *)"SimDate_pack", _wrap_SimDate_pack, METH_VARARGS },
	 { (char *)"SimDate_unpack", _wrap_SimDate_unpack, METH_VARARGS },
	 { (char *)"SimDate_parseXML", _wrap_SimDate_parseXML, METH_VARARGS },
	 { (char *)"delete_SimDate", _wrap_delete_SimDate, METH_VARARGS },
	 { (char *)"SimDate_swigregister", SimDate_swigregister, METH_VARARGS },
	 { (char *)"Vector3_x_set", _wrap_Vector3_x_set, METH_VARARGS },
	 { (char *)"Vector3_x_get", _wrap_Vector3_x_get, METH_VARARGS },
	 { (char *)"Vector3_y_set", _wrap_Vector3_y_set, METH_VARARGS },
	 { (char *)"Vector3_y_get", _wrap_Vector3_y_get, METH_VARARGS },
	 { (char *)"Vector3_z_set", _wrap_Vector3_z_set, METH_VARARGS },
	 { (char *)"Vector3_z_get", _wrap_Vector3_z_get, METH_VARARGS },
	 { (char *)"new_Vector3", _wrap_new_Vector3, METH_VARARGS },
	 { (char *)"Vector3___sub__", _wrap_Vector3___sub__, METH_VARARGS },
	 { (char *)"Vector3___add__", _wrap_Vector3___add__, METH_VARARGS },
	 { (char *)"Vector3___neg__", _wrap_Vector3___neg__, METH_VARARGS },
	 { (char *)"Vector3_Set", _wrap_Vector3_Set, METH_VARARGS },
	 { (char *)"Vector3_Length", _wrap_Vector3_Length, METH_VARARGS },
	 { (char *)"Vector3_LengthSquared", _wrap_Vector3_LengthSquared, METH_VARARGS },
	 { (char *)"Vector3_IsNull", _wrap_Vector3_IsNull, METH_VARARGS },
	 { (char *)"Vector3_Normalize", _wrap_Vector3_Normalize, METH_VARARGS },
	 { (char *)"Vector3_Unitize", _wrap_Vector3_Unitize, METH_VARARGS },
	 { (char *)"Vector3_Cross", _wrap_Vector3_Cross, METH_VARARGS },
	 { (char *)"Vector3_Dot", _wrap_Vector3_Dot, METH_VARARGS },
	 { (char *)"Vector3_GetElements", _wrap_Vector3_GetElements, METH_VARARGS },
	 { (char *)"Vector3_StarMatrix", _wrap_Vector3_StarMatrix, METH_VARARGS },
	 { (char *)"Vector3_Print", _wrap_Vector3_Print, METH_VARARGS },
	 { (char *)"Vector3___repr__", _wrap_Vector3___repr__, METH_VARARGS },
	 { (char *)"Vector3___eq__", _wrap_Vector3___eq__, METH_VARARGS },
	 { (char *)"Vector3___ne__", _wrap_Vector3___ne__, METH_VARARGS },
	 { (char *)"Vector3___mul__", _wrap_Vector3___mul__, METH_VARARGS },
	 { (char *)"Vector3_pack", _wrap_Vector3_pack, METH_VARARGS },
	 { (char *)"Vector3_unpack", _wrap_Vector3_unpack, METH_VARARGS },
	 { (char *)"Vector3_parseXML", _wrap_Vector3_parseXML, METH_VARARGS },
	 { (char *)"delete_Vector3", _wrap_delete_Vector3, METH_VARARGS },
	 { (char *)"Vector3_swigregister", Vector3_swigregister, METH_VARARGS },
	 { (char *)"delete_External", _wrap_delete_External, METH_VARARGS },
	 { (char *)"External_setSource", _wrap_External_setSource, METH_VARARGS },
	 { (char *)"External_getSource", _wrap_External_getSource, METH_VARARGS },
	 { (char *)"External_pack", _wrap_External_pack, METH_VARARGS },
	 { (char *)"External_unpack", _wrap_External_unpack, METH_VARARGS },
	 { (char *)"External___repr__", _wrap_External___repr__, METH_VARARGS },
	 { (char *)"new_External", _wrap_new_External, METH_VARARGS },
	 { (char *)"External_swigregister", External_swigregister, METH_VARARGS },
	 { (char *)"new_Spread", _wrap_new_Spread, METH_VARARGS },
	 { (char *)"Spread_set", _wrap_Spread_set, METH_VARARGS },
	 { (char *)"Spread_regen", _wrap_Spread_regen, METH_VARARGS },
	 { (char *)"Spread_getMean", _wrap_Spread_getMean, METH_VARARGS },
	 { (char *)"Spread_getSigma", _wrap_Spread_getSigma, METH_VARARGS },
	 { (char *)"Spread_getValue", _wrap_Spread_getValue, METH_VARARGS },
	 { (char *)"Spread___repr__", _wrap_Spread___repr__, METH_VARARGS },
	 { (char *)"Spread___neg__", _wrap_Spread___neg__, METH_VARARGS },
	 { (char *)"Spread___pos__", _wrap_Spread___pos__, METH_VARARGS },
	 { (char *)"Spread___abs__", _wrap_Spread___abs__, METH_VARARGS },
	 { (char *)"Spread___nonzero__", _wrap_Spread___nonzero__, METH_VARARGS },
	 { (char *)"Spread___float__", _wrap_Spread___float__, METH_VARARGS },
	 { (char *)"Spread___int__", _wrap_Spread___int__, METH_VARARGS },
	 { (char *)"Spread___long__", _wrap_Spread___long__, METH_VARARGS },
	 { (char *)"Spread___add__", _wrap_Spread___add__, METH_VARARGS },
	 { (char *)"Spread___radd__", _wrap_Spread___radd__, METH_VARARGS },
	 { (char *)"Spread___sub__", _wrap_Spread___sub__, METH_VARARGS },
	 { (char *)"Spread___rsub__", _wrap_Spread___rsub__, METH_VARARGS },
	 { (char *)"Spread___mul__", _wrap_Spread___mul__, METH_VARARGS },
	 { (char *)"Spread___rmul__", _wrap_Spread___rmul__, METH_VARARGS },
	 { (char *)"Spread___div__", _wrap_Spread___div__, METH_VARARGS },
	 { (char *)"Spread___rdiv__", _wrap_Spread___rdiv__, METH_VARARGS },
	 { (char *)"Spread___rpow__", _wrap_Spread___rpow__, METH_VARARGS },
	 { (char *)"Spread___pow__", _wrap_Spread___pow__, METH_VARARGS },
	 { (char *)"Spread_pack", _wrap_Spread_pack, METH_VARARGS },
	 { (char *)"Spread_unpack", _wrap_Spread_unpack, METH_VARARGS },
	 { (char *)"Spread_parseXML", _wrap_Spread_parseXML, METH_VARARGS },
	 { (char *)"delete_Spread", _wrap_delete_Spread, METH_VARARGS },
	 { (char *)"Spread_swigregister", Spread_swigregister, METH_VARARGS },
	 { (char *)"new_swig_string_bug_workaround", _wrap_new_swig_string_bug_workaround, METH_VARARGS },
	 { (char *)"swig_string_bug_workaround_get_as_swig_wrapped_pointer_set", _wrap_swig_string_bug_workaround_get_as_swig_wrapped_pointer_set, METH_VARARGS },
	 { (char *)"swig_string_bug_workaround_get_as_swig_wrapped_pointer_get", _wrap_swig_string_bug_workaround_get_as_swig_wrapped_pointer_get, METH_VARARGS },
	 { (char *)"delete_swig_string_bug_workaround", _wrap_delete_swig_string_bug_workaround, METH_VARARGS },
	 { (char *)"swig_string_bug_workaround_swigregister", swig_string_bug_workaround_swigregister, METH_VARARGS },
	 { (char *)"new_vEnum", _wrap_new_vEnum, METH_VARARGS },
	 { (char *)"vEnum___len__", _wrap_vEnum___len__, METH_VARARGS },
	 { (char *)"vEnum_clear", _wrap_vEnum_clear, METH_VARARGS },
	 { (char *)"vEnum_append", _wrap_vEnum_append, METH_VARARGS },
	 { (char *)"vEnum___nonzero__", _wrap_vEnum___nonzero__, METH_VARARGS },
	 { (char *)"vEnum_pop", _wrap_vEnum_pop, METH_VARARGS },
	 { (char *)"vEnum___getitem__", _wrap_vEnum___getitem__, METH_VARARGS },
	 { (char *)"vEnum___getslice__", _wrap_vEnum___getslice__, METH_VARARGS },
	 { (char *)"vEnum___setitem__", _wrap_vEnum___setitem__, METH_VARARGS },
	 { (char *)"vEnum___setslice__", _wrap_vEnum___setslice__, METH_VARARGS },
	 { (char *)"vEnum___delitem__", _wrap_vEnum___delitem__, METH_VARARGS },
	 { (char *)"vEnum___delslice__", _wrap_vEnum___delslice__, METH_VARARGS },
	 { (char *)"delete_vEnum", _wrap_delete_vEnum, METH_VARARGS },
	 { (char *)"vEnum_swigregister", vEnum_swigregister, METH_VARARGS },
	 { (char *)"new_vString", _wrap_new_vString, METH_VARARGS },
	 { (char *)"vString___len__", _wrap_vString___len__, METH_VARARGS },
	 { (char *)"vString___nonzero__", _wrap_vString___nonzero__, METH_VARARGS },
	 { (char *)"vString_clear", _wrap_vString_clear, METH_VARARGS },
	 { (char *)"vString_append", _wrap_vString_append, METH_VARARGS },
	 { (char *)"vString_pop", _wrap_vString_pop, METH_VARARGS },
	 { (char *)"vString___getitem__", _wrap_vString___getitem__, METH_VARARGS },
	 { (char *)"vString___getslice__", _wrap_vString___getslice__, METH_VARARGS },
	 { (char *)"vString___setitem__", _wrap_vString___setitem__, METH_VARARGS },
	 { (char *)"vString___setslice__", _wrap_vString___setslice__, METH_VARARGS },
	 { (char *)"vString___delitem__", _wrap_vString___delitem__, METH_VARARGS },
	 { (char *)"vString___delslice__", _wrap_vString___delslice__, METH_VARARGS },
	 { (char *)"delete_vString", _wrap_delete_vString, METH_VARARGS },
	 { (char *)"vString_swigregister", vString_swigregister, METH_VARARGS },
	 { (char *)"new_EnumError", _wrap_new_EnumError, METH_VARARGS },
	 { (char *)"EnumError_disarm", _wrap_EnumError_disarm, METH_VARARGS },
	 { (char *)"delete_EnumError", _wrap_delete_EnumError, METH_VARARGS },
	 { (char *)"EnumError_getError", _wrap_EnumError_getError, METH_VARARGS },
	 { (char *)"EnumError_swigregister", EnumError_swigregister, METH_VARARGS },
	 { (char *)"new_EnumIndexError", _wrap_new_EnumIndexError, METH_VARARGS },
	 { (char *)"delete_EnumIndexError", _wrap_delete_EnumIndexError, METH_VARARGS },
	 { (char *)"EnumIndexError_swigregister", EnumIndexError_swigregister, METH_VARARGS },
	 { (char *)"new_EnumTypeError", _wrap_new_EnumTypeError, METH_VARARGS },
	 { (char *)"delete_EnumTypeError", _wrap_delete_EnumTypeError, METH_VARARGS },
	 { (char *)"EnumTypeError_swigregister", EnumTypeError_swigregister, METH_VARARGS },
	 { (char *)"new_Enum", _wrap_new_Enum, METH_VARARGS },
	 { (char *)"delete_Enum", _wrap_delete_Enum, METH_VARARGS },
	 { (char *)"Enum_asInt", _wrap_Enum_asInt, METH_VARARGS },
	 { (char *)"Enum_cycle", _wrap_Enum_cycle, METH_VARARGS },
	 { (char *)"Enum_cycleBack", _wrap_Enum_cycleBack, METH_VARARGS },
	 { (char *)"Enum_pack", _wrap_Enum_pack, METH_VARARGS },
	 { (char *)"Enum_unpack", _wrap_Enum_unpack, METH_VARARGS },
	 { (char *)"Enum_parseXML", _wrap_Enum_parseXML, METH_VARARGS },
	 { (char *)"Enum___repr__", _wrap_Enum___repr__, METH_VARARGS },
	 { (char *)"Enum___eq__", _wrap_Enum___eq__, METH_VARARGS },
	 { (char *)"Enum___ne__", _wrap_Enum___ne__, METH_VARARGS },
	 { (char *)"Enum___le__", _wrap_Enum___le__, METH_VARARGS },
	 { (char *)"Enum___ge__", _wrap_Enum___ge__, METH_VARARGS },
	 { (char *)"Enum___lt__", _wrap_Enum___lt__, METH_VARARGS },
	 { (char *)"Enum___gt__", _wrap_Enum___gt__, METH_VARARGS },
	 { (char *)"Enum_fromString", _wrap_Enum_fromString, METH_VARARGS },
	 { (char *)"Enum_fromEnum", _wrap_Enum_fromEnum, METH_VARARGS },
	 { (char *)"Enum___copy__", _wrap_Enum___copy__, METH_VARARGS },
	 { (char *)"Enum_swigregister", Enum_swigregister, METH_VARARGS },
	 { (char *)"new_Enumeration", _wrap_new_Enumeration, METH_VARARGS },
	 { (char *)"Enumeration_each", _wrap_Enumeration_each, METH_VARARGS },
	 { (char *)"Enumeration_eachString", _wrap_Enumeration_eachString, METH_VARARGS },
	 { (char *)"Enumeration_getLabels", _wrap_Enumeration_getLabels, METH_VARARGS },
	 { (char *)"Enumeration_size", _wrap_Enumeration_size, METH_VARARGS },
	 { (char *)"Enumeration__getID", _wrap_Enumeration__getID, METH_VARARGS },
	 { (char *)"Enumeration__getName", _wrap_Enumeration__getName, METH_VARARGS },
	 { (char *)"Enumeration_irange", _wrap_Enumeration_irange, METH_VARARGS },
	 { (char *)"Enumeration_contains", _wrap_Enumeration_contains, METH_VARARGS },
	 { (char *)"Enumeration___getslice__", _wrap_Enumeration___getslice__, METH_VARARGS },
	 { (char *)"Enumeration___len__", _wrap_Enumeration___len__, METH_VARARGS },
	 { (char *)"Enumeration___contains__", _wrap_Enumeration___contains__, METH_VARARGS },
	 { (char *)"Enumeration___getitem__", _wrap_Enumeration___getitem__, METH_VARARGS },
	 { (char *)"Enumeration___getattr_c__", _wrap_Enumeration___getattr_c__, METH_VARARGS },
	 { (char *)"Enumeration___repr__", _wrap_Enumeration___repr__, METH_VARARGS },
	 { (char *)"delete_Enumeration", _wrap_delete_Enumeration, METH_VARARGS },
	 { (char *)"Enumeration_swigregister", Enumeration_swigregister, METH_VARARGS },
	 { (char *)"new_vector_t", _wrap_new_vector_t, METH_VARARGS },
	 { (char *)"vector_t___len__", _wrap_vector_t___len__, METH_VARARGS },
	 { (char *)"vector_t___nonzero__", _wrap_vector_t___nonzero__, METH_VARARGS },
	 { (char *)"vector_t_clear", _wrap_vector_t_clear, METH_VARARGS },
	 { (char *)"vector_t_append", _wrap_vector_t_append, METH_VARARGS },
	 { (char *)"vector_t_pop", _wrap_vector_t_pop, METH_VARARGS },
	 { (char *)"vector_t___getitem__", _wrap_vector_t___getitem__, METH_VARARGS },
	 { (char *)"vector_t___getslice__", _wrap_vector_t___getslice__, METH_VARARGS },
	 { (char *)"vector_t___setitem__", _wrap_vector_t___setitem__, METH_VARARGS },
	 { (char *)"vector_t___setslice__", _wrap_vector_t___setslice__, METH_VARARGS },
	 { (char *)"vector_t___delitem__", _wrap_vector_t___delitem__, METH_VARARGS },
	 { (char *)"vector_t___delslice__", _wrap_vector_t___delslice__, METH_VARARGS },
	 { (char *)"delete_vector_t", _wrap_delete_vector_t, METH_VARARGS },
	 { (char *)"vector_t_swigregister", vector_t_swigregister, METH_VARARGS },
	 { (char *)"InterpolatedData_method_set", _wrap_InterpolatedData_method_set, METH_VARARGS },
	 { (char *)"InterpolatedData_method_get", _wrap_InterpolatedData_method_get, METH_VARARGS },
	 { (char *)"new_InterpolatedData", _wrap_new_InterpolatedData, METH_VARARGS },
	 { (char *)"delete_InterpolatedData", _wrap_delete_InterpolatedData, METH_VARARGS },
	 { (char *)"InterpolatedData_pack", _wrap_InterpolatedData_pack, METH_VARARGS },
	 { (char *)"InterpolatedData_unpack", _wrap_InterpolatedData_unpack, METH_VARARGS },
	 { (char *)"InterpolatedData_getValue", _wrap_InterpolatedData_getValue, METH_VARARGS },
	 { (char *)"InterpolatedData_getPrecise", _wrap_InterpolatedData_getPrecise, METH_VARARGS },
	 { (char *)"InterpolatedData_compute_second_derivatives", _wrap_InterpolatedData_compute_second_derivatives, METH_VARARGS },
	 { (char *)"InterpolatedData_find", _wrap_InterpolatedData_find, METH_VARARGS },
	 { (char *)"InterpolatedData_swigregister", InterpolatedData_swigregister, METH_VARARGS },
	 { (char *)"new_Curve", _wrap_new_Curve, METH_VARARGS },
	 { (char *)"delete_Curve", _wrap_delete_Curve, METH_VARARGS },
	 { (char *)"Curve_pack", _wrap_Curve_pack, METH_VARARGS },
	 { (char *)"Curve_unpack", _wrap_Curve_unpack, METH_VARARGS },
	 { (char *)"Curve_getBreaks", _wrap_Curve_getBreaks, METH_VARARGS },
	 { (char *)"Curve_setBreaks", _wrap_Curve_setBreaks, METH_VARARGS },
	 { (char *)"Curve_setData", _wrap_Curve_setData, METH_VARARGS },
	 { (char *)"Curve_interpolate", _wrap_Curve_interpolate, METH_VARARGS },
	 { (char *)"Curve__compute_second_derivatives", _wrap_Curve__compute_second_derivatives, METH_VARARGS },
	 { (char *)"Curve_getPrecise", _wrap_Curve_getPrecise, METH_VARARGS },
	 { (char *)"Curve_getValue", _wrap_Curve_getValue, METH_VARARGS },
	 { (char *)"Curve_dumpCurve", _wrap_Curve_dumpCurve, METH_VARARGS },
	 { (char *)"Curve___repr__", _wrap_Curve___repr__, METH_VARARGS },
	 { (char *)"Curve_swigregister", Curve_swigregister, METH_VARARGS },
	 { (char *)"Table__x_label_set", _wrap_Table__x_label_set, METH_VARARGS },
	 { (char *)"Table__x_label_get", _wrap_Table__x_label_get, METH_VARARGS },
	 { (char *)"Table__y_label_set", _wrap_Table__y_label_set, METH_VARARGS },
	 { (char *)"Table__y_label_get", _wrap_Table__y_label_get, METH_VARARGS },
	 { (char *)"Table__x_breaks_set", _wrap_Table__x_breaks_set, METH_VARARGS },
	 { (char *)"Table__x_breaks_get", _wrap_Table__x_breaks_get, METH_VARARGS },
	 { (char *)"Table__y_breaks_set", _wrap_Table__y_breaks_set, METH_VARARGS },
	 { (char *)"Table__y_breaks_get", _wrap_Table__y_breaks_get, METH_VARARGS },
	 { (char *)"Table__data_set", _wrap_Table__data_set, METH_VARARGS },
	 { (char *)"Table__data_get", _wrap_Table__data_get, METH_VARARGS },
	 { (char *)"Table__table_set", _wrap_Table__table_set, METH_VARARGS },
	 { (char *)"Table__table_get", _wrap_Table__table_get, METH_VARARGS },
	 { (char *)"Table__dcols_set", _wrap_Table__dcols_set, METH_VARARGS },
	 { (char *)"Table__dcols_get", _wrap_Table__dcols_get, METH_VARARGS },
	 { (char *)"Table__drows_set", _wrap_Table__drows_set, METH_VARARGS },
	 { (char *)"Table__drows_get", _wrap_Table__drows_get, METH_VARARGS },
	 { (char *)"Table__x_spacing_set", _wrap_Table__x_spacing_set, METH_VARARGS },
	 { (char *)"Table__x_spacing_get", _wrap_Table__x_spacing_get, METH_VARARGS },
	 { (char *)"Table__y_spacing_set", _wrap_Table__y_spacing_set, METH_VARARGS },
	 { (char *)"Table__y_spacing_get", _wrap_Table__y_spacing_get, METH_VARARGS },
	 { (char *)"Table__x_min_set", _wrap_Table__x_min_set, METH_VARARGS },
	 { (char *)"Table__x_min_get", _wrap_Table__x_min_get, METH_VARARGS },
	 { (char *)"Table__y_min_set", _wrap_Table__y_min_set, METH_VARARGS },
	 { (char *)"Table__y_min_get", _wrap_Table__y_min_get, METH_VARARGS },
	 { (char *)"Table__x_range_set", _wrap_Table__x_range_set, METH_VARARGS },
	 { (char *)"Table__x_range_get", _wrap_Table__x_range_get, METH_VARARGS },
	 { (char *)"Table__y_range_set", _wrap_Table__y_range_set, METH_VARARGS },
	 { (char *)"Table__y_range_get", _wrap_Table__y_range_get, METH_VARARGS },
	 { (char *)"Table__x_in_set", _wrap_Table__x_in_set, METH_VARARGS },
	 { (char *)"Table__x_in_get", _wrap_Table__x_in_get, METH_VARARGS },
	 { (char *)"Table__y_in_set", _wrap_Table__y_in_set, METH_VARARGS },
	 { (char *)"Table__y_in_get", _wrap_Table__y_in_get, METH_VARARGS },
	 { (char *)"Table__x_n_set", _wrap_Table__x_n_set, METH_VARARGS },
	 { (char *)"Table__x_n_get", _wrap_Table__x_n_get, METH_VARARGS },
	 { (char *)"Table__y_n_set", _wrap_Table__y_n_set, METH_VARARGS },
	 { (char *)"Table__y_n_get", _wrap_Table__y_n_get, METH_VARARGS },
	 { (char *)"Table__valid_set", _wrap_Table__valid_set, METH_VARARGS },
	 { (char *)"Table__valid_get", _wrap_Table__valid_get, METH_VARARGS },
	 { (char *)"new_Table", _wrap_new_Table, METH_VARARGS },
	 { (char *)"delete_Table", _wrap_delete_Table, METH_VARARGS },
	 { (char *)"Table_invalidate", _wrap_Table_invalidate, METH_VARARGS },
	 { (char *)"Table_isValid", _wrap_Table_isValid, METH_VARARGS },
	 { (char *)"Table_pack", _wrap_Table_pack, METH_VARARGS },
	 { (char *)"Table_unpack", _wrap_Table_unpack, METH_VARARGS },
	 { (char *)"Table_getXBreaks", _wrap_Table_getXBreaks, METH_VARARGS },
	 { (char *)"Table_getYBreaks", _wrap_Table_getYBreaks, METH_VARARGS },
	 { (char *)"Table_setXBreaks", _wrap_Table_setXBreaks, METH_VARARGS },
	 { (char *)"Table_setYBreaks", _wrap_Table_setYBreaks, METH_VARARGS },
	 { (char *)"Table_setBreaks", _wrap_Table_setBreaks, METH_VARARGS },
	 { (char *)"Table_setXSpacing", _wrap_Table_setXSpacing, METH_VARARGS },
	 { (char *)"Table_setYSpacing", _wrap_Table_setYSpacing, METH_VARARGS },
	 { (char *)"Table_setSpacing", _wrap_Table_setSpacing, METH_VARARGS },
	 { (char *)"Table_getXSpacing", _wrap_Table_getXSpacing, METH_VARARGS },
	 { (char *)"Table_getYSpacing", _wrap_Table_getYSpacing, METH_VARARGS },
	 { (char *)"Table_setData", _wrap_Table_setData, METH_VARARGS },
	 { (char *)"Table_interpolate", _wrap_Table_interpolate, METH_VARARGS },
	 { (char *)"Table_getPrecise", _wrap_Table_getPrecise, METH_VARARGS },
	 { (char *)"Table_getValue", _wrap_Table_getValue, METH_VARARGS },
	 { (char *)"Table__compute_second_derivatives", _wrap_Table__compute_second_derivatives, METH_VARARGS },
	 { (char *)"Table_toPGM", _wrap_Table_toPGM, METH_VARARGS },
	 { (char *)"Table_dumpTable", _wrap_Table_dumpTable, METH_VARARGS },
	 { (char *)"Table_dumpDRows", _wrap_Table_dumpDRows, METH_VARARGS },
	 { (char *)"Table_dumpDCols", _wrap_Table_dumpDCols, METH_VARARGS },
	 { (char *)"Table___repr__", _wrap_Table___repr__, METH_VARARGS },
	 { (char *)"Table_swigregister", Table_swigregister, METH_VARARGS },
	 { (char *)"delete_ListBase", _wrap_delete_ListBase, METH_VARARGS },
	 { (char *)"new_ListBase", _wrap_new_ListBase, METH_VARARGS },
	 { (char *)"ListBase_swigregister", ListBase_swigregister, METH_VARARGS },
	 { (char *)"new_vInt", _wrap_new_vInt, METH_VARARGS },
	 { (char *)"vInt___len__", _wrap_vInt___len__, METH_VARARGS },
	 { (char *)"vInt___nonzero__", _wrap_vInt___nonzero__, METH_VARARGS },
	 { (char *)"vInt_clear", _wrap_vInt_clear, METH_VARARGS },
	 { (char *)"vInt_append", _wrap_vInt_append, METH_VARARGS },
	 { (char *)"vInt_pop", _wrap_vInt_pop, METH_VARARGS },
	 { (char *)"vInt___getitem__", _wrap_vInt___getitem__, METH_VARARGS },
	 { (char *)"vInt___getslice__", _wrap_vInt___getslice__, METH_VARARGS },
	 { (char *)"vInt___setitem__", _wrap_vInt___setitem__, METH_VARARGS },
	 { (char *)"vInt___setslice__", _wrap_vInt___setslice__, METH_VARARGS },
	 { (char *)"vInt___delitem__", _wrap_vInt___delitem__, METH_VARARGS },
	 { (char *)"vInt___delslice__", _wrap_vInt___delslice__, METH_VARARGS },
	 { (char *)"delete_vInt", _wrap_delete_vInt, METH_VARARGS },
	 { (char *)"vInt_swigregister", vInt_swigregister, METH_VARARGS },
	 { (char *)"delete_lInt", _wrap_delete_lInt, METH_VARARGS },
	 { (char *)"lInt_extend", _wrap_lInt_extend, METH_VARARGS },
	 { (char *)"lInt_pack", _wrap_lInt_pack, METH_VARARGS },
	 { (char *)"lInt_unpack", _wrap_lInt_unpack, METH_VARARGS },
	 { (char *)"lInt___repr__", _wrap_lInt___repr__, METH_VARARGS },
	 { (char *)"new_lInt", _wrap_new_lInt, METH_VARARGS },
	 { (char *)"lInt_swigregister", lInt_swigregister, METH_VARARGS },
	 { (char *)"new_vSpread", _wrap_new_vSpread, METH_VARARGS },
	 { (char *)"vSpread___len__", _wrap_vSpread___len__, METH_VARARGS },
	 { (char *)"vSpread_clear", _wrap_vSpread_clear, METH_VARARGS },
	 { (char *)"vSpread_append", _wrap_vSpread_append, METH_VARARGS },
	 { (char *)"vSpread___nonzero__", _wrap_vSpread___nonzero__, METH_VARARGS },
	 { (char *)"vSpread_pop", _wrap_vSpread_pop, METH_VARARGS },
	 { (char *)"vSpread___getitem__", _wrap_vSpread___getitem__, METH_VARARGS },
	 { (char *)"vSpread___getslice__", _wrap_vSpread___getslice__, METH_VARARGS },
	 { (char *)"vSpread___setitem__", _wrap_vSpread___setitem__, METH_VARARGS },
	 { (char *)"vSpread___setslice__", _wrap_vSpread___setslice__, METH_VARARGS },
	 { (char *)"vSpread___delitem__", _wrap_vSpread___delitem__, METH_VARARGS },
	 { (char *)"vSpread___delslice__", _wrap_vSpread___delslice__, METH_VARARGS },
	 { (char *)"delete_vSpread", _wrap_delete_vSpread, METH_VARARGS },
	 { (char *)"vSpread_swigregister", vSpread_swigregister, METH_VARARGS },
	 { (char *)"delete_lSpread", _wrap_delete_lSpread, METH_VARARGS },
	 { (char *)"lSpread_extend", _wrap_lSpread_extend, METH_VARARGS },
	 { (char *)"lSpread_pack", _wrap_lSpread_pack, METH_VARARGS },
	 { (char *)"lSpread_unpack", _wrap_lSpread_unpack, METH_VARARGS },
	 { (char *)"lSpread___repr__", _wrap_lSpread___repr__, METH_VARARGS },
	 { (char *)"new_lSpread", _wrap_new_lSpread, METH_VARARGS },
	 { (char *)"lSpread_swigregister", lSpread_swigregister, METH_VARARGS },
	 { (char *)"new_vPath", _wrap_new_vPath, METH_VARARGS },
	 { (char *)"vPath___len__", _wrap_vPath___len__, METH_VARARGS },
	 { (char *)"vPath_clear", _wrap_vPath_clear, METH_VARARGS },
	 { (char *)"vPath_append", _wrap_vPath_append, METH_VARARGS },
	 { (char *)"vPath___nonzero__", _wrap_vPath___nonzero__, METH_VARARGS },
	 { (char *)"vPath_pop", _wrap_vPath_pop, METH_VARARGS },
	 { (char *)"vPath___getitem__", _wrap_vPath___getitem__, METH_VARARGS },
	 { (char *)"vPath___getslice__", _wrap_vPath___getslice__, METH_VARARGS },
	 { (char *)"vPath___setitem__", _wrap_vPath___setitem__, METH_VARARGS },
	 { (char *)"vPath___setslice__", _wrap_vPath___setslice__, METH_VARARGS },
	 { (char *)"vPath___delitem__", _wrap_vPath___delitem__, METH_VARARGS },
	 { (char *)"vPath___delslice__", _wrap_vPath___delslice__, METH_VARARGS },
	 { (char *)"delete_vPath", _wrap_delete_vPath, METH_VARARGS },
	 { (char *)"vPath_swigregister", vPath_swigregister, METH_VARARGS },
	 { (char *)"delete_lPath", _wrap_delete_lPath, METH_VARARGS },
	 { (char *)"lPath_extend", _wrap_lPath_extend, METH_VARARGS },
	 { (char *)"lPath_pack", _wrap_lPath_pack, METH_VARARGS },
	 { (char *)"lPath_unpack", _wrap_lPath_unpack, METH_VARARGS },
	 { (char *)"lPath___repr__", _wrap_lPath___repr__, METH_VARARGS },
	 { (char *)"new_lPath", _wrap_new_lPath, METH_VARARGS },
	 { (char *)"lPath_swigregister", lPath_swigregister, METH_VARARGS },
	 { (char *)"new_vCurve", _wrap_new_vCurve, METH_VARARGS },
	 { (char *)"vCurve___len__", _wrap_vCurve___len__, METH_VARARGS },
	 { (char *)"vCurve_clear", _wrap_vCurve_clear, METH_VARARGS },
	 { (char *)"vCurve_append", _wrap_vCurve_append, METH_VARARGS },
	 { (char *)"vCurve___nonzero__", _wrap_vCurve___nonzero__, METH_VARARGS },
	 { (char *)"vCurve_pop", _wrap_vCurve_pop, METH_VARARGS },
	 { (char *)"vCurve___getitem__", _wrap_vCurve___getitem__, METH_VARARGS },
	 { (char *)"vCurve___getslice__", _wrap_vCurve___getslice__, METH_VARARGS },
	 { (char *)"vCurve___setitem__", _wrap_vCurve___setitem__, METH_VARARGS },
	 { (char *)"vCurve___setslice__", _wrap_vCurve___setslice__, METH_VARARGS },
	 { (char *)"vCurve___delitem__", _wrap_vCurve___delitem__, METH_VARARGS },
	 { (char *)"vCurve___delslice__", _wrap_vCurve___delslice__, METH_VARARGS },
	 { (char *)"delete_vCurve", _wrap_delete_vCurve, METH_VARARGS },
	 { (char *)"vCurve_swigregister", vCurve_swigregister, METH_VARARGS },
	 { (char *)"delete_lCurve", _wrap_delete_lCurve, METH_VARARGS },
	 { (char *)"lCurve_extend", _wrap_lCurve_extend, METH_VARARGS },
	 { (char *)"lCurve_pack", _wrap_lCurve_pack, METH_VARARGS },
	 { (char *)"lCurve_unpack", _wrap_lCurve_unpack, METH_VARARGS },
	 { (char *)"lCurve___repr__", _wrap_lCurve___repr__, METH_VARARGS },
	 { (char *)"new_lCurve", _wrap_new_lCurve, METH_VARARGS },
	 { (char *)"lCurve_swigregister", lCurve_swigregister, METH_VARARGS },
	 { (char *)"new_vTable", _wrap_new_vTable, METH_VARARGS },
	 { (char *)"vTable___len__", _wrap_vTable___len__, METH_VARARGS },
	 { (char *)"vTable_clear", _wrap_vTable_clear, METH_VARARGS },
	 { (char *)"vTable_append", _wrap_vTable_append, METH_VARARGS },
	 { (char *)"vTable___nonzero__", _wrap_vTable___nonzero__, METH_VARARGS },
	 { (char *)"vTable_pop", _wrap_vTable_pop, METH_VARARGS },
	 { (char *)"vTable___getitem__", _wrap_vTable___getitem__, METH_VARARGS },
	 { (char *)"vTable___getslice__", _wrap_vTable___getslice__, METH_VARARGS },
	 { (char *)"vTable___setitem__", _wrap_vTable___setitem__, METH_VARARGS },
	 { (char *)"vTable___setslice__", _wrap_vTable___setslice__, METH_VARARGS },
	 { (char *)"vTable___delitem__", _wrap_vTable___delitem__, METH_VARARGS },
	 { (char *)"vTable___delslice__", _wrap_vTable___delslice__, METH_VARARGS },
	 { (char *)"delete_vTable", _wrap_delete_vTable, METH_VARARGS },
	 { (char *)"vTable_swigregister", vTable_swigregister, METH_VARARGS },
	 { (char *)"delete_lTable", _wrap_delete_lTable, METH_VARARGS },
	 { (char *)"lTable_extend", _wrap_lTable_extend, METH_VARARGS },
	 { (char *)"lTable_pack", _wrap_lTable_pack, METH_VARARGS },
	 { (char *)"lTable_unpack", _wrap_lTable_unpack, METH_VARARGS },
	 { (char *)"lTable___repr__", _wrap_lTable___repr__, METH_VARARGS },
	 { (char *)"new_lTable", _wrap_new_lTable, METH_VARARGS },
	 { (char *)"lTable_swigregister", lTable_swigregister, METH_VARARGS },
	 { (char *)"new_vExternal", _wrap_new_vExternal, METH_VARARGS },
	 { (char *)"vExternal___len__", _wrap_vExternal___len__, METH_VARARGS },
	 { (char *)"vExternal_clear", _wrap_vExternal_clear, METH_VARARGS },
	 { (char *)"vExternal_append", _wrap_vExternal_append, METH_VARARGS },
	 { (char *)"vExternal___nonzero__", _wrap_vExternal___nonzero__, METH_VARARGS },
	 { (char *)"vExternal_pop", _wrap_vExternal_pop, METH_VARARGS },
	 { (char *)"vExternal___getitem__", _wrap_vExternal___getitem__, METH_VARARGS },
	 { (char *)"vExternal___getslice__", _wrap_vExternal___getslice__, METH_VARARGS },
	 { (char *)"vExternal___setitem__", _wrap_vExternal___setitem__, METH_VARARGS },
	 { (char *)"vExternal___setslice__", _wrap_vExternal___setslice__, METH_VARARGS },
	 { (char *)"vExternal___delitem__", _wrap_vExternal___delitem__, METH_VARARGS },
	 { (char *)"vExternal___delslice__", _wrap_vExternal___delslice__, METH_VARARGS },
	 { (char *)"delete_vExternal", _wrap_delete_vExternal, METH_VARARGS },
	 { (char *)"vExternal_swigregister", vExternal_swigregister, METH_VARARGS },
	 { (char *)"delete_lExternal", _wrap_delete_lExternal, METH_VARARGS },
	 { (char *)"lExternal_extend", _wrap_lExternal_extend, METH_VARARGS },
	 { (char *)"lExternal_pack", _wrap_lExternal_pack, METH_VARARGS },
	 { (char *)"lExternal_unpack", _wrap_lExternal_unpack, METH_VARARGS },
	 { (char *)"lExternal___repr__", _wrap_lExternal___repr__, METH_VARARGS },
	 { (char *)"new_lExternal", _wrap_new_lExternal, METH_VARARGS },
	 { (char *)"lExternal_swigregister", lExternal_swigregister, METH_VARARGS },
	 { (char *)"Matrix3_rowcol_set", _wrap_Matrix3_rowcol_set, METH_VARARGS },
	 { (char *)"Matrix3_rowcol_get", _wrap_Matrix3_rowcol_get, METH_VARARGS },
	 { (char *)"Matrix3_pack", _wrap_Matrix3_pack, METH_VARARGS },
	 { (char *)"Matrix3_unpack", _wrap_Matrix3_unpack, METH_VARARGS },
	 { (char *)"Matrix3_parseXML", _wrap_Matrix3_parseXML, METH_VARARGS },
	 { (char *)"new_Matrix3", _wrap_new_Matrix3, METH_VARARGS },
	 { (char *)"Matrix3_SetColumn", _wrap_Matrix3_SetColumn, METH_VARARGS },
	 { (char *)"Matrix3_GetColumn", _wrap_Matrix3_GetColumn, METH_VARARGS },
	 { (char *)"Matrix3_GetRow", _wrap_Matrix3_GetRow, METH_VARARGS },
	 { (char *)"Matrix3_GetElements", _wrap_Matrix3_GetElements, METH_VARARGS },
	 { (char *)"Matrix3___eq__", _wrap_Matrix3___eq__, METH_VARARGS },
	 { (char *)"Matrix3___ne__", _wrap_Matrix3___ne__, METH_VARARGS },
	 { (char *)"Matrix3___add__", _wrap_Matrix3___add__, METH_VARARGS },
	 { (char *)"Matrix3___sub__", _wrap_Matrix3___sub__, METH_VARARGS },
	 { (char *)"Matrix3___neg__", _wrap_Matrix3___neg__, METH_VARARGS },
	 { (char *)"Matrix3___mul__", _wrap_Matrix3___mul__, METH_VARARGS },
	 { (char *)"Matrix3_Transpose", _wrap_Matrix3_Transpose, METH_VARARGS },
	 { (char *)"Matrix3_Inverse", _wrap_Matrix3_Inverse, METH_VARARGS },
	 { (char *)"Matrix3_Determinant", _wrap_Matrix3_Determinant, METH_VARARGS },
	 { (char *)"Matrix3_ToAxisAngle", _wrap_Matrix3_ToAxisAngle, METH_VARARGS },
	 { (char *)"Matrix3_FromAxisAngle", _wrap_Matrix3_FromAxisAngle, METH_VARARGS },
	 { (char *)"Matrix3_ToEulerAnglesXYZ", _wrap_Matrix3_ToEulerAnglesXYZ, METH_VARARGS },
	 { (char *)"Matrix3_ToEulerAnglesXZY", _wrap_Matrix3_ToEulerAnglesXZY, METH_VARARGS },
	 { (char *)"Matrix3_ToEulerAnglesYXZ", _wrap_Matrix3_ToEulerAnglesYXZ, METH_VARARGS },
	 { (char *)"Matrix3_ToEulerAnglesYZX", _wrap_Matrix3_ToEulerAnglesYZX, METH_VARARGS },
	 { (char *)"Matrix3_ToEulerAnglesZXY", _wrap_Matrix3_ToEulerAnglesZXY, METH_VARARGS },
	 { (char *)"Matrix3_ToEulerAnglesZYX", _wrap_Matrix3_ToEulerAnglesZYX, METH_VARARGS },
	 { (char *)"Matrix3_FromEulerAnglesXYZ", _wrap_Matrix3_FromEulerAnglesXYZ, METH_VARARGS },
	 { (char *)"Matrix3_FromEulerAnglesXZY", _wrap_Matrix3_FromEulerAnglesXZY, METH_VARARGS },
	 { (char *)"Matrix3_FromEulerAnglesYXZ", _wrap_Matrix3_FromEulerAnglesYXZ, METH_VARARGS },
	 { (char *)"Matrix3_FromEulerAnglesYZX", _wrap_Matrix3_FromEulerAnglesYZX, METH_VARARGS },
	 { (char *)"Matrix3_FromEulerAnglesZXY", _wrap_Matrix3_FromEulerAnglesZXY, METH_VARARGS },
	 { (char *)"Matrix3_FromEulerAnglesZYX", _wrap_Matrix3_FromEulerAnglesZYX, METH_VARARGS },
	 { (char *)"Matrix3_TensorProduct", _wrap_Matrix3_TensorProduct, METH_VARARGS },
	 { (char *)"Matrix3_Print", _wrap_Matrix3_Print, METH_VARARGS },
	 { (char *)"Matrix3___repr__", _wrap_Matrix3___repr__, METH_VARARGS },
	 { (char *)"delete_Matrix3", _wrap_delete_Matrix3, METH_VARARGS },
	 { (char *)"Matrix3_swigregister", Matrix3_swigregister, METH_VARARGS },
	 { (char *)"new_BadMagic", _wrap_new_BadMagic, METH_VARARGS },
	 { (char *)"delete_BadMagic", _wrap_delete_BadMagic, METH_VARARGS },
	 { (char *)"BadMagic_swigregister", BadMagic_swigregister, METH_VARARGS },
	 { (char *)"new_BadByteOrder", _wrap_new_BadByteOrder, METH_VARARGS },
	 { (char *)"delete_BadByteOrder", _wrap_delete_BadByteOrder, METH_VARARGS },
	 { (char *)"BadByteOrder_swigregister", BadByteOrder_swigregister, METH_VARARGS },
	 { (char *)"new_CorruptArchive", _wrap_new_CorruptArchive, METH_VARARGS },
	 { (char *)"delete_CorruptArchive", _wrap_delete_CorruptArchive, METH_VARARGS },
	 { (char *)"CorruptArchive_swigregister", CorruptArchive_swigregister, METH_VARARGS },
	 { (char *)"new_IndexError", _wrap_new_IndexError, METH_VARARGS },
	 { (char *)"delete_IndexError", _wrap_delete_IndexError, METH_VARARGS },
	 { (char *)"IndexError_swigregister", IndexError_swigregister, METH_VARARGS },
	 { (char *)"new_ObjectMismatch", _wrap_new_ObjectMismatch, METH_VARARGS },
	 { (char *)"delete_ObjectMismatch", _wrap_delete_ObjectMismatch, METH_VARARGS },
	 { (char *)"ObjectMismatch_swigregister", ObjectMismatch_swigregister, METH_VARARGS },
	 { (char *)"new_IOError", _wrap_new_IOError, METH_VARARGS },
	 { (char *)"delete_IOError", _wrap_delete_IOError, METH_VARARGS },
	 { (char *)"IOError_swigregister", IOError_swigregister, METH_VARARGS },
	 { (char *)"TableEntry_pathhash_set", _wrap_TableEntry_pathhash_set, METH_VARARGS },
	 { (char *)"TableEntry_pathhash_get", _wrap_TableEntry_pathhash_get, METH_VARARGS },
	 { (char *)"TableEntry_classhash_set", _wrap_TableEntry_classhash_set, METH_VARARGS },
	 { (char *)"TableEntry_classhash_get", _wrap_TableEntry_classhash_get, METH_VARARGS },
	 { (char *)"TableEntry_offset_set", _wrap_TableEntry_offset_set, METH_VARARGS },
	 { (char *)"TableEntry_offset_get", _wrap_TableEntry_offset_get, METH_VARARGS },
	 { (char *)"TableEntry_length_set", _wrap_TableEntry_length_set, METH_VARARGS },
	 { (char *)"TableEntry_length_get", _wrap_TableEntry_length_get, METH_VARARGS },
	 { (char *)"new_TableEntry", _wrap_new_TableEntry, METH_VARARGS },
	 { (char *)"delete_TableEntry", _wrap_delete_TableEntry, METH_VARARGS },
	 { (char *)"TableEntry_swigregister", TableEntry_swigregister, METH_VARARGS },
	 { (char *)"FP_f_set", _wrap_FP_f_set, METH_VARARGS },
	 { (char *)"FP_f_get", _wrap_FP_f_get, METH_VARARGS },
	 { (char *)"FP_name_set", _wrap_FP_name_set, METH_VARARGS },
	 { (char *)"FP_name_get", _wrap_FP_name_get, METH_VARARGS },
	 { (char *)"FP_mode_set", _wrap_FP_mode_set, METH_VARARGS },
	 { (char *)"FP_mode_get", _wrap_FP_mode_get, METH_VARARGS },
	 { (char *)"new_FP", _wrap_new_FP, METH_VARARGS },
	 { (char *)"delete_FP", _wrap_delete_FP, METH_VARARGS },
	 { (char *)"FP_swigregister", FP_swigregister, METH_VARARGS },
	 { (char *)"new_DataArchive", _wrap_new_DataArchive, METH_VARARGS },
	 { (char *)"delete_DataArchive", _wrap_delete_DataArchive, METH_VARARGS },
	 { (char *)"DataArchive__addEntry", _wrap_DataArchive__addEntry, METH_VARARGS },
	 { (char *)"DataArchive_addObject", _wrap_DataArchive_addObject, METH_VARARGS },
	 { (char *)"DataArchive_close", _wrap_DataArchive_close, METH_VARARGS },
	 { (char *)"DataArchive_isClosed", _wrap_DataArchive_isClosed, METH_VARARGS },
	 { (char *)"DataArchive_isWrite", _wrap_DataArchive_isWrite, METH_VARARGS },
	 { (char *)"DataArchive_setDefault", _wrap_DataArchive_setDefault, METH_VARARGS },
	 { (char *)"DataArchive_getObject", _wrap_DataArchive_getObject, METH_VARARGS },
	 { (char *)"DataArchive__getOffset", _wrap_DataArchive__getOffset, METH_VARARGS },
	 { (char *)"DataArchive__filePointer", _wrap_DataArchive__filePointer, METH_VARARGS },
	 { (char *)"DataArchive__lookupPath", _wrap_DataArchive__lookupPath, METH_VARARGS },
	 { (char *)"DataArchive_swigregister", DataArchive_swigregister, METH_VARARGS },
	 { (char *)"new_InterfaceProxy", _wrap_new_InterfaceProxy, METH_VARARGS },
	 { (char *)"delete_InterfaceProxy", _wrap_delete_InterfaceProxy, METH_VARARGS },
	 { (char *)"InterfaceProxy_createObject", _wrap_InterfaceProxy_createObject, METH_VARARGS },
	 { (char *)"InterfaceProxy_set_enum", _wrap_InterfaceProxy_set_enum, METH_VARARGS },
	 { (char *)"InterfaceProxy_clear", _wrap_InterfaceProxy_clear, METH_VARARGS },
	 { (char *)"InterfaceProxy_variableExists", _wrap_InterfaceProxy_variableExists, METH_VARARGS },
	 { (char *)"InterfaceProxy_variableRequired", _wrap_InterfaceProxy_variableRequired, METH_VARARGS },
	 { (char *)"InterfaceProxy_pack", _wrap_InterfaceProxy_pack, METH_VARARGS },
	 { (char *)"InterfaceProxy_unpack", _wrap_InterfaceProxy_unpack, METH_VARARGS },
	 { (char *)"InterfaceProxy_getClassHash", _wrap_InterfaceProxy_getClassHash, METH_VARARGS },
	 { (char *)"InterfaceProxy_getClassName", _wrap_InterfaceProxy_getClassName, METH_VARARGS },
	 { (char *)"InterfaceProxy_getVariableNames", _wrap_InterfaceProxy_getVariableNames, METH_VARARGS },
	 { (char *)"InterfaceProxy_getRequiredNames", _wrap_InterfaceProxy_getRequiredNames, METH_VARARGS },
	 { (char *)"InterfaceProxy_set", _wrap_InterfaceProxy_set, METH_VARARGS },
	 { (char *)"InterfaceProxy_push_back", _wrap_InterfaceProxy_push_back, METH_VARARGS },
	 { (char *)"InterfaceProxy_swigregister", InterfaceProxy_swigregister, METH_VARARGS },
	 { (char *)"new_InterfaceRegistry", _wrap_new_InterfaceRegistry, METH_VARARGS },
	 { (char *)"delete_InterfaceRegistry", _wrap_delete_InterfaceRegistry, METH_VARARGS },
	 { (char *)"InterfaceRegistry_getInterface", _wrap_InterfaceRegistry_getInterface, METH_VARARGS },
	 { (char *)"InterfaceRegistry_hasInterface", _wrap_InterfaceRegistry_hasInterface, METH_VARARGS },
	 { (char *)"InterfaceRegistry_getInterfaceNames", _wrap_InterfaceRegistry_getInterfaceNames, METH_VARARGS },
	 { (char *)"InterfaceRegistry_getInterfaces", _wrap_InterfaceRegistry_getInterfaces, METH_VARARGS },
	 { (char *)"InterfaceRegistry_addInterface", _wrap_InterfaceRegistry_addInterface, METH_VARARGS },
	 { (char *)"InterfaceRegistry_swigregister", InterfaceRegistry_swigregister, METH_VARARGS },
	 { NULL, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_simdata__ListTint_tTo_p_std__vectorTint_t(void *x) {
    return (void *)((std::vector<int > *)  ((simdata::List<int > *) x));
}
static void *_p_simdata__CurveTo_p_simdata__InterpolatedData(void *x) {
    return (void *)((simdata::InterpolatedData *)  ((simdata::Curve *) x));
}
static void *_p_simdata__TableTo_p_simdata__InterpolatedData(void *x) {
    return (void *)((simdata::InterpolatedData *)  ((simdata::Table *) x));
}
static void *_p_simdata__SimDateTo_p_simdata__Date(void *x) {
    return (void *)((simdata::Date *) (simdata::DateZulu *) ((simdata::SimDate *) x));
}
static void *_p_simdata__DateZuluTo_p_simdata__Date(void *x) {
    return (void *)((simdata::Date *)  ((simdata::DateZulu *) x));
}
static void *_p_simdata__ParseExceptionTo_p_simdata__Exception(void *x) {
    return (void *)((simdata::Exception *)  ((simdata::ParseException *) x));
}
static void *_p_simdata__ObjectTypeMismatchTo_p_simdata__Exception(void *x) {
    return (void *)((simdata::Exception *)  ((simdata::ObjectTypeMismatch *) x));
}
static void *_p_simdata__ObjectMismatchTo_p_simdata__Exception(void *x) {
    return (void *)((simdata::Exception *)  ((simdata::ObjectMismatch *) x));
}
static void *_p_simdata__CorruptArchiveTo_p_simdata__Exception(void *x) {
    return (void *)((simdata::Exception *)  ((simdata::CorruptArchive *) x));
}
static void *_p_simdata__IOErrorTo_p_simdata__Exception(void *x) {
    return (void *)((simdata::Exception *)  ((simdata::IOError *) x));
}
static void *_p_simdata__BadMagicTo_p_simdata__Exception(void *x) {
    return (void *)((simdata::Exception *)  ((simdata::BadMagic *) x));
}
static void *_p_simdata__BadByteOrderTo_p_simdata__Exception(void *x) {
    return (void *)((simdata::Exception *)  ((simdata::BadByteOrder *) x));
}
static void *_p_simdata__IndexErrorTo_p_simdata__Exception(void *x) {
    return (void *)((simdata::Exception *)  ((simdata::IndexError *) x));
}
static void *_p_simdata__ListTsimdata__Table_tTo_p_simdata__ListBase(void *x) {
    return (void *)((simdata::ListBase *)  ((simdata::List<simdata::Table > *) x));
}
static void *_p_simdata__ListTsimdata__External_tTo_p_simdata__ListBase(void *x) {
    return (void *)((simdata::ListBase *)  ((simdata::List<simdata::External > *) x));
}
static void *_p_simdata__ListTsimdata__Curve_tTo_p_simdata__ListBase(void *x) {
    return (void *)((simdata::ListBase *)  ((simdata::List<simdata::Curve > *) x));
}
static void *_p_simdata__ListTint_tTo_p_simdata__ListBase(void *x) {
    return (void *)((simdata::ListBase *)  ((simdata::List<int > *) x));
}
static void *_p_simdata__ListTsimdata__Path_tTo_p_simdata__ListBase(void *x) {
    return (void *)((simdata::ListBase *)  ((simdata::List<simdata::Path > *) x));
}
static void *_p_simdata__ListTsimdata__Spread_tTo_p_simdata__ListBase(void *x) {
    return (void *)((simdata::ListBase *)  ((simdata::List<simdata::Spread > *) x));
}
static void *_p_simdata__ListTsimdata__Spread_tTo_p_std__vectorTsimdata__Spread_t(void *x) {
    return (void *)((std::vector<simdata::Spread > *)  ((simdata::List<simdata::Spread > *) x));
}
static void *_p_simdata__ListTsimdata__External_tTo_p_std__vectorTsimdata__External_t(void *x) {
    return (void *)((std::vector<simdata::External > *)  ((simdata::List<simdata::External > *) x));
}
static void *_p_simdata__ListTsimdata__Curve_tTo_p_std__vectorTsimdata__Curve_t(void *x) {
    return (void *)((std::vector<simdata::Curve > *)  ((simdata::List<simdata::Curve > *) x));
}
static void *_p_simdata__ObjectTo_p_simdata__BaseType(void *x) {
    return (void *)((simdata::BaseType *)  ((simdata::Object *) x));
}
static void *_p_simdata__SpreadTo_p_simdata__BaseType(void *x) {
    return (void *)((simdata::BaseType *)  ((simdata::Spread *) x));
}
static void *_p_simdata__ListTsimdata__External_tTo_p_simdata__BaseType(void *x) {
    return (void *)((simdata::BaseType *) (simdata::ListBase *) ((simdata::List<simdata::External > *) x));
}
static void *_p_simdata__Matrix3To_p_simdata__BaseType(void *x) {
    return (void *)((simdata::BaseType *)  ((simdata::Matrix3 *) x));
}
static void *_p_simdata__PathTo_p_simdata__BaseType(void *x) {
    return (void *)((simdata::BaseType *)  ((simdata::Path *) x));
}
static void *_p_simdata__InterpolatedDataTo_p_simdata__BaseType(void *x) {
    return (void *)((simdata::BaseType *)  ((simdata::InterpolatedData *) x));
}
static void *_p_simdata__ExternalTo_p_simdata__BaseType(void *x) {
    return (void *)((simdata::BaseType *)  ((simdata::External *) x));
}
static void *_p_simdata__TableTo_p_simdata__BaseType(void *x) {
    return (void *)((simdata::BaseType *) (simdata::InterpolatedData *) ((simdata::Table *) x));
}
static void *_p_simdata__ListBaseTo_p_simdata__BaseType(void *x) {
    return (void *)((simdata::BaseType *)  ((simdata::ListBase *) x));
}
static void *_p_simdata__Vector3To_p_simdata__BaseType(void *x) {
    return (void *)((simdata::BaseType *)  ((simdata::Vector3 *) x));
}
static void *_p_simdata__ListTsimdata__Spread_tTo_p_simdata__BaseType(void *x) {
    return (void *)((simdata::BaseType *) (simdata::ListBase *) ((simdata::List<simdata::Spread > *) x));
}
static void *_p_simdata__EnumTo_p_simdata__BaseType(void *x) {
    return (void *)((simdata::BaseType *)  ((simdata::Enum *) x));
}
static void *_p_simdata__CurveTo_p_simdata__BaseType(void *x) {
    return (void *)((simdata::BaseType *) (simdata::InterpolatedData *) ((simdata::Curve *) x));
}
static void *_p_simdata__SimDateTo_p_simdata__BaseType(void *x) {
    return (void *)((simdata::BaseType *)  ((simdata::SimDate *) x));
}
static void *_p_simdata__PathPointerBaseTo_p_simdata__BaseType(void *x) {
    return (void *)((simdata::BaseType *) (simdata::Path *) ((simdata::PathPointerBase *) x));
}
static void *_p_simdata__ListTsimdata__Curve_tTo_p_simdata__BaseType(void *x) {
    return (void *)((simdata::BaseType *) (simdata::ListBase *) ((simdata::List<simdata::Curve > *) x));
}
static void *_p_simdata__ListTint_tTo_p_simdata__BaseType(void *x) {
    return (void *)((simdata::BaseType *) (simdata::ListBase *) ((simdata::List<int > *) x));
}
static void *_p_simdata__ListTsimdata__Path_tTo_p_simdata__BaseType(void *x) {
    return (void *)((simdata::BaseType *) (simdata::ListBase *) ((simdata::List<simdata::Path > *) x));
}
static void *_p_simdata__ListTsimdata__Table_tTo_p_simdata__BaseType(void *x) {
    return (void *)((simdata::BaseType *) (simdata::ListBase *) ((simdata::List<simdata::Table > *) x));
}
static void *_p_simdata__ListTsimdata__Table_tTo_p_std__vectorTsimdata__Table_t(void *x) {
    return (void *)((std::vector<simdata::Table > *)  ((simdata::List<simdata::Table > *) x));
}
static void *_p_simdata__EnumTypeErrorTo_p_simdata__EnumError(void *x) {
    return (void *)((simdata::EnumError *)  ((simdata::EnumTypeError *) x));
}
static void *_p_simdata__EnumIndexErrorTo_p_simdata__EnumError(void *x) {
    return (void *)((simdata::EnumError *)  ((simdata::EnumIndexError *) x));
}
static void *_p_simdata__PathPointerBaseTo_p_simdata__Path(void *x) {
    return (void *)((simdata::Path *)  ((simdata::PathPointerBase *) x));
}
static void *_p_simdata__SimDateTo_p_simdata__Zulu(void *x) {
    return (void *)((simdata::Zulu *) (simdata::DateZulu *) ((simdata::SimDate *) x));
}
static void *_p_simdata__DateZuluTo_p_simdata__Zulu(void *x) {
    return (void *)((simdata::Zulu *)  ((simdata::DateZulu *) x));
}
static void *_p_simdata__SimDateTo_p_simdata__DateZulu(void *x) {
    return (void *)((simdata::DateZulu *)  ((simdata::SimDate *) x));
}
static void *_p_simdata__PathPointerBaseTo_p_simdata__PointerBase(void *x) {
    return (void *)((simdata::PointerBase *)  ((simdata::PathPointerBase *) x));
}
static void *_p_simdata__ListTsimdata__Path_tTo_p_std__vectorTsimdata__Path_t(void *x) {
    return (void *)((std::vector<simdata::Path > *)  ((simdata::List<simdata::Path > *) x));
}
static swig_type_info _swigt__p_simdata__Table[] = {{"_p_simdata__Table", 0, "simdata::Table *", 0},{"_p_simdata__Table"},{0}};
static swig_type_info _swigt__p_simdata__Date[] = {{"_p_simdata__Date", 0, "simdata::Date *", 0},{"_p_simdata__SimDate", _p_simdata__SimDateTo_p_simdata__Date},{"_p_simdata__Date"},{"_p_simdata__DateZulu", _p_simdata__DateZuluTo_p_simdata__Date},{0}};
static swig_type_info _swigt__p_swig_string_bug_workaround[] = {{"_p_swig_string_bug_workaround", 0, "swig_string_bug_workaround *", 0},{"_p_swig_string_bug_workaround"},{0}};
static swig_type_info _swigt__p_std__vectorTsimdata__Path_t[] = {{"_p_std__vectorTsimdata__Path_t", 0, "std::vector<simdata::Path > *", 0},{"_p_std__vectorTsimdata__Path_t"},{"_p_simdata__ListTsimdata__Path_t", _p_simdata__ListTsimdata__Path_tTo_p_std__vectorTsimdata__Path_t},{0}};
static swig_type_info _swigt__p_simdata__ListTsimdata__Path_t[] = {{"_p_simdata__ListTsimdata__Path_t", 0, "simdata::List<simdata::Path > *", 0},{"_p_simdata__ListTsimdata__Path_t"},{0}};
static swig_type_info _swigt__p_p_char[] = {{"_p_p_char", 0, "char **", 0},{"_p_p_char"},{0}};
static swig_type_info _swigt__p_simdata__Spread[] = {{"_p_simdata__Spread", 0, "simdata::Spread *", 0},{"_p_simdata__Spread"},{0}};
static swig_type_info _swigt__p_simdata__TableEntry[] = {{"_p_simdata__TableEntry", 0, "simdata::TableEntry *", 0},{"_p_simdata__TableEntry"},{0}};
static swig_type_info _swigt__p_simdata__InterfaceRegistry[] = {{"_p_simdata__InterfaceRegistry", 0, "simdata::InterfaceRegistry *", 0},{"_p_simdata__InterfaceRegistry"},{0}};
static swig_type_info _swigt__p_simdata__External[] = {{"_p_simdata__External", 0, "simdata::External *", 0},{"_p_simdata__External"},{0}};
static swig_type_info _swigt__p_guint32[] = {{"_p_guint32", 0, "guint32 *", 0},{"_p_guint32"},{0}};
static swig_type_info _swigt__p_bool[] = {{"_p_bool", 0, "bool *", 0},{"_p_bool"},{0}};
static swig_type_info _swigt__p_simdata__InvalidDate[] = {{"_p_simdata__InvalidDate", 0, "simdata::InvalidDate *", 0},{"_p_simdata__InvalidDate"},{0}};
static swig_type_info _swigt__p_simdata__BadMagic[] = {{"_p_simdata__BadMagic", 0, "simdata::BadMagic *", 0},{"_p_simdata__BadMagic"},{0}};
static swig_type_info _swigt__p_double[] = {{"_p_double", 0, "double *", 0},{"_p_double"},{0}};
static swig_type_info _swigt__p_a_3__double[] = {{"_p_a_3__double", 0, "double (*)[3]", 0},{"_p_a_3__simdata__Matrix3__M_t"},{"_p_a_3__double"},{0}};
static swig_type_info _swigt__p_std__vectorTsimdata__Spread_t[] = {{"_p_std__vectorTsimdata__Spread_t", 0, "std::vector<simdata::Spread > *", 0},{"_p_std__vectorTsimdata__Spread_t"},{"_p_simdata__ListTsimdata__Spread_t", _p_simdata__ListTsimdata__Spread_tTo_p_std__vectorTsimdata__Spread_t},{0}};
static swig_type_info _swigt__p_simdata__Enumeration[] = {{"_p_simdata__Enumeration", 0, "simdata::Enumeration *", 0},{"_p_simdata__Enumeration"},{0}};
static swig_type_info _swigt__p_simdata__ListTsimdata__Spread_t[] = {{"_p_simdata__ListTsimdata__Spread_t", 0, "simdata::List<simdata::Spread > *", 0},{"_p_simdata__ListTsimdata__Spread_t"},{0}};
static swig_type_info _swigt__p_simdata__FP[] = {{"_p_simdata__FP", 0, "simdata::FP *", 0},{"_p_simdata__FP"},{0}};
static swig_type_info _swigt__p_simdata__hasht[] = {{"_p_simdata__hasht", 0, "simdata::hasht *", 0},{"_p_simdata__HashT"},{"_p_simdata__ObjectID"},{"_p_simdata__hasht"},{0}};
static swig_type_info _swigt__p_simdata__BadByteOrder[] = {{"_p_simdata__BadByteOrder", 0, "simdata::BadByteOrder *", 0},{"_p_simdata__BadByteOrder"},{0}};
static swig_type_info _swigt__p_simdata__Vector3[] = {{"_p_simdata__Vector3", 0, "simdata::Vector3 *", 0},{"_p_simdata__Vector3"},{0}};
static swig_type_info _swigt__p_simdata__DataArchive[] = {{"_p_simdata__DataArchive", 0, "simdata::DataArchive *", 0},{"_p_simdata__DataArchive"},{0}};
static swig_type_info _swigt__p_std__vectorTsimdata__External_t[] = {{"_p_std__vectorTsimdata__External_t", 0, "std::vector<simdata::External > *", 0},{"_p_std__vectorTsimdata__External_t"},{"_p_simdata__ListTsimdata__External_t", _p_simdata__ListTsimdata__External_tTo_p_std__vectorTsimdata__External_t},{0}};
static swig_type_info _swigt__p_simdata__ListTsimdata__External_t[] = {{"_p_simdata__ListTsimdata__External_t", 0, "simdata::List<simdata::External > *", 0},{"_p_simdata__ListTsimdata__External_t"},{0}};
static swig_type_info _swigt__p_simdata__CorruptArchive[] = {{"_p_simdata__CorruptArchive", 0, "simdata::CorruptArchive *", 0},{"_p_simdata__CorruptArchive"},{0}};
static swig_type_info _swigt__p_simdata__PathPointerBase[] = {{"_p_simdata__PathPointerBase", 0, "simdata::PathPointerBase *", 0},{"_p_simdata__PathPointerBase"},{0}};
static swig_type_info _swigt__p_simdata__PointerBase[] = {{"_p_simdata__PointerBase", 0, "simdata::PointerBase *", 0},{"_p_simdata__PointerBase"},{"_p_simdata__PathPointerBase", _p_simdata__PathPointerBaseTo_p_simdata__PointerBase},{0}};
static swig_type_info _swigt__p_simdata__UnPacker[] = {{"_p_simdata__UnPacker", 0, "simdata::UnPacker *", 0},{"_p_simdata__UnPacker"},{0}};
static swig_type_info _swigt__p_std__vectorTdouble_t[] = {{"_p_std__vectorTdouble_t", 0, "std::vector<double > *", 0},{"_p_std__vectorTdouble_t"},{0}};
static swig_type_info _swigt__p_simdata__DateZulu[] = {{"_p_simdata__DateZulu", 0, "simdata::DateZulu *", 0},{"_p_simdata__SimDate", _p_simdata__SimDateTo_p_simdata__DateZulu},{"_p_simdata__DateZulu"},{0}};
static swig_type_info _swigt__p_std__string[] = {{"_p_std__string", 0, "std::string *", 0},{"_p_std__string"},{0}};
static swig_type_info _swigt__p_simdata__ListBase[] = {{"_p_simdata__ListBase", 0, "simdata::ListBase *", 0},{"_p_simdata__ListBase"},{"_p_simdata__ListTsimdata__Path_t", _p_simdata__ListTsimdata__Path_tTo_p_simdata__ListBase},{"_p_simdata__ListTsimdata__Spread_t", _p_simdata__ListTsimdata__Spread_tTo_p_simdata__ListBase},{"_p_simdata__ListTint_t", _p_simdata__ListTint_tTo_p_simdata__ListBase},{"_p_simdata__ListTsimdata__Table_t", _p_simdata__ListTsimdata__Table_tTo_p_simdata__ListBase},{"_p_simdata__ListTsimdata__External_t", _p_simdata__ListTsimdata__External_tTo_p_simdata__ListBase},{"_p_simdata__ListTsimdata__Curve_t", _p_simdata__ListTsimdata__Curve_tTo_p_simdata__ListBase},{0}};
static swig_type_info _swigt__p_simdata__EnumIndexError[] = {{"_p_simdata__EnumIndexError", 0, "simdata::EnumIndexError *", 0},{"_p_simdata__EnumIndexError"},{0}};
static swig_type_info _swigt__p_simdata__IndexError[] = {{"_p_simdata__IndexError", 0, "simdata::IndexError *", 0},{"_p_simdata__IndexError"},{0}};
static swig_type_info _swigt__p_std__vectorTint_t[] = {{"_p_std__vectorTint_t", 0, "std::vector<int > *", 0},{"_p_std__vectorTint_t"},{"_p_simdata__ListTint_t", _p_simdata__ListTint_tTo_p_std__vectorTint_t},{0}};
static swig_type_info _swigt__p_simdata__EnumTypeError[] = {{"_p_simdata__EnumTypeError", 0, "simdata::EnumTypeError *", 0},{"_p_simdata__EnumTypeError"},{0}};
static swig_type_info _swigt__p_simdata__ListTint_t[] = {{"_p_simdata__ListTint_t", 0, "simdata::List<int > *", 0},{"_p_simdata__ListTint_t"},{0}};
static swig_type_info _swigt__p_simdata__EnumError[] = {{"_p_simdata__EnumError", 0, "simdata::EnumError *", 0},{"_p_simdata__EnumTypeError", _p_simdata__EnumTypeErrorTo_p_simdata__EnumError},{"_p_simdata__EnumError"},{"_p_simdata__EnumIndexError", _p_simdata__EnumIndexErrorTo_p_simdata__EnumError},{0}};
static swig_type_info _swigt__p_simdata__Enum[] = {{"_p_simdata__Enum", 0, "simdata::Enum *", 0},{"_p_simdata__Enum"},{0}};
static swig_type_info _swigt__p_simdata__ObjectTypeMismatch[] = {{"_p_simdata__ObjectTypeMismatch", 0, "simdata::ObjectTypeMismatch *", 0},{"_p_simdata__ObjectTypeMismatch"},{0}};
static swig_type_info _swigt__p_simdata__Path[] = {{"_p_simdata__Path", 0, "simdata::Path *", 0},{"_p_simdata__PathPointerBase", _p_simdata__PathPointerBaseTo_p_simdata__Path},{"_p_simdata__Path"},{0}};
static swig_type_info _swigt__p_simdata__ObjectMismatch[] = {{"_p_simdata__ObjectMismatch", 0, "simdata::ObjectMismatch *", 0},{"_p_simdata__ObjectMismatch"},{0}};
static swig_type_info _swigt__p_simdata__ParseException[] = {{"_p_simdata__ParseException", 0, "simdata::ParseException *", 0},{"_p_simdata__ParseException"},{0}};
static swig_type_info _swigt__p_simdata__PythonException[] = {{"_p_simdata__PythonException", 0, "simdata::PythonException *", 0},{"_p_simdata__PythonException"},{0}};
static swig_type_info _swigt__p_simdata__Exception[] = {{"_p_simdata__Exception", 0, "simdata::Exception *", 0},{"_p_simdata__Exception"},{"_p_simdata__ParseException", _p_simdata__ParseExceptionTo_p_simdata__Exception},{"_p_simdata__ObjectTypeMismatch", _p_simdata__ObjectTypeMismatchTo_p_simdata__Exception},{"_p_simdata__ObjectMismatch", _p_simdata__ObjectMismatchTo_p_simdata__Exception},{"_p_simdata__CorruptArchive", _p_simdata__CorruptArchiveTo_p_simdata__Exception},{"_p_simdata__IOError", _p_simdata__IOErrorTo_p_simdata__Exception},{"_p_simdata__BadMagic", _p_simdata__BadMagicTo_p_simdata__Exception},{"_p_simdata__BadByteOrder", _p_simdata__BadByteOrderTo_p_simdata__Exception},{"_p_simdata__IndexError", _p_simdata__IndexErrorTo_p_simdata__Exception},{0}};
static swig_type_info _swigt__p_gint32[] = {{"_p_gint32", 0, "gint32 *", 0},{"_p_gint32"},{0}};
static swig_type_info _swigt__p_std__ostream[] = {{"_p_std__ostream", 0, "std::ostream *", 0},{"_p_std__ostream"},{0}};
static swig_type_info _swigt__p_simdata__ObjectID[] = {{"_p_simdata__ObjectID", 0, "simdata::ObjectID const *", 0},{"_p_simdata__HashT"},{"_p_simdata__ObjectID"},{"_p_simdata__hasht"},{0}};
static swig_type_info _swigt__p_a_3__simdata__Matrix3__M_t[] = {{"_p_a_3__simdata__Matrix3__M_t", 0, "simdata::Matrix3::M_t [3][3]", 0},{"_p_a_3__simdata__Matrix3__M_t"},{"_p_a_3__double"},{0}};
static swig_type_info _swigt__p_simdata__Object[] = {{"_p_simdata__Object", 0, "simdata::Object *", 0},{"_p_simdata__Object"},{0}};
static swig_type_info _swigt__p_simdata__Packer[] = {{"_p_simdata__Packer", 0, "simdata::Packer *", 0},{"_p_simdata__Packer"},{0}};
static swig_type_info _swigt__p_simdata__Zulu[] = {{"_p_simdata__Zulu", 0, "simdata::Zulu *", 0},{"_p_simdata__SimDate", _p_simdata__SimDateTo_p_simdata__Zulu},{"_p_simdata__DateZulu", _p_simdata__DateZuluTo_p_simdata__Zulu},{"_p_simdata__Zulu"},{0}};
static swig_type_info _swigt__p_std__vectorTfloat_t[] = {{"_p_std__vectorTfloat_t", 0, "std::vector<float > *", 0},{"_p_std__vectorTfloat_t"},{0}};
static swig_type_info _swigt__p_simdata__Curve[] = {{"_p_simdata__Curve", 0, "simdata::Curve *", 0},{"_p_simdata__Curve"},{0}};
static swig_type_info _swigt__p_std__vectorTsimdata__Enum_t[] = {{"_p_std__vectorTsimdata__Enum_t", 0, "std::vector<simdata::Enum > *", 0},{"_p_std__vectorTsimdata__Enum_t"},{0}};
static swig_type_info _swigt__p_FILE[] = {{"_p_FILE", 0, "FILE *", 0},{"_p_FILE"},{0}};
static swig_type_info _swigt__p_tm[] = {{"_p_tm", 0, "tm *", 0},{"_p_tm"},{0}};
static swig_type_info _swigt__p_simdata__HashT[] = {{"_p_simdata__HashT", 0, "simdata::HashT *", 0},{"_p_simdata__HashT"},{"_p_simdata__ObjectID"},{"_p_simdata__hasht"},{0}};
static swig_type_info _swigt__p_int[] = {{"_p_int", 0, "int *", 0},{"_p_int"},{0}};
static swig_type_info _swigt__p_std__vectorTsimdata__Table_t[] = {{"_p_std__vectorTsimdata__Table_t", 0, "std::vector<simdata::Table > *", 0},{"_p_std__vectorTsimdata__Table_t"},{"_p_simdata__ListTsimdata__Table_t", _p_simdata__ListTsimdata__Table_tTo_p_std__vectorTsimdata__Table_t},{0}};
static swig_type_info _swigt__p_std__vectorTsimdata__Curve_t[] = {{"_p_std__vectorTsimdata__Curve_t", 0, "std::vector<simdata::Curve > *", 0},{"_p_std__vectorTsimdata__Curve_t"},{"_p_simdata__ListTsimdata__Curve_t", _p_simdata__ListTsimdata__Curve_tTo_p_std__vectorTsimdata__Curve_t},{0}};
static swig_type_info _swigt__p_simdata__BaseType[] = {{"_p_simdata__BaseType", 0, "simdata::BaseType *", 0},{"_p_simdata__Spread", _p_simdata__SpreadTo_p_simdata__BaseType},{"_p_simdata__BaseType"},{"_p_simdata__ListTsimdata__External_t", _p_simdata__ListTsimdata__External_tTo_p_simdata__BaseType},{"_p_simdata__Matrix3", _p_simdata__Matrix3To_p_simdata__BaseType},{"_p_simdata__Enum", _p_simdata__EnumTo_p_simdata__BaseType},{"_p_simdata__ListTint_t", _p_simdata__ListTint_tTo_p_simdata__BaseType},{"_p_simdata__InterpolatedData", _p_simdata__InterpolatedDataTo_p_simdata__BaseType},{"_p_simdata__External", _p_simdata__ExternalTo_p_simdata__BaseType},{"_p_simdata__ListTsimdata__Path_t", _p_simdata__ListTsimdata__Path_tTo_p_simdata__BaseType},{"_p_simdata__ListTsimdata__Spread_t", _p_simdata__ListTsimdata__Spread_tTo_p_simdata__BaseType},{"_p_simdata__Table", _p_simdata__TableTo_p_simdata__BaseType},{"_p_simdata__ListBase", _p_simdata__ListBaseTo_p_simdata__BaseType},{"_p_simdata__ListTsimdata__Curve_t", _p_simdata__ListTsimdata__Curve_tTo_p_simdata__BaseType},{"_p_simdata__Vector3", _p_simdata__Vector3To_p_simdata__BaseType},{"_p_simdata__ListTsimdata__Table_t", _p_simdata__ListTsimdata__Table_tTo_p_simdata__BaseType},{"_p_simdata__Curve", _p_simdata__CurveTo_p_simdata__BaseType},{"_p_simdata__SimDate", _p_simdata__SimDateTo_p_simdata__BaseType},{"_p_simdata__Object", _p_simdata__ObjectTo_p_simdata__BaseType},{"_p_simdata__PathPointerBase", _p_simdata__PathPointerBaseTo_p_simdata__BaseType},{"_p_simdata__Path", _p_simdata__PathTo_p_simdata__BaseType},{0}};
static swig_type_info _swigt__p_simdata__ListTsimdata__Curve_t[] = {{"_p_simdata__ListTsimdata__Curve_t", 0, "simdata::List<simdata::Curve > *", 0},{"_p_simdata__ListTsimdata__Curve_t"},{0}};
static swig_type_info _swigt__p_simdata__ListTsimdata__Table_t[] = {{"_p_simdata__ListTsimdata__Table_t", 0, "simdata::List<simdata::Table > *", 0},{"_p_simdata__ListTsimdata__Table_t"},{0}};
static swig_type_info _swigt__p_simdata__IOError[] = {{"_p_simdata__IOError", 0, "simdata::IOError *", 0},{"_p_simdata__IOError"},{0}};
static swig_type_info _swigt__p_std__vectorTsimdata__InterfaceProxy_p_t[] = {{"_p_std__vectorTsimdata__InterfaceProxy_p_t", 0, "std::vector<simdata::InterfaceProxy * > *", 0},{"_p_std__vectorTsimdata__InterfaceProxy_p_t"},{0}};
static swig_type_info _swigt__p_simdata__InterpolatedData[] = {{"_p_simdata__InterpolatedData", 0, "simdata::InterpolatedData *", 0},{"_p_simdata__Curve", _p_simdata__CurveTo_p_simdata__InterpolatedData},{"_p_simdata__InterpolatedData"},{"_p_simdata__Table", _p_simdata__TableTo_p_simdata__InterpolatedData},{0}};
static swig_type_info _swigt__p_simdata__SimDate[] = {{"_p_simdata__SimDate", 0, "simdata::SimDate *", 0},{"_p_simdata__SimDate"},{0}};
static swig_type_info _swigt__p_std__vectorTstd__string_t[] = {{"_p_std__vectorTstd__string_t", 0, "std::vector<std::string > *", 0},{"_p_std__vectorTstd__string_t"},{0}};
static swig_type_info _swigt__p_simdata__Matrix3[] = {{"_p_simdata__Matrix3", 0, "simdata::Matrix3 *", 0},{"_p_simdata__Matrix3"},{0}};
static swig_type_info _swigt__p_simdata__InterfaceProxy[] = {{"_p_simdata__InterfaceProxy", 0, "simdata::InterfaceProxy *", 0},{"_p_simdata__InterfaceProxy"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_simdata__Table, 
_swigt__p_simdata__Date, 
_swigt__p_swig_string_bug_workaround, 
_swigt__p_std__vectorTsimdata__Path_t, 
_swigt__p_simdata__ListTsimdata__Path_t, 
_swigt__p_p_char, 
_swigt__p_simdata__Spread, 
_swigt__p_simdata__TableEntry, 
_swigt__p_simdata__InterfaceRegistry, 
_swigt__p_simdata__External, 
_swigt__p_guint32, 
_swigt__p_bool, 
_swigt__p_simdata__InvalidDate, 
_swigt__p_simdata__BadMagic, 
_swigt__p_double, 
_swigt__p_a_3__double, 
_swigt__p_std__vectorTsimdata__Spread_t, 
_swigt__p_simdata__Enumeration, 
_swigt__p_simdata__ListTsimdata__Spread_t, 
_swigt__p_simdata__FP, 
_swigt__p_simdata__hasht, 
_swigt__p_simdata__BadByteOrder, 
_swigt__p_simdata__Vector3, 
_swigt__p_simdata__DataArchive, 
_swigt__p_std__vectorTsimdata__External_t, 
_swigt__p_simdata__ListTsimdata__External_t, 
_swigt__p_simdata__CorruptArchive, 
_swigt__p_simdata__PathPointerBase, 
_swigt__p_simdata__PointerBase, 
_swigt__p_simdata__UnPacker, 
_swigt__p_std__vectorTdouble_t, 
_swigt__p_simdata__DateZulu, 
_swigt__p_std__string, 
_swigt__p_simdata__ListBase, 
_swigt__p_simdata__EnumIndexError, 
_swigt__p_simdata__IndexError, 
_swigt__p_std__vectorTint_t, 
_swigt__p_simdata__EnumTypeError, 
_swigt__p_simdata__ListTint_t, 
_swigt__p_simdata__EnumError, 
_swigt__p_simdata__Enum, 
_swigt__p_simdata__ObjectTypeMismatch, 
_swigt__p_simdata__Path, 
_swigt__p_simdata__ObjectMismatch, 
_swigt__p_simdata__ParseException, 
_swigt__p_simdata__PythonException, 
_swigt__p_simdata__Exception, 
_swigt__p_gint32, 
_swigt__p_std__ostream, 
_swigt__p_simdata__ObjectID, 
_swigt__p_a_3__simdata__Matrix3__M_t, 
_swigt__p_simdata__Object, 
_swigt__p_simdata__Packer, 
_swigt__p_simdata__Zulu, 
_swigt__p_std__vectorTfloat_t, 
_swigt__p_simdata__Curve, 
_swigt__p_std__vectorTsimdata__Enum_t, 
_swigt__p_FILE, 
_swigt__p_tm, 
_swigt__p_simdata__HashT, 
_swigt__p_int, 
_swigt__p_std__vectorTsimdata__Table_t, 
_swigt__p_std__vectorTsimdata__Curve_t, 
_swigt__p_simdata__BaseType, 
_swigt__p_simdata__ListTsimdata__Curve_t, 
_swigt__p_simdata__ListTsimdata__Table_t, 
_swigt__p_simdata__IOError, 
_swigt__p_std__vectorTsimdata__InterfaceProxy_p_t, 
_swigt__p_simdata__InterpolatedData, 
_swigt__p_simdata__SimDate, 
_swigt__p_std__vectorTstd__string_t, 
_swigt__p_simdata__Matrix3, 
_swigt__p_simdata__InterfaceProxy, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{ SWIG_PY_FLOAT,   (char*)"F1p0_60p0", 0, (double) 0.016666666666666667L, 0, 0},
{ SWIG_PY_FLOAT,   (char*)"F1p0_24p0", 0, (double) 0.041666666666666667L, 0, 0},
{ SWIG_PY_FLOAT,   (char*)"F1p0_36525p0", 0, (double) 0.000027378507871321L, 0, 0},
{ SWIG_PY_FLOAT,   (char*)"F1p0_86000p0", 0, (double) 0.000011627906976744L, 0, 0},
{ SWIG_PY_INT,     (char *)"Date_MONDAY", (long) simdata::Date::MONDAY, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Date_TUESDAY", (long) simdata::Date::TUESDAY, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Date_WEDNESDAY", (long) simdata::Date::WEDNESDAY, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Date_THURSDAY", (long) simdata::Date::THURSDAY, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Date_FRIDAY", (long) simdata::Date::FRIDAY, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Date_SATURDAY", (long) simdata::Date::SATURDAY, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Date_SUNDAY", (long) simdata::Date::SUNDAY, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Date_JANUARY", (long) simdata::Date::JANUARY, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Date_FEBRUARY", (long) simdata::Date::FEBRUARY, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Date_MARCH", (long) simdata::Date::MARCH, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Date_APRIL", (long) simdata::Date::APRIL, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Date_MAY", (long) simdata::Date::MAY, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Date_JUNE", (long) simdata::Date::JUNE, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Date_JULY", (long) simdata::Date::JULY, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Date_AUGUST", (long) simdata::Date::AUGUST, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Date_SEPTEMBER", (long) simdata::Date::SEPTEMBER, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Date_OCTOBER", (long) simdata::Date::OCTOBER, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Date_NOVEMBER", (long) simdata::Date::NOVEMBER, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Date_DECEMBER", (long) simdata::Date::DECEMBER, 0, 0, 0},
{0}};

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
    PyDict_SetItemString(d,(char*)"cvar", SWIG_globals);
    SWIG_addvarlink(SWIG_globals,(char*)"Vector3_ZERO",_wrap_Vector3_ZERO_get, _wrap_Vector3_ZERO_set);
    SWIG_addvarlink(SWIG_globals,(char*)"Vector3_XAXIS",_wrap_Vector3_XAXIS_get, _wrap_Vector3_XAXIS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"Vector3_YAXIS",_wrap_Vector3_YAXIS_get, _wrap_Vector3_YAXIS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"Vector3_ZAXIS",_wrap_Vector3_ZAXIS_get, _wrap_Vector3_ZAXIS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"InterpolatedData_Method",_wrap_InterpolatedData_Method_get, _wrap_InterpolatedData_Method_set);
    SWIG_addvarlink(SWIG_globals,(char*)"Matrix3_EPSILON",_wrap_Matrix3_EPSILON_get, _wrap_Matrix3_EPSILON_set);
    SWIG_addvarlink(SWIG_globals,(char*)"Matrix3_ZERO",_wrap_Matrix3_ZERO_get, _wrap_Matrix3_ZERO_set);
    SWIG_addvarlink(SWIG_globals,(char*)"Matrix3_IDENTITY",_wrap_Matrix3_IDENTITY_get, _wrap_Matrix3_IDENTITY_set);
    SWIG_addvarlink(SWIG_globals,(char*)"g_defaultArchive",_wrap_g_defaultArchive_get, _wrap_g_defaultArchive_set);
    SWIG_addvarlink(SWIG_globals,(char*)"g_InterfaceRegistry",_wrap_g_InterfaceRegistry_get, _wrap_g_InterfaceRegistry_set);
}

