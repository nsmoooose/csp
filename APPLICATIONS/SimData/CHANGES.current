Version 0.3.1 (in progress)
===========================

2003-04-12: onsight
            Changed all the #ifndef/#define blocks surrounding the
	    headers to use __SIMDATA_ as a prefix.  This should ensure 
	    the identifiers are unique when the headers are used in
	    another project.

2003-04-11: onsight
            Updated setup.py to install FileUtility.h.

	    Minor changes to log macro and fatal error function.
            
2003-04-11: delta
	    Finally got the changes from Onsight compile on .net ;-)
	    ^- aah, it wasn't that bad ;-) --OS

2003-03-29: onsight
            Added a DataManager class to combine access to multiple data
	    archives simultaneously and transparently.

            *** ANY MSVC USERS: PLEASE UPDATE THE PROJECT FILE TO INCLUDE ***
	    *** DATAMANAGER.CPP                                           ***

	    Added Quaternion as a base type.  It now has Python bindings
	    and an XML interface that can specify either a 3x3 matrix
	    or the 4 quaternion parameters.  The XML tag is <Quat>

	    Moved the ospath routines from CSPSim's Platform.h to
	    SimData.  They are now in FileUtility.h.

2003-03-28: delta
	    updated .net project (release mode is maintained)

	    Once SimData is compiled, in command line, type:
	    setup.py make_install_win
	    from APPLICATIONS/SimData to copy all headers and binaries needed
	    for csp.

2003-03-27: onsight
            Added push_back() methods for int, double, and string to 
	    InterfaceRegistry.  These are needed for XML <List>'s of these
	    basic types.  Lists of objects derived from BaseType already
	    worked.
	    
2003-03-26: onsight
            Modified setup.py to byte compile the python scripts during
	    installation, and to set the file permissions of these to
	    0644.

	    Added '-v' and '--verbose' flags to make_install* commands
	    of setup.py.  If set then all the copy operations will be
	    displayed.

	    Partial rewrite of the Enum/Enumeration class to share a
	    reference counted instance that hold the string to int and
	    int to string lookups.  This way, stray Enums can exist
	    happily after their Enumeration parent has died.  Probably
	    not to common, but much more pleasing aesthetically.

	    Added doxygen comments to Enum.h, Random.h, and Real.h.

	    Moved some SWIG/Python special methods to SWIG %extend
	    directives.  Still more to be done.

2003-03-26: delta
	    Removed Spread.cpp and added Noise.cpp and Real.cpp

	    Added export symbol to Table and InterpolatedData classes.

2003-03-25: onsight
            Changed #define types for InterpolatedData to class typedefs.
	    
	    Made several methods const, and added a const iterator typedef.

	    Preliminary implementation of a one-dimensional perlin noise
	    class.

	    Added some basic unit connversion functions.

	    More documentation of date classes, and a couple bug fixes in
	    Zulu.

	    Renamed Spread to Real.

	    Removed Integer and (the old) Real, which were just placeholders
	    for int and double that didn't appear to serve any purpose.

	    Added Doc directory with DOxygen config file and makefile.  Make
	    doc now runs doxygen.

2003-03-22: delta
	    Minor changes to setup.py under make_install_win

2003-03-21: onsight
            Moved Python include path setting to the main Makefile.

            Added export modifiers to Spread and enumeration classes.

            Fixed pack(unsigned) in ObjectInterface.h with static cast for
            windows.

            Got rid of generic template set() method in TypeAdapter that was
            causing problems under windows (ambiguity between set(T&) and
            set(Pointer<T>&)). Now all the set(BaseType&) methods are
            written explicitly, and must be updated by hand whenever new
            types are added.

	    Added Python version check to setup.py (also called from
	    Makefile).

	    Makefile gets Python include path automatically.

	    To facilitate the build under Windows, setup.py now copies 
	    cSimData.py from Source to SimData for make_install_win.

2003-03-20: delta
	    Fixes for msvc.

2003-03-20: onsight
            Fixed const cast in matrix * vector routines. Why doesn't gcc
            3.2.1 -Wall catch this? (!)

            Changed cSimData.i in Source to include the main version in
            Include/SimData. These differ in their %module directive. The
            main one uses SimData.cSimData, which is needed for 3rd party
            apps than import the SimData interface for SWIG. The version
            used to build SimData (in Source) uses just %module SimData.

2003-03-19: onsight
            Changed Enumeration implementation to use std::map<> instead
	    of (non-)std::hash_map<>.

	    Enumeration __getattr__ in Python now returns new Enum objects 
	    to prevent const subversion (the Enumeration members were
	    mutable from Python).  The logic for __getattr__ is more robust
	    as well.

            Added __mul__ and __rmul__ operators to Vector3 and Matrix3 to
            allow: V*V, M*M, V*M, M*V, M*F, F*M, V*F, F*V.

            Optimized Matrix3*Vector3 and Vector3*Matrix3 slightly by using
            vector members instead of integer indexing (which required nine
            extra function calls). Access to the matrix elements is also
            faster using pointer arithmatic, and the for loops have been
            unrolled by hand.

            Fixed setup.py to preserve file and directory permissions during
            installation.

            Added make_install target to setup.py which is used by the
            standard Makefile to install SimData (make install).
	    
2003-03-17: onsight
            Fixes to MS VC.net fixes.  Lather, rinse, repeat... ;-)
	    
2003-03-17: delta
            Fixes for building with MS VC.Net

	    Changes to hash stuff to make it compile with native stl .net
	    Restructured some header files

	    Added .net project

            Added a test on using stlport with msvc <= 6.0 in hash_map.h

2003-03-16: onsight
            Created a new setup.py script to allow SimData to be build and
            installed using Python DistUtils. This works on Linux/GCC but
            needs to be tested on other platforms. The Makefile will remain
            as a backup until the setup.py script is stable.

            Restructured the installation as a SimData packages, with the
            extension module (cSimData) and tools (DataCompiler) underneath.
            SimData/__init__.py now contains the code that was in
            SimData.py. The net effect is that you just import SimData as
            usual, but the data compiler is now SimData.Compiler. I'm moving
            away from a standalone compiler approach, since it depends on
            the external library that you are compiling for. Instead, the
            external program should load SimData, register its object
            interfaces, and run the compiler if needed by creating an
            instance of class Compile (from SimData.Compiler).

            Restructured the argument processing and usage messages of
            Compiler.Compile to interact better with the calling code (when
            not used as a standalone compiler). The main application should
            process any command line arguments it recognizes and pass the
            rest to Compile.parse(), catching any exceptions that are
            raised.
           
2003-03-13: onsight
            Fixed several bugs related to std::vector types
	    
	    Fix to allow inplace (anonymous) object definitions in xml

            Added a logging facility so we can filter and redirect messages
            to a file. The syntax is similar to that used in CSP:

            SIMDATA_LOG(type, severity, msg)

            Where type is one of (LOG_TYPE, LOG_ARCHIVE, LOG_REGISTRY, ...)
            and severity is one of (LOG_TRACE, LOG_DEBUG, LOG_INFO,
            LOG_WARN, LOG_ALERT, LOG_ERROR). The msg field can include the
            usual ostream operators (<<).
	    
            *** BUILD CHANGE ***
	    Added Source/LogStream.cpp to do logging.

	    *** NEW FEATURE ***
            *** POTENTIAL INCOMPATIBILITY ***
            Added a new postCreate() method in Object which is called after
            unpack() is complete. You can extend this to do additional
            object setup once the data is loaded. From now on, unpack() must
            be the exact inverse operation of pack().

	    *** NEW FEATURE ***
            Data compiler enhancements, mainly the ability to only reparse
            xml files that have changed since the archive was last
            generated. This significantly speeds up the processing.
            Specifying '--rebuild' on the command line will rebuild the
            entire archive from scratch.

            *** POTENTIAL INCOMPATIBILITY ***
            Big simplification of the various smart pointer types.
            PathPointer<T> is gone; now just use Pointer<T> for all object
            references. PathPointerBase is now PointerBase, and what was
            originally PointerBase is now ReferencedPointer (although you
            shouldn't need to use these classed directly).

