# -*-python-*-
#
# Copyright 2004 Mark Rose <mkrose@users.sourceforge.net>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


print 'COMBAT SIMULATOR PROJECT - Build System'

HELP = """
COMMON TARGETS:

  scons config        check for necessary headers and libraries
  scons all           build everything
  scons cspsim        build the main flight simulator client
  scons indexserver   build the master server needed for multiplayer
  scons dox           generate doxygen documentation
  scons runtests      build and run all unittests
  scons setup         configure the workspace (only needs to be run once)
"""

from tools import build

import logging
import os
import sys

build.CheckSConsVersion('0.96.1')
build.CheckPythonVersion('2.2.2')
build.DevpackConfig.SetMinimumVersion('0.6')


# several global targets (e.g. 'all') are shared between copied subenvironments;
# this is ok and the warning is annoying
import SCons.Warnings
SCons.Warnings.suppressWarningClass(SCons.Warnings.DuplicateEnvironmentWarning)


PACKAGES = [
	'csplib',
	'cspsim',
	'modules',
	'tools/layout',
]

INCLUDE = [
	'#/..',
	build.PYTHON_INCLUDE,
]


build.ExternalLibrary(
	name = 'jpeg',
	config = [
		build.DevpackConfig(libs='libjpeg'),
		build.WindowsLibConfig('user32'),
	])

build.ExternalLibrary(
	name = 'opengl',
	config = [
		build.WindowsLibConfig('glu32'),
		build.WindowsLibConfig('opengl32'),
	])

build.ExternalLibrary(
	name = 'windows',
	config = [
		build.WindowsLibConfig('advapi32'),
		#build.WindowsLibConfig('msvcrt', symbol='_toupper'),
		build.WindowsLibConfig('ws2_32'),
	])

build.ExternalLibrary(
	name = 'sound',
	config = [
		build.PkgConfig(package='openalpp', version='0.2'),
		build.PkgConfig(package='vorbis', version='1.1.0'),
		build.DevpackConfig(dlls='openalpp', headers=[('openalpp', 'sounddata.h')]),
		build.DevpackConfig(dlls=['libvorbis', 'libvorbisfile'], headers=[('vorbis', 'vorbisfile.h')]),
		build.DevpackConfig(dlls='libogg', headers=[('ogg', 'ogg.h')]),
	])

build.ExternalLibrary(
	name = 'gnucc2',
	config = [
		build.PkgConfig(package='libccgnu2', version='1.3.19', label='commoncpp'),
		build.DevpackConfig(dlls='ccgnu2', headers=[('cc++', 'thread.h')]),
	])

build.ExternalLibrary(
	name = 'sigc',
	config = [
		build.PkgConfig(package='sigc++-2.0', version='2.0.6', label='sigc'),
		build.DevpackConfig(dlls='sigc-2.0', headers=['sigc++config.h', ('sigc++', 'trackable.h')]),
	])

build.ExternalLibrary(
	name = 'osg',
	config = [
		build.PkgConfig(package='openscenegraph', version='0.9.8'),
		build.PkgConfig(package='openthreads', version='0.9.8'),
		build.PkgConfig(package='producer', version='0.9.8'),
		build.PkgConfig(package='osgal', version='0.3'),
		build.DevpackConfig(dlls='osgal', headers=[('osgAL', 'SoundNode')]),
		build.DevpackConfig(dlls=['osg', 'osgDB', 'osgFX', 'osgGA', 'osgParticle', 'osgProducer', 'osgText', 'osgUtil', 'OpenThreadsWin32', 'Producer'], headers=[('osg', 'Depth'), ('osgText', 'Font')]),
	])

build.ExternalLibrary(
	name = 'sdl',
	config = [
		build.CommandConfig(package='sdl', version_command='sdl-config --version', flags_command='sdl-config --cflags --libs', version='1.2.5', label='sdl'),
		build.UnixLibConfig(lib='SDL_image', symbol='IMG_Load', label='sdl image'),
		build.DevpackConfig(dlls=['SDL', 'SDL_image'], headers=[('SDL', 'SDL_mouse.h'), ('SDL', 'SDL_image.h')]),
	])


def AddSetupTarget(env):
	def SetupClientWorkspace(force):
		sys.path.insert(0, '.')
		import tools.setup
		del sys.path[0]
		setup_log = logging.Logger('setup', logging.INFO)
		setup_log.addHandler(logging.FileHandler('.setup.log', mode='wt'))
		if tools.setup.SetupClientWorkspace(force, log=setup_log):
			print 'Setup complete.'
		else:
			print 'Setup failed; see .setup.log for details.'
	sources = Split('#/tools/csp.bootstrap #/tools/setup.py')
	def SetupProxy(*args, **kw): SetupClientWorkspace(0)
	def ForceSetupProxy(*args, **kw): SetupClientWorkspace(1)
	setup = env.Command('setup', sources, SetupProxy)
	force = env.Command('force_setup', sources, ForceSetupProxy)


def AddRunTestsTarget(env):
	def RunTests(*args, **kw):
		import csp.tools.runtests
		csp.tools.runtests.runall()
	env.Command('runtests', 'tests', RunTests)


class PlatformSettings:
	def customize_win(self, env):
		env['CXXFLAGS'] = Split('/GR /MD /O2 /EHsc /W3 /nologo')
		env.AppendUnique(CPPDEFINES=Split('WIN32 __WIN32__ _USRDLL _DLL NDEBUG _CRT_SECURE_NO_DEPRECATE'))
		env.AppendUnique(LINKFLAGS=Split('/INCREMENTAL:NO /RELEASE /nologo'))
		env.AppendUnique(SHLINKFLAGS=Split('/INCREMENTAL:NO /RELEASE /nologo'))
		env.AppendUnique(LIBPATH=[build.PYTHON_LIBRARY])
		env.CopyEnvironment(Split('PATH INCLUDE LIB'))

	def customize_linux(self, env):
		env['CXXFLAGS'] = Split('-O2 -g -W -Wall -pedantic -Wno-long-long')
		env['SWIGCXXFLAGS'] = Split('-O2 -g')
		env['ARFLAGS'] = Split('cr')

	def customize_darwin(self, env):
		self.customize_linux(env)
		env['SHLINKFLAGS'] = Split('-Wl -bundle')



# platform-independent settings
settings = build.GlobalSettings(help=HELP)
settings.CXXFILESUFFIX='.cpp'
settings.CPPPATH = INCLUDE
settings.SWIGFLAGS = Split('-python -c++')
settings.SWIGINCLUDES = INCLUDE

env = settings.env()
env.CustomizeForPlatform(PlatformSettings)

build.BuildPackages(env, PACKAGES)
build.BuildRegistry.Configure(env)
build.BuildRegistry.Build()

AddSetupTarget(env)
AddRunTestsTarget(env)

