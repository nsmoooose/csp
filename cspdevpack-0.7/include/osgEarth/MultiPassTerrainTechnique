/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2009 Pelican Ventures, Inc.
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_MULTIPASSTERRAINTECHNIQUE
#define OSGEARTH_MULTIPASSTERRAINTECHNIQUE 1

#include <osg/MatrixTransform>
#include <osg/Geode>
#include <osg/Geometry>
#include <osg/Version>

#include <osgTerrain/TerrainTechnique>
#include <osgTerrain/Locator>

#include <osgEarth/Export>

using namespace osgTerrain;

namespace osgEarth {

    class OSGEARTH_EXPORT MultiPassTerrainTechnique : public osgTerrain::TerrainTechnique
{
    public:

        MultiPassTerrainTechnique();

        /** Copy constructor using CopyOp to manage deep vs shallow copy.*/
        MultiPassTerrainTechnique(const MultiPassTerrainTechnique&,const osg::CopyOp& copyop=osg::CopyOp::SHALLOW_COPY);
        
        META_Object(osgEarth, MultiPassTerrainTechnique);
#if OSG_MIN_VERSION_REQUIRED(2,9,8)        
        virtual void init(int dirtyMask, bool assumeMultiThreaded);
#else
        virtual void init();
#endif
        
        virtual Locator* computeMasterLocator();
        
        virtual osg::Vec3d computeCenterModel(Locator* masterLocator);
        
        virtual void generateGeometry(Locator* masterLocator, const osg::Vec3d& centerModel);     

		virtual osg::Geometry* createGeometryPrototype(Locator* masterLocator, const osg::Vec3d& centerModel);

		osg::Geode* createPass(unsigned int layerNum, Locator* masterLocator, const osg::Vec3d& centerModel, osg::Geometry* geometry); 

        virtual void update(osgUtil::UpdateVisitor* nv);

        virtual void cull(osgUtil::CullVisitor* nv);

        /** Traverse the terain subgraph.*/
        virtual void traverse(osg::NodeVisitor& nv);

        virtual void cleanSceneGraph();

        void setFilterBias(float filterBias);
        float getFilterBias() const { return _filterBias; }
        
        void setFilterWidth(float filterWidth);
        float getFilterWidth() const { return _filterWidth; }

        void setFilterMatrix(const osg::Matrix3& matrix);
        osg::Matrix3& getFilterMatrix() { return _filterMatrix; }
        const osg::Matrix3& getFilterMatrix() const { return _filterMatrix; }
        
        enum FilterType
        {
            GAUSSIAN,
            SMOOTH,
            SHARPEN
        };
        
        void setFilterMatrixAs(FilterType filterType);

        /** If State is non-zero, this function releases any associated OpenGL objects for
        * the specified graphics context. Otherwise, releases OpenGL objects
        * for all graphics contexts. */
        virtual void releaseGLObjects(osg::State* = 0) const;


    private:

        void updateTransparency();
        void updateGeometry();

        virtual ~MultiPassTerrainTechnique();

        osg::ref_ptr<osg::MatrixTransform> _transform;
        osg::ref_ptr<osg::Group>           _passes;
        

       
                
        float                               _filterBias;
        osg::ref_ptr<osg::Uniform>          _filterBiasUniform;
        float                               _filterWidth;
        osg::ref_ptr<osg::Uniform>          _filterWidthUniform;
        osg::Matrix3                        _filterMatrix;
        osg::ref_ptr<osg::Uniform>          _filterMatrixUniform;

        bool _terrainTileInitialized;
};

}

#endif //OSGEARTH_MULTIPASSTERRAINTECHNIQUE
