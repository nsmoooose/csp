/*
 * MultiTextureDetails
 *
 * Author(s): Mark Rose <mkrose@users.sourceforge.net>
 *
 * Copyright 2003, Mark Rose  <mkrose@users.sourceforge.net>
 * 
 * The osgChunkLod library is open source and may be redistributed and/or modified
 * under the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
 * 
 */



#ifndef _OSGMULTITEXTUREDETAILS_H_
#define _OSGMULTITEXTUREDETAILS_H_

#include <osg/Texture2D>
#include <osg/Image>
#include <osg/State>
#include <osg/StateSet>
#include <osgDB/ReadFile>
#include <string>

namespace osgChunkLod {

class MultiTextureDetails {
public:

	MultiTextureDetails() {
		glGetIntegerv(GL_MAX_TEXTURE_UNITS_ARB, &_textureUnitCount);
	}

	virtual ~MultiTextureDetails() {}

	int getTextureUnitCount() const { return _textureUnitCount; }

	virtual void init(osg::StateSet *) {}

	int getDetailCount() const { return _detailScale.size(); }

	float getDetailScale(int i) const { 
		int n = static_cast<int>(_detailScale.size());
		if (i < 0 || i >= n) return 0.0;
		return _detailScale[i];
	}

	virtual void addDetail(std::string const &file, float scale) {
		int n = static_cast<int>(_detailTextures.size());
		// reserve one unit for the base texture (light and color map)
		if (n >= _textureUnitCount-1) return;
		osg::Image *image = osgDB::readImageFile(file.c_str());
		if (image==0) {
			std::cerr << "WARNING: can't open detail texture " + file;
			return;
		}
		osg::Texture2D *detail = new osg::Texture2D;
		detail->setImage(image);
		detail->setWrap(osg::Texture2D::WRAP_S, osg::Texture2D::REPEAT);
		detail->setWrap(osg::Texture2D::WRAP_T, osg::Texture2D::REPEAT);
		detail->setUseHardwareMipMapGeneration (true);
		_detailTextures.push_back(detail);
		_detailScale.push_back(scale);
		std::cout << "ADDING DETAIL " << file << "\n";
	}

	virtual void enable(osg::State &state) const {}
	virtual void disable(osg::State &state) const {}

	virtual void map(osg::State &state, float sx, float sz, float x0, float z0) const {
		int n = static_cast<int>(_detailScale.size());
		for (int i = 0; i < n; i++) {
			float s = _detailTextures[i]->getImage()->s();
			float t = _detailTextures[i]->getImage()->t();
			float scale = 1.0 / _detailScale[i];
			s *= scale / (s+1.0);
			t *= scale / (t+1.0);
			float q[4] = { 0, 0, 0, 0 };
			state.setActiveTextureUnit(i+1);
			q[0] = s;
			q[3] = -x0 * s;
			glTexGeni(GL_S, GL_TEXTURE_GEN_MODE, GL_OBJECT_LINEAR);
			glTexGenfv(GL_S, GL_OBJECT_PLANE, q);
			q[0] = 0;
			q[2] = t;
			q[3] = -z0 * t;
			glTexGeni (GL_T, GL_TEXTURE_GEN_MODE, GL_OBJECT_LINEAR);
			glTexGenfv (GL_T, GL_OBJECT_PLANE, q);
		}
	}

	virtual void setMode(osg::State &state, bool enabled) const {}

protected:
	int _textureUnitCount;
	typedef osg::ref_ptr<osg::Texture2D> Texture;
	std::vector<Texture> _detailTextures;
	std::vector<float> _detailScale;

};


class MultiTextureARBDetails: public MultiTextureDetails {
public:

	MultiTextureARBDetails() { 
	}

	void enable(osg::State &state) const {
		int n = static_cast<int>(_detailTextures.size());
		for (int i = 0; i < n; i++) {
			state.applyTextureAttribute (i+1, _detailTextures[i].get());
			state.applyTextureMode (i+1, GL_TEXTURE_2D, true); // new

			glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);
			glTexEnvf(GL_TEXTURE_ENV, GL_COMBINE_RGB_EXT, GL_ADD);
	
			state.applyTextureMode (i+1, GL_TEXTURE_GEN_S, true); // new
			state.applyTextureMode (i+1, GL_TEXTURE_GEN_T, true); // new
		}
	}

	void disable(osg::State &state) const {
		int n = static_cast<int>(_detailTextures.size());
		for (int i = 0; i < n; i++) {
			state.applyTextureMode (i+1, GL_TEXTURE_2D, false); // new
			state.applyTextureMode (i+1, GL_TEXTURE_GEN_S, false); // new
			state.applyTextureMode (i+1, GL_TEXTURE_GEN_T, false); // new
		}
	}

	void setMode(osg::State &state, bool enabled) const {
		int n = static_cast<int>(_detailTextures.size());
		for (int i = 0; i < n; i++) {
			state.applyTextureMode(i+1, GL_TEXTURE_2D, enabled);
		}
	}
};

} // namespace osgChunkLod


#endif // __MULTITEXTURE_DETAILS_H__

