//
// nvMorph
// 
// Copyright 2003 Mark Rose <mkrose@users.sourceforge.net>
//
//

struct dataIn
{
	float4 pos : POSITION;				// vertex position, y delta in w
	float4 color : COLOR;
};


struct dataOut
{
	float4 pos : POSITION;
	float4 color : COLOR;
	float4 tex0 : TEXCOORD0;
	float4 tex1 : TEXCOORD1;
	float4 tex2 : TEXCOORD2;
	float4 tex3 : TEXCOORD3;
	float4 fogc : FOGC;
};

dataOut main (dataIn IN,
              uniform float4x4 mvp,
              uniform float4x4 mv,
	      uniform float4 texgen0,
	      uniform float4 texgen1,
	      uniform float4 texgen2,
	      uniform float4 texgen3,
	      uniform float3 scaleVal,		// sx, vertscale, sy
	      uniform float3 offsetVal,		// offx, (1 - morph_factor), offy
	      uniform float4 gfog)
{
	dataOut OUT;

	// morph
	float4 morph = float4(0.0, 0.0, 0.0f, 1.0f);
	morph.xz = offsetVal.xz + IN.pos.xz * scaleVal.xz;
	morph.y = (IN.pos.y + IN.pos.w * offsetVal.y) * scaleVal.y;
	
	// texgen
	
	OUT.tex0.xy = (IN.pos.xz * texgen0.xy) + texgen0.zw;
	OUT.tex1.xy = (IN.pos.xz - texgen1.zw) * texgen1.xy;
	OUT.tex2.xy = (IN.pos.xz - texgen2.zw) * texgen2.xy;
	OUT.tex3.xy = (IN.pos.xz - texgen3.zw) * texgen3.xy;

	float4 view = mul (mv, morph);

	float4 place = mul (mvp, morph);

	float fogh = max(0.0, 1.0 - morph.y * gfog.x) * gfog.y;
	float fogf = length(view) + fogh;

	OUT.pos = place;
	OUT.fogc.xyzw = fogf;

	//OUT.color = IN.color; //float4(1.0f,1.0f,1.0f,1.0f);
	OUT.color = float4(1.0f,1.0f,1.0f,1.0f);
	
	return OUT;
}
