 Version 0.3.3 (in progress)
===========================

2003-07-21: onsight
            Added Tools/Terrain directory for terrain tools used in
	    processing DEM data to ChunkLod and other formats.

	    Added Tools/Terrain/dem2dat which has a utility for
	    converting DEM to an intermediate binary format.  This
	    format is similar to .bt but preserves additional
	    metadata.  This is just an initial check in of the code;
	    the Makefile is very immature and no msvc project files
	    exist yet.

	    Added Tools/Terrain/tile which has a utility for combining
	    many DEM quads (in DAT format) into a large terrain 
	    elevation map, using a secant gnomonic projection.  The
	    output can either be 16-bit image tiles (for use with
	    Demeter) or a .bt format terrain map that can be converted
	    to the .chu format of osgChunkLod using tools in TU's
	    original ChunkLod package.

2003-07-19: delta
	    Commented out setTextureAttributeAndModes in SCreenInfo class.
	    Reenabled TEXDOME with those lines commented out.
	    Added back ltype.ttf (and commented out screeninfo.ttf lines).
	    Added mapping for rudder.
	    Updated .net project (CSPSimAppli is not yet updated).
	    Fix two forward declaration causing error on .net 2002.

2003-07-17: onsight
            Added speedbrake and data recording bindings
	    to the default input mappings.

	    Revised the m2k xml files to use the new FM
	    classes and define various animation.

            Added some comments to NumericalMethod and 
	    VectorField.

            Inlined a few accessor methods in VirtualScene.

            Revisions to SceneObject to support animations.

            Revisions to DynamicObject to support animations
	    and data recording.

            Revised AircraftDynamics to use FlightDynamics
	    instead of PrimaryAeroDynamics.  Added support in
	    AircraftObject for animations and data recording.
	    
	    Added speedbrake support to AircraftObject and 
	    the FlightModel.

            Added Animation, which provides a framework for
	    3D model animations.

            Added FlightDynamics, FlightModel, and DataRecorder.
	    The first two implement an alternate flight model
	    layout in which the static flight model data is
	    reused by all aircraft of a given type.  The
	    DataRecorder class allows arbitrary data output
	    channels to be defined and saved efficiently to
	    disk.  An external tool (not yet checked in) parses
	    the files to produce tab-delimited tables or
	    pdf charts (linux only for the latter).

2003-07-17: onsight
            Changed SimpleConfig.h to use windows-specific hash 
	    code for msvc version >= 1300 (instead of == 1300).

2003-07-09: onsight
	    
	    Added DataRecorder and RecorderInterface classes for
	    saving runtime data to disk.  DynamicObject has basic
	    support and hooks for using a data recorder, and 
	    AircraftObject and FlightDynamics defines several
	    output channels.  Gamescreen toggles the recorder on
	    and off for the active object using the 
	    TOGGLE_RECORDING input hook, which is bound to the 
	    'r' key by default.  A new screeninfo tag in the
	    upper right corner of the screen displays "RECORD"
	    when the recorder is on.
	    
	    The output from each recording goes to a sequentially 
	    numbered file in the current directory: data-XXX.rec,
	    where XXX starts at 000 each time CSPSim is run.  A
	    utility called rec under Tools/Recorder can convert
	    the data recording to either tab-delimited text or
	    jgraph (a text based graph description language for
	    generating postscript).  The shell script 'graph'
	    in the same directory will run the output of rec
	    through jgraph and ps2pdf to generate a pdf file
	    containing plots of all the data in one shot (if
	    you have jgraph and ghostscript installed that is).

2003-07-07: onsight

            Various animation improvements.  Using cull callback
	    now instead of update so that only visible models are
	    animated.  Changed simulation-animation binding to use
	    a shared (ref counted) instance to transfer the 
	    animation control variable. 

	    Static model transforms (offset, scale, orientation)
	    are now applied to the contact points and view point.
	    Thus these points should be specified in the original
	    model coordinates in the XML file.

2003-07-03: onsight

            Initial animation infrastructure.  Added Animation.h
	    and Animation.cpp, plus changes to ObjectModel and
	    SceneModel.  AircraftObject also has hooks into the
	    model animation to set control surface deflections.

	    The m2k model.xml file has been modified to add control
	    surface animation parameters, and a new model is used
	    that implements transformation nodes around the major
	    control surfaces and speed brakes.

	    Speedbrake support added to AircraftObject.  This is
	    hooked into new input commands: 
	    	* OPEN_AIRBRAKE
		* CLOSE_AIRBRAKE
		* INC_AIRBRAKE
		* DEC_AIRBRAKE
		* AIRBRAKE (continuous axis)
	    
	    PrimaryAeroDynamics now receives speedbrake deflection
	    from AicraftObject and adds a new linear drag term to
	    the drag coefficient (Cd_db * db).

==========> VC users add Animation.cpp to the project.

2003-07-02: onsight

            Reverted to Sky.cpp 1.15, disabled TEXDOME, and fixed
	    a bug that applied a texture to the sky dome even when 
	    TEXDOME was not defined.

2003-07-02: onsight

            Added an automatic build target to the main Makefile to
	    generate default hid mappings for aircraft.hid and 
	    gamescreen.hid if they don't already exist.  These are
	    created from the examples in Tools/HID/Examples, and
	    include reasonably up-to-date mappings for the keyboard
	    commands.  The joystick mappings may or may not work on
	    any given system, and this is not meant as a substitute
	    for reading Tools/HID/README and building your own custom
	    map files.  A similar step should be added to the Windows
	    build if possible.

            Added backface culling to model debug markers so that
	    the initial view is not obstructed by the view placement
	    marker.

	    Changed ScreenInfo font to use screeninfo.ttf instead of
	    ltype.ttf (which is cannot be freely distributed).  A new
	    supplemental data pack CSPSim-Data-Supplement-0.2.1.tgz
	    is available from the SF project page that includes a
	    GPL'd screeninfo.ttf font as well as other needed data
	    files that are missing from the older 0.2.tgz data release.
	    The fps info character spacing is slightly changed to
	    accomodate the new font, but this needs is just a bandaid
	    and needs additional work.

2003-07-01: onsight
   
            Changed Makefile.in and Source/Makefile.in to link
	    to the ChunkLod library the same way the Demeter
	    link is done.  The ChunkLod static library that is
	    used is now CSPChunkLod/lib/libosgChunkLod_csp.a.

	    Added a README file that points to the wiki
	    VBuildingCSP page, as well as the forums.

2003-07-01: delta

==========> VC USERS: you need to reinstall simdata.

	    Changed VectorField::m_dimension to protected and 
	    class DynamicalSystem now publicly inherites from 
	    VectorField.
	    Changed general stats implementation to use some 
	    "static" texts.
	    Corrected a bug in ScreenInfo ctor (m_Text allocated 
	    2 times).
	    Added a conditional test in PrimaryAeroDynamics::updateAngles() 
	    to check for a division by 0 (!).
	    Changed updating m_InfoView every 3 frame.
	    Changed ObjectStats implementation to use osg::ref_ptr 
	    and clean up data when changin object.
	    Changed XML/Data/m2k/fm.xml.
	    Added SWIG_NOINCLUDE on ccSP_wrap.cpp to enable log 
	    level from python scripts
	    Merged Onsight changes.
	    When TEXDOME is defined, sky color is not correctly updated; 
	    this happens only on windows.

2003-06-25: onsight
            
	    Small but important fixes to Source/Makefile.in:
	    Added a line to create .deps/Theater if it doesn't 
	    exist, and commented the gnucc2 flags since these
	    aren't part of autoconf yet.

2003-06-25: onsight

==========> GCC: Large parts of ChunkLodTerrain are checked in
            now, but actually running it requires that the shared
            library and vertex program be available in the Bin
	    directory.  I have this setup with symlinks in my
	    working copy, but it isn't a good long term solution.
	    Also, several XML files needed for ChunkLodTerrain
	    to run are not in cvs.  Stick with Demeter for now
	    and I'll work on getting the the interface to
	    ChunkLod cleaned up soon.

2003-06-24: onsight
            Added Profile.h which has simple but handy profiling 
	    macros.  There's a new PROFILE log target in Log.h as
	    well.

	    CSPSim.py now takes a --log parameter to specify which
	    log targets to record.  E.g.:

	        CSPSim.py --log=PROFILE,PHYSICS

	    Note that if multiple targets are specified they must
	    be separated by commas (,) with no spaces.  The target
	    names are the same as in Log.h, but without the leading
	    'CSP_'.

	    Changed EngineDynamics to only reevaluate the thrust
	    during the preSimulationStep() call, rather than during
	    update().  This should still provide more than enough time 
	    resolution.

	    Reimplemented the ground collision code to simplify the
	    design and fix some bugs.
	    
	    Reimplemented the landing gear dynamics code.  The design
	    is somewhat saner now, and most importantly it does not
	    make internal state changes during the rk evaluations.
	    The monolithic simulation method is now broken into more
	    manageable pieces, and some new features such as brake
	    temperature modeling have been added.  There is still
	    some numerical instability when the wheels are locked and
	    the system behaves as a stiff harmonic oscillator (tires).
	    When the damping is too high, extreme instabilities can
	    occur.  Even without violent behavior, the rk code generally
	    slows down and works too hard trying to simulate the
	    oscillation.  Not sure at this point how best to fix the
	    problem.

	    Updated the GCC Makefile.in.  Probably more changes still
	    needed to integrate CSPChunkLod smoothly.

==========> WIN: Changed *PhysicModel to *PhysicsModel.  Update the 
            project files accordingly:
	    	PhysicsModel.cpp
		AircraftPhysicsModel.cpp

==========> WIN: Theater code now in separate subdirectories under
            Include/Theater and Source/Theater.  All the files in
	    Source/Theater need to be added to the project.

==========> WIN: Add ChunkLodTerrain.cpp and DemeterTerrain.cpp to
            the project.

            Changed BaseDynamics::update(dt) to computeForceAndMoment(x)
	    to reduce confusion with other update methods in the sim
	    that take real (sequential) time interval parameters.

2003-06-22: onsight
            Added StateSet to text objects to disable texturing with
	    tex units 1-3.  Shouldn't be necessary, but it helps to keep
	    the text from disappearing when terrain multitexturing is
	    enabled.  This is just a bandaid, not a cure.

	    Implemented brake_limit for landing gear.  This is the
	    maximum static force (in newtons) that each brake can produce
	    (independent of tire friction).  It should be set to zero
	    for wheels that do not have brakes.

	    Fixed a bug in the brake lowpass filter that reduced the
	    brake setting by 1/2.

	    Added brake-steering linkage, which allows much tighter
	    turning radii.  Set brake_steering_linkage to -1.0 for
	    left-side gear and +1.0 for right-side gear.  An additional
	    multiplier is passed as the second parameter to setSteering.
	    Brake-steering adds to normal braking, but the total
	    braking force is still constrained to [0, brake_limit] of
	    course.

2003-06-20: delta
	    Moved updateNearGround() outside loop in AircraftPhysicModel::doSimStep.
	    Corrected kinetic parameters update in AircraftPhysicModel::doSimStep.
	    Reenabled position update in _f.
	    Changed RungeKuttaCK::MAXSTP = 16.
	    Changed binding methods for throttle in EngineDynamics/Engine class: added 
	    a postCreate() method to bind every engine with EngineDynamics::m_Throttle; 
	    added EngineDynamics::setThrottle.

2003-06-19: onsight
            Fixes in AircraftPhysicModel::doSimStep to correctly update
	    position when multiple internal timesteps are used.

	    Added missing Feature.cpp.  Together with the postCreate
	    fix to SimData, makeFeatures is now running correctly.

	    The postCreate fix also cures the gear sprite placement
	    problem when starting in the air.

	    Renamed osgChunkLod-double director to CSPChunkLod, which
	    is now in cvs.

2003-06-19: delta
==========> GCC USERS: add Engine.cpp, BaseDynamics.cpp, Collision.cpp,
	    PrimaryAeroDynamics.cpp (and remove AeroDynamics.cpp from),
	    PhysicModel.cpp, AircraftPhysicModel.cpp to the project.

==========> ALL USERS: update APPLICATIONS/CSPSim/Tools/HID/Maps/aircraft-core.map 
	    and APPLICATIONS/CSPSim/Data/XML/vehicles/aircraft directory then
	    (python) map2hid aircraft.map and RebuildData(.py).

	    Fixed a depth buffer bug on info view.
	    Added some optimize calls in VirtualScene.cpp and ObjectModel.cpp.
	    Added a basic Engine class (it uses F4 data from SP3).    
	    Added BaseDynamics.cpp to the project which is a base class for 
	    dynamics.  
	    Added a GearDynamics class (and removed old one).
	    Added a post built step in .net project to copy 
	    VisualStudio/CSPSim*/cCSP.py to Bin.
	    Added a basic ground Collision class.
	    Added #ifndef CSP_NDEBUG/#endif blocks to avoid warnings in case 
	    it s defined in CSPSim.cpp (due to macro CSP_LOG).
	    Added an altitude information in GeneralStats.
	    Added a premice of multi smoke_emitter_location support (see 
	    Engine class).
	    Hacked debug markers code to gear up/down 'g', and toggle markers 
	    with 'm'.
	    Added PrimaryAeroDynamics classes in replacement to AeroDynamics. 
	    Added AircraftPhysicModel.cpp to the project (it is not entirely 
	    clear if this derived class will subsist).
	    Added a serialized class AircraftDynamics which encapsulates 
	    dynamic aircraft classes.
	    Distinguished between air speed and speed in aircraft stats and 
	    general stats.
	    In an attempt to limit fps drop with info on screen, InfoView will 
	    be updated only every x (at the moment 5) frame and a 
	    setDisplayList(false) has been added to every text on screen. Need 
	    feedback from users about that. Also, some "static" osgText::Texts 
	    take place in Framerate ...
	    Removed #include "windows.h" in CSPSim.cpp.
	    Changed position - attitude initialization.
	    Changed /Zm1000 to 200.
	    Moved enabling/disabling smoke osg code into SceneModel.
	    Made SceneModel to derive from simdata::Referenced.
	    Made ~ScreenInfo() protected (and its subsequent children); same for
	    ~SmokeTrailSystem() and ~SceneModel().

2003-06-11: onsight
            Added a link from Feature to the associated FeatureObjectModel.

	    Added an "elevation correction" option to ObjectModel.  The
	    default is true, which means that features will be floated
	    relative to the local terrain elevation.  If false, Z=0 is
	    the reference elevation for the model.  This can be used for
	    models that are decaled to the terrain surface and already
	    incorporate the local elevation variations.  In principle,
	    this functionality and some other parts (e.g. contacts) should
	    be separated into subclases of ObjectModel (VehicleObjectModel,
	    DecalObjectModel, FeatureObjectModel, etc).

2003-05-14: onsight
            Some battlefield code cleanup.

	    New --log=XXX:YYY option for CSPSim to set the logging
	    classes.  For example: --log=APP:BATTLEFIELD:PROFILE
          
	    Use for the new SimData LLA class to specify object coordinates
	    in latitude, longitude, altitude.  TerrainObject now defines
	    a center latitude and longitude (set in XML), and the geographic
	    coordinates around this point are mapped into the sim's flat
	    coordinate space using a secant gnomonic projection.  This
	    projection is not the same as was used for the Balkan terrain, 
	    so object coordinates will not exactly match the terrain.
	    Internally, the (x, y) coordinate system is now relative to the
	    center of the terrain rather than the southwestern corner.  The
	    internal coordinates used by demeter are unchanged, so an 
	    offset is applied whenever camera positions are passed to 
	    demeter.

2003-05-06: onsight
            New RandomForestModel for building random assortments of
	    'X' quads.  I haven't been able to turn of back-face culling
	    (not sure the normals would work out right even if I could),
	    so I'm drawing 4 quads per tree (both sides of each plane of
	    the 'X').  Seems to work, and is faster than billboarding,
	    but doesn't look as nice especially wrt lighting.

	    Added normals to billboard quads, renamed the class to
	    FeatureQuad.

	    Changed the interactions of LayoutTransform, FeatureSceneModel,
	    and ElevationCorrection.  Fixed the elevation correction.

            Renamed m_fdisToObject and m_fangleRot* to m_DistanceToObject
	    and m_AngleRot* in GameScreen.  Added m_MinimumDistance which
	    is set to the active object's bounding sphere radius plus a
	    couple meters.  The prevents clipping of the model by the
	    near plane in external views.  You can still clip into other 
	    models that are nearby of course.

            Added a second SceneView to VirtualScene. The original SceneView
            is now called m_FarView, and the new one is m_NearView. NearView
            has the lighting group, and a group for objects near the camera.
            NearView is only used if this later group is not empty.
            VirtualScene::draw() first renders the FarView with the near
            clip plane set to 1-3 m. This relatively large value helps to
            reduce Z-fighting far from the camera. Then the depth buffer is
            cleared and NearView is rendered with the depth frustum from 1
            cm to 100 m. Typically the player's vehicle and interface is
            rendered in the NearView for internal views. GameScreen manages
            whether the NearView or FarView is used based on the current
            viewing mode (internal or external).

	    Additional fixes to the HID keystate tracker. 

2003-05-05: onsight
            Added HID::translate to keep track of the keyboard modifier
	    state for each key that is pressed, and force that modifier
	    state again when the key is released.   So for example, if
	    PRESS{NUM-6} maps to "begin pan-right", and RELEASE{NUM-6}
	    maps to "end pan-right", then:
	    
	      PRESS{NUM-6}, PRESS{SHIFT}, RELEASE{NUM-6}, RELEASE{SHIFT}

	    never sent the "end pan-right" message since the modifier state
	    when RELEASE{NUM-6} arrived included the shift state.  The new
	    translate method records that PRESS{NUM-6} occurred with no
	    modifiers, and temporarily overrides the modifier state when
	    the key is released.  This method is currently only called by
	    CSPSim::doInput().  It is called for all input events, and may
	    eventually find uses for other event types (e.g. joystick).
	    
2003-05-04: onsight
            Small fix to the camera positioning correction that prevents it
	    from getting "stuck" to the ground.

	    Added FeatureQuad class to Terrain.h for creating textured quads
	    used in billboards (e.g. trees).

	    Similified RandomLayoutModel to use FeatureQuad.

	    Added a couple XML files for trees under Data/XML/theater/trees

	    Moved the osgDB search path setup out of VirtualScene and into
	    CSPSim::init().  All the paths are now relative to DataPath,
	    and there is a new accessor function in Config.h to make it
	    easier to access them.  For example, getDataPath("ImagePath") 
	    will return the full path for images (DataPath + ImagePath, if 
	    ImagePath is not absolute).

2003-05-04: delta
	    Added a naive control of camera such that it keeps above ground.

	    Updated .net project. 

	    Added a /Zm 1000 parameter in .net projects to avoid fatal 
	    compiler error.

	    Changed vehicle orientation at start.

	    Changed some Atmosphere function members to return float instead
	    double to avoid some warnings.

	    Updated CSPSim.py to take account set_output <-> setOuput for 
	    log file.

	    Added a vehicle to load in testing item in ini file. The vehicle 
	    is specified in Vehicle.

2003-05-03: onsight
            Replaced CSP's logging facilities with SimData's (which 
	    originally came from CSP).  Some tweaks to the logging
	    classes needed to be made to support multiple logs at once,
	    but this seems to work fine now.  The CSP_LOG macro is
	    a little easier to use now, since it inserts the CSP_
	    prefix automatically for the class and priority levels:

	        CSP_LOG(APP, DEBUG, "a message");

	    instead of

	        CSP_LOG(CSP_APP, CSP_DEBUG, "a message");


2003-05-02: onsight
==========> VC USERS: add Theater.cpp to the project.

==========> Requires a few new 3D models that can be downloaded from
	    http://csp.sourceforge.net/new-models.tgz

            I've been making many changes and additions, but have been too
	    lax in updating the changelog.  Here's what I can remember and
	    I will try to fill in the missing pieces as I come across them.

	    Jitter fix.  The scene graph has been restructured so that the 
	    eyepoint is at the origin.  Dynamic objects, feature cells
	    (more on that below), and the terrain transform are updated 
	    every frame to compensate for motion of the camera.  Terrain
	    lattice boundaries (the old local coordinate system) only affect
	    terrain, so other objects can now move/exist continuously in
	    adjacent terrain blocks.  Particle effects are now in a global 
	    coordinate system which causes the to jitter somewhat.  This
	    could still be improves somewhat by moving the global origin
	    to the center of the theater.
	    
	    Some fixes to CSPSim::cleanup() to avoid segfaults at program
	    exit.

	    Added much infrastructure to VirtualBattlefield.  The battlefield
	    now consists of a grid of cells that track static and dynamic
	    objects, manage bubbles and aggregation/deaggregation, and 
	    dynamically add and remove objects from the scene graph.  

	    Added theater infrastructure to load static objects into the
	    battlefield from XML.  The terrain object is now part of the
	    theater.  There are some new files in Data/XML/theater to
	    provide some very basic groups of static features for testing.

	    Added aggregate(), deaggregate(), and setVisible() methods to
	    DynamicObject.  These are called automatically by the battlefield.
	    They don't do anything in DynamicObject, but can be extended
	    in subclasses to implement aggregation logic.

            Made DynamicObject::setHuman() private, and setAir() and
            setGrounded() protected. Changes of the 'human' state (when the
            active object changes) must now go through VirtualBattlefield's
            setHuman() method so that the bubbles are updated correctly.

            New WindEmitter for smoke trails that is more efficient and
	    also incorporates the current wind velocity (and gusts) when
	    generating the smoke stream.

	    New XML files in Data/XML/theater to support theater loading.

	    CSPSim finds the theater to load from the ini file.  The
	    terrain is specified in the theater.

            The model path in the ini file is now set to Models, so this
	    prefix shouldn't be specified in the xml files anymore.

