SimData - A library for efficient use of data XML in simulations.

Release 0.4.0

Copyright (C) 2002, 2003 Mark Rose <mrose@stm.lbl.gov>

See COPYING for details.

For documentation, updates, and information, visit the SimData wiki 
pages at http://csp.sourceforge.net/wiki/SimData

----------------------------------------------------------------------

CAVEATS

This library is BETA!  Do not expect it to be completely polished.
Only through testing and use will it evolve into a robust and stable 
platform for utilizing XML data in simulations.

SimData is written primarily for the Combat Simulator Project (CSP)
<http://csp.sourceforge.net>. It is, nonetheless, intended to be a fully
independent library that can be used with any application desiring fast
runtime access to large, static XML data sets.

SimData was initially developed under Linux using GCC 2.95 and 3.0.
Current development occurs mainly under GCC 3.3, although support for
GCC 3.2 is still actively maintained.  The library also receives routine 
testing under MS Visual Studio .NET 2003 as part of the Combat Simulator 
Project.  Earlier versions of VS and MSVC are no longer supported. 

If you encounter problems, please report them (with patches if possible) 
to the CSP developer's forum at http://csp.sourceforge.net/forum.


REQUIREMENTS

Minimally, SimData can operate as a standalone library that provides
a number of C++ data classes useful for simulations.  In this mode
there are no external dependencies.

To use the XML interface and data archiving features, however, requires
both SWIG and Python.  SWIG is available from http://www.swig.org, and
should be version 1.3.16 or newer.  Python is preinstalled on many
Linux systems, and prepackaged distributions for both Windows and
Linux are available from http://www.python.org.  Python version 2.2 or
newer is required.  Under Windows, be sure to add the Python path to 
your global path so that Visual Studio can find it.

If you are using MS VC6 you will also need have at least SP5 installed
and a functional STL implementation, such as STLport (version 4.5.3 or
newer).  Some newer features, such as the LUT lookup table classes
rely on advanced template constructs that aren't correctly supported
by VC6, VC7, and older versions of GCC (<3.2).  SimData functions 
correctly with these compilers as long as the templates are not 
instantiated.  All current features work with GCC 3.2 and higher, and
may work with MSVS 2003 (which reportedly comes much closer to the ISO
C++ standard).


BUILDING: ANNOUNCEMENT

There are currently several options for building SimData:

   * standard Makefiles
   * MSVS projects files
   * Python's DistUtis
   * SCons

The first two are the most standard ways to build SimData for Linux
and Windows, respectively.  Distutils is used primarily for 
installation on both platforms, and is called automatically by 
make and MSVC.  Distutils can also be used to build the project,
although this has received much less testing and probably suffers
from improper dependency tracking.  

SCons is a brand new approach to the problem and promises to greatly
simplify and unify the build process. So far the SCons scripts are very
experimental, and should only be used for testing.  

Please report any problems building SimData to the forums at

		http://csp.sourceforge.net/forum


BUILDING: LINUX

On Linux, (optionally) edit the top level Makefile to customize any
settings to your particular system. In most cases the Makefile should
set sane defaults.

Next, just run make in the top-level directory. If all goes well this
will create cSimData.py, _cSimData.so, and libSimData.a in the SimData
package directory.


BUILDING: VC6

Load SimDataMSVC.dsw and build it in release mode. 

BUILDING: VS .NET 2003

Load VisualStudio2003/SimData.sln and build in release mode.


TESTING

As a quick test, execute 'runtests.py' is the main SimData directory.  
Depending on how python is installed you may have to enter
'python runtests.py' at the command/shell prompt.  If any of the tests
fail, please post to the CSP developer's forum and we can try to find 
the problem.  


INSTALLING AND USING SIMDATA

SimData installs itself as a package in the Python site-packages
directory. The C++ headers are placed under SimData in the same
directory as Python.h.

Under Linux, run 'make install' as root.  Alternatively, you can
accomplish the same thing with 'python setup.py install'.

Under Windows, run 'python setup.py make_install_win'.  If you
are running Windows XP you may need to have sufficient privileges to 
write to the Python directories.

To use the SimData headers for development, just add the usual Python
include path (e.g. /usr/local/include/python2.2) to your list of include
paths, and include the header using the prefix "SimData/". For example,

#include <SimData/Types.h>

