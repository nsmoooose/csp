# -*-python-*-
#
# Copyright 2004 Mark Rose <mkrose@users.sourceforge.net>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
print('COMBAT SIMULATOR PROJECT - Build System')

EnsureSConsVersion(4, 6, 0)

# several global targets (e.g. 'all') are shared between copied subenvironments;
# this is ok and the warning is annoying. This warning is shown when building
# doxygen documentation where the target is index.html for both csplib and cspsim.
import SCons.Warnings
SCons.Warnings.suppressWarningClass(SCons.Warnings.DuplicateEnvironmentWarning)

import os
import sys
from tools import build

is_windows = sys.platform == 'win32'
is_linux = sys.platform == 'linux'

build.CheckPythonVersion('3.10')
build.CheckWXVersion('2.6')
build.CheckLXMLVersion()
build.DevpackConfig.SetMinimumVersion('0.6')


PACKAGES = [
    'csplib',
    'cspsim',
    'cspwf',
    'modules',
    'examples/clouds',
    'examples/clouds-scene',
    'examples/objectmodel',
    'examples/osgviewer_sdlinput',
    # 'examples/sdl-viewer',
    'examples/sky',
    'examples/terrain-demeter',
    'examples/wf-listbox',
    'examples/wf-scrollbars',
    'examples/wf-signals',
    'examples/wf-window',
    'tools/canopy',
    'tools/layout',
    'tools/layout2',
    'tools/googlemaps',
]

build.ExternalLibrary(
    name = 'jpeg',
    config = [
        build.UnixLibConfig(lib='libjpeg', symbol='jpeg_resync_to_restart'),
        build.DevpackConfig(libs='libjpeg'),
        build.WindowsLibConfig('user32'),
    ])

build.ExternalLibrary(
    name = 'opengl',
    config = [
        build.WindowsLibConfig('glu32'),
        build.WindowsLibConfig('opengl32'),
    ])

build.ExternalLibrary(
    name = 'windows',
    config = [
        build.WindowsLibConfig('advapi32'),
        build.WindowsLibConfig('ws2_32'),
    ])

build.ExternalLibrary(
    name = 'sound',
    config = [
        build.PkgConfig(package='freealut', version='0.2'),
        build.PkgConfig(package='vorbisfile', version='1.1.0'),
        build.DevpackConfig(dlls='oalpp', headers=[('openalpp', 'sounddata')]),
        build.DevpackConfig(dlls=['vorbis', 'vorbisfile'], headers=[('vorbis', 'vorbisfile.h')]),
        build.DevpackConfig(dlls='ogg', headers=[('ogg', 'ogg.h')]),
    ])

build.ExternalLibrary(
    name = 'gnucc2',
    config = [
        build.PkgConfig(package='libccgnu2', version='1.3.19', label='commoncpp'),
        build.DevpackConfig(dlls='ccgnu2', headers=[('cc++', 'thread.h')]),
    ])

build.ExternalLibrary(
    name = 'sigc',
    config = [
        build.PkgConfig(package='sigc++-2.0', version='2.0.6', label='sigc'),
        build.DevpackConfig(dlls='sigc-2.0', headers=['sigc++config.h', ('sigc++', 'trackable.h')]),
    ])

build.ExternalLibrary(
    name = 'osg',
    config = [
        build.PkgConfig(package='openscenegraph', version='3.0.1'),
        build.PkgConfig(package='openthreads', version='2.3'),
        # build.PkgConfig(package='osgal', version='0.6.1'),
        build.UnixLibConfig(lib='libosgAL'),
        build.DevpackConfig(dlls='osgal', headers=[('osgAL', 'SoundNode')]),
        build.DevpackConfig(libs=['osg', 'osgDB', 'osgFX', 'osgGA', 'osgParticle', 'osgViewer', 'osgText', 'osgUtil', 'OpenThreads'], dlls=[], headers=[('osg', 'Depth'), ('osgText', 'Font')]),
    ])

build.ExternalLibrary(
    name = 'sdl',
    config = [
        build.CommandConfig(package='sdl', version_command='sdl-config --version', flags_command='sdl-config --cflags --libs', version='1.2.5', label='sdl'),
        build.DevpackConfig(dlls=['SDL'], headers=[('SDL', 'SDL_mouse.h')]),
    ])

build.ExternalLibrary(
    name = 'boost',
    config = [
        build.UnixLibConfig(lib='boost_system', label='boost system'),
        build.UnixLibConfig(lib='boost_filesystem', label='boost filesystem'),
    ])

build.ExternalLibrary(
    name = 'python',
    config = [
        build.UnixLibConfig(lib='python%d.%d' % tuple(sys.version_info[:2]), label='python library'),
    ])


Help("""
COMMON TARGETS:

  scons config           check for necessary headers and libraries
  scons all              build everything
  scons all debug=1      build everything in debug mode (windows, linux)
  scons all debug=2      build everything in full debug mode (windows)
  scons cspsim           build the main flight simulator client
  scons layout           build the theater layout tool version 1
  scons layout2          build the theater layout tool version 2
  scons googlemaps       build the googlemaps tool

  scons dox              generate doxygen documentation

  scons tests            build all unittests
  scons runtests         build and run all unittests
  scons csplib.runtests  build and run all unittests in csplib

  scons examples         build all examples
""")

INCLUDE = [
    '#/..',
    build.GetPythonInclude(),
    os.environ.get('CSPDEVPACK', '') + "\\include\\AL"
]

env = Environment(tools=['default', 'swig'])
env.Replace(CXXFILESUFFIX='.cpp')
env.Replace(CPPPATH=INCLUDE)
env.Replace(SWIGFLAGS=Split('-python -c++'))
env.Replace(SWIGPATH=INCLUDE)

if is_windows:
    # The following compiler warnings has been disabled:
    # warning C4251: 'X' : struct 'Y' needs to have dll-interface to be used by clients of class 'Z'
    # warning C4275: non dll-interface class 'X' used as base for dll-interface class 'Y'
    # warning C4290: C++ exception specification ignored except to indicate a function is not __declspec(nothrow)

    debug = ARGUMENTS.get('debug', 0)
    if int(debug) == 0:
        print('Building release configuration')
        env.Replace(CXXFLAGS=Split('/GR /MD /O2 /EHsc /W3 /nologo /wd4251 /wd4275 /wd4290'))
        env.AppendUnique(CPPDEFINES=Split('WIN32 __WIN32__ _USRDLL _DLL NDEBUG _CRT_SECURE_NO_DEPRECATE _USE_MATH_DEFINES'))
        env.AppendUnique(LINKFLAGS=Split('/INCREMENTAL:NO /RELEASE /nologo'))
        env.AppendUnique(SHLINKFLAGS=Split('/INCREMENTAL:NO /RELEASE /nologo'))
        env.AppendUnique(LIBPATH=[build.GetPythonLibrary()])
        env.CopyEnvironment(Split('PATH INCLUDE LIB'))
    elif int(debug) == 1:
        print('Building debug configuration')
        env.Replace(CXXFLAGS=Split('/GR /MD /Zi /EHsc /W3 /nologo /wd4251 /wd4275 /wd4290'))
        env.AppendUnique(CPPDEFINES=Split('WIN32 __WIN32__ _USRDLL _DLL NDEBUG _CRT_SECURE_NO_DEPRECATE _USE_MATH_DEFINES'))
        env.AppendUnique(LINKFLAGS=Split('/INCREMENTAL:NO /DEBUG /nologo'))
        env.AppendUnique(SHLINKFLAGS=Split('/INCREMENTAL:NO /DEBUG /nologo'))
        env.AppendUnique(LIBPATH=[build.GetPythonLibrary()])
        env.CopyEnvironment(Split('PATH INCLUDE LIB'))
    else:
        print('Building full debug configuration')
        env.Replace(CONFIG_DEBUG=debug)
        env.Replace(CXXFLAGS=Split('/GR /MDd /Zi /EHsc /W3 /nologo /wd4251 /wd4275 /wd4290'))
        env.AppendUnique(CPPDEFINES=Split('WIN32 __WIN32__ _USRDLL _DLL _CRT_SECURE_NO_DEPRECATE _USE_MATH_DEFINES'))
        env.AppendUnique(LINKFLAGS=Split('/INCREMENTAL:NO /DEBUG /nologo'))
        env.AppendUnique(SHLINKFLAGS=Split('/INCREMENTAL:NO /DEBUG /nologo'))
        env.AppendUnique(LIBPATH=[build.GetPythonLibrary()])
        env.CopyEnvironment(Split('PATH INCLUDE LIB'))

if is_linux:
    debug = ARGUMENTS.get('debug', 0)
    if int(debug) == 0:
        print('Building release configuration')
        gcc = build.GetGCCVersion()
        env.Replace(CXXFLAGS=Split('-O2 -W -Wall -pedantic -fno-strict-aliasing -fvisibility=hidden -Wno-unused-local-typedefs'))
        env.Replace(SWIGCXXFLAGS=Split('-O2 -g'))
        env.Replace(ARFLAGS=Split('cr'))
    elif int(debug) == 1:
        print('Building debug configuration (no optimizations)')
        gcc = build.GetGCCVersion()
        env.Replace(CXXFLAGS=Split('-O0 -g -W -Wall -pedantic -fno-strict-aliasing -fvisibility=hidden -Wno-unused-local-typedefs'))
        env.Replace(SWIGCXXFLAGS=Split('-O2 -g'))
        env.Replace(ARFLAGS=Split('cr'))

        # Disable inlining to prevent valgrind to be confused.
        env.AppendUnique(CXXFLAGS=Split('-fno-inline'))
        env.AppendUnique(CXXFLAGS=Split('-fno-builtin'))

        # Some stack protection mechanisms can initialize stack variables,
        # hiding uninitialized memory issues from Valgrind.
        env.AppendUnique(CXXFLAGS=Split('-fno-stack-protector'))

        # LTO can inline functions across translation units, making
        # Valgrindâ€™s checks less effective.
        env.AppendUnique(CXXFLAGS=Split('-fno-lto'))


build.GlobalSetup(env)

# Make it possible for clang to set its tools. This makes it possible to use
# scan-build tool to analyze the code. Instructions to set this up:
# https://stackoverflow.com/a/9305378
env["CC"] = os.getenv("CC") or env["CC"]
env["CXX"] = os.getenv("CXX") or env["CXX"]
env["ENV"].update(x for x in os.environ.items() if x[0].startswith("CCC_"))

env.ReadPackages(PACKAGES)
env.FinalizePackages()

Default("all")
