.TH "UnixSocket" 3 "22 May 2003" "CommonC++" \" -*- nroff -*-
.ad l
.nh
.SH NAME
UnixSocket \- Unix domain sockets are used for stream based connected sessions between processes on the same machine. bound server for Unix domain streams and sessions. 
.SH SYNOPSIS
.br
.PP
\fC#include <unix.h>\fP
.PP
Inherits \fBSocket\fP.
.PP
.SS "Public Methods"

.in +1c
.ti -1c
.RI "\fBUnixSocket\fP (const char *pathname, int backlog=5)"
.br
.RI "\fIA Unix domain 'server' is created as a Unix domain socket that is bound to a pathname and that has a backlog queue to listen for connection requests.\fP"
.ti -1c
.RI "bool \fBisPendingConnection\fP (\fBtimeout_t\fP timeout=TIMEOUT_INF)"
.br
.RI "\fInot const -- jfc\fP"
.ti -1c
.RI "virtual \fB~UnixSocket\fP ()"
.br
.RI "\fIUse base socket handler for ending this socket.\fP"
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBUnixStream\fP"
.br
.ti -1c
.RI "class \fBSocketPort\fP"
.br
.ti -1c
.RI "class \fBunixstream\fP"
.br
.in -1c
.SH "DETAILED DESCRIPTION"
.PP 
Unix domain sockets are used for stream based connected sessions between processes on the same machine. bound server for Unix domain streams and sessions.
.PP
An implicit and unique UnixSocket object exists in Common C++ to represent a bound Unix domain socket acting as a 'server' for receiving connection requests. This class is not part of \fBUnixStream\fP because such objects normally perform no physical I/O (read or write operations) other than to specify a listen backlog queue and perform 'accept' operations for pending connections.
.PP
\fBAuthor: \fP
.in +1c
Alex Pavloff <alex@pavloff.net> 
.PP
.SH "CONSTRUCTOR & DESTRUCTOR DOCUMENTATION"
.PP 
.SS "UnixSocket::UnixSocket (const char * pathname, int backlog = 5)"
.PP
A Unix domain 'server' is created as a Unix domain socket that is bound to a pathname and that has a backlog queue to listen for connection requests.
.PP
If the server cannot be created, an exception is thrown.
.PP
\fBParameters: \fP
.in +1c
.TP
\fB\fIpathname\fP\fP
pathname to socket file 
.TP
\fB\fIbacklog\fP\fP
size of connection request queue. 
.SS "virtual UnixSocket::~UnixSocket ()\fC [inline, virtual]\fP"
.PP
Use base socket handler for ending this socket.
.PP
.SH "MEMBER FUNCTION DOCUMENTATION"
.PP 
.SS "bool UnixSocket::isPendingConnection (\fBtimeout_t\fP timeout = TIMEOUT_INF)\fC [inline]\fP"
.PP
not const -- jfc
.PP
.SH "FRIENDS AND RELATED FUNCTION DOCUMENTATION"
.PP 
.SS "friend class SocketPort\fC [friend]\fP"
.PP
.SS "friend class unixstream\fC [friend]\fP"
.PP
.SS "friend class UnixStream\fC [friend]\fP"
.PP


.SH "AUTHOR"
.PP 
Generated automatically by Doxygen for CommonC++ from the source code.
