SimData - A library for efficient use of data XML in simulations.

Release 0.4.0

Copyright (C) 2002, 2003 Mark Rose <mrose@stm.lbl.gov>

See COPYING for details.

----------------------------------------------------------------------

CAVEATS

This library is ALPHA!  Do not expect it to be polished in any way.
It does work, at least under the proper conditions, which is why it
has been released.  Only through testing and use will it evolve into
a robust and stable platform for utilizing XML data in simulations.

SimData is written primarily for the Combat Simulator Project (CSP)
<http://csp.sourceforge.net>.   It is, nonetheless, intended to be
a fully independent library that can be used with any application
desiring fast runtime axis to large, static XML data sets.

SimData was developed entirely under Linux using GCC 2.95 and 3.0.
It is intended to compile with other versions of GCC and under other
the Windows operating system, but this has not been tested and I
expect there will be some initial incompatibilities.  If you
encounter problems, please report them (with patches if possible) to 
the CSP developer's forum at http://csp.sourceforge.net/forum.



PRE-BUILDING

There are Makefiles for Linux/GCC, but no build system for other
platforms.  I'm relying on users of such platforms to provide build
scripts using the Linux Makefiles as a starting point.  These will
be included in CVS as soon as they are available.

On Linux, edit the top level Makefile to customize any settings
to your particular system.  The path to the Python headers is an
example of a parameter you might want to check.  Eventually I'll
make some autoconf scripts to handle this step automatically.

You will need both SWIG and Python in order to utilize SimData.
While it may be technically possible to build SimData without
these tools, the Data Compiler (which is essential to the use
of SimData) is currently written in Python and relies on the 
SWIG-wrapped interface to SimData, so there is little point in
building SimData without these.  

Python can be obtained in a number of convenient installation 
packages from sources listed at http://www.python.org.  Be sure 
to use Python 2.2 or higher. It may work with Python 2.1 but I 
make no guarantees.

For SWIG, version 1.3.16 or higher is recommended.  SWIG can
be downloaded as source or binary from http://www.swig.org.


BUILDING

Just run make in the top-level directory.  If all goes well
this will create _cSimData.so and libSimData.a in the Source
directory.  


TESTING

As a quick test, change to the Source directory and run Python.  
Try typing "import SimData".  You should see a line similar to 
"loaded @ 0x4883012".  If not, something went wrong... post to 
the CSP developer's forum and we can try to find the problem.


USING SIMDATA WITH CSPSIM

The new CSP application called CSPSim relies on SimData in
two ways.  First, libSimData.a is statically linked to make
the CSPSim executable.  Second, the simulation data for CSPSim
needs to be compiled from XML source files to a binary data 
archive using the data compiler application included with
SimData.  This Python program is found in the directory
Tools/DataCompiler.  Once you have built your CSPSim executable,
go to Tools/DataCompiler and run Compiler.py (from a command
prompt on windows you would probably need to type something like
"python Compiler.py").  If the Compiler can't find CSPSim
initially, it will prompt you to enter a path to CSPSim.  This
path is saved in a file named .csp_path so you shouldn't have
to do this more than once.  The Compiler will then print a
usage message and exit.  To compile the data for CSPSim, you
must specify the top level data directory to archive, and the
name of the output archive.  Given the standard location of
the files in CVS, you would type:

./Compiler.py ../../../CSPSim/Data/Sim ../../../CSPSim/Data/Sim.dar

This will parse all the XML files under CSPSim/Data/Sim and create
the a binary archive (named Sim.dar) needed to run CSPSim.  A
script named "make_simdar" that runs the above command is provided 
for your convienience.  This must be rerun whenever you modify
the XML data files to incorporate the changes into Sim.dar.


BUILDING on Windows with msvc++6(sp5), stlport-4.5.3 (hints)

1) Install python2.2 and swig 1.3.17
2) Add python path to your global path
3) Load SimDataMSVC.dsw
4) Build it in release mode; in process, it should create a new file
called cSimData_wrap.cpp (this file name should already be in
project/Source) from cSimData.i which is parsed by swig.
5) Testing procedure is same as above.