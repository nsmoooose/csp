Version 0.3.1 (in progress)
===========================
2003-03-20: onsight
            Fixed const cast in matrix * vector routines.  Why doesn't
	    gcc 3.2.1 -Wall catch this? (!)

	    Changed cSimData.i in Source to include the main version in
	    Include/SimData.  These differ in their %module directive.
	    The main one uses SimData.cSimData, which is needed for 3rd
	    party apps than import the SimData interface for SWIG.  The
	    version used to build SimData (in Source) uses just
	    %module SimData.

2003-03-19: onsight
            Changed Enumeration implementation to use std::map<> instead
	    of (non-)std::hash_map<>.

	    Enumeration __getattr__ in Python now returns new Enum objects 
	    to prevent const subversion (the Enumeration members were
	    mutable from Python).  The logic for __getattr__ is more robust
	    as well.

	    Added __mul__ and __rmul__ operators to Vector3 and Matrix3
	    to allow: V*V, M*M, V*M, M*V, M*F, F*M, V*F, F*V.

	    Optimized Matrix3*Vector3 and Vector3*Matrix3 slightly by
	    using vector members instead of integer indexing (which
	    required nine extra function calls).  Access to the matrix
	    elements is also faster using pointer arithmatic, and the
	    for loops have been unrolled by hand.

	    Fixed setup.py to preserve file and directory permissions
	    during installation.

	    Added make_install target to setup.py which is used by the
	    standard Makefile to install SimData (make install).
	    
2003-03-17: onsight
            Fixes to MS VC.net fixes.  Lather, rinse, repeat... ;-)
	    
2003-03-17: delta
            Fixes for building with MS VC.Net

2003-03-16: onsight
            Created a new setup.py script to allow SimData to be build and
            installed using Python DistUtils. This works on Linux/GCC but
            needs to be tested on other platforms. The Makefile will remain
            as a backup until the setup.py script is stable.

            Restructured the installation as a SimData packages, with the
            extension module (cSimData) and tools (DataCompiler) underneath.
            SimData/__init__.py now contains the code that was in
            SimData.py. The net effect is that you just import SimData as
            usual, but the data compiler is now SimData.Compiler. I'm moving
            away from a standalone compiler approach, since it depends on
            the external library that you are compiling for. Instead, the
            external program should load SimData, register its object
            interfaces, and run the compiler if needed by creating an
            instance of class Compile (from SimData.Compiler).

            Restructured the argument processing and usage messages of
            Compiler.Compile to interact better with the calling code (when
            not used as a standalone compiler). The main application should
            process any command line arguments it recognizes and pass the
            rest to Compile.parse(), catching any exceptions that are
            raised.
           
2003-03-13: onsight
            Fixed several bugs related to std::vector types
	    
	    Fix to allow inplace (anonymous) object definitions in xml

            Added a logging facility so we can filter and redirect messages
            to a file. The syntax is similar to that used in CSP:

            SIMDATA_LOG(type, severity, msg)

            Where type is one of (LOG_TYPE, LOG_ARCHIVE, LOG_REGISTRY, ...)
            and severity is one of (LOG_TRACE, LOG_DEBUG, LOG_INFO,
            LOG_WARN, LOG_ALERT, LOG_ERROR). The msg field can include the
            usual ostream operators (<<).
	    
            *** BUILD CHANGE ***
	    Added Source/LogStream.cpp to do logging.

	    *** NEW FEATURE ***
            *** POTENTIAL INCOMPATIBILITY ***
            Added a new postCreate() method in Object which is called after
            unpack() is complete. You can extend this to do additional
            object setup once the data is loaded. From now on, unpack() must
            be the exact inverse operation of pack().

	    *** NEW FEATURE ***
            Data compiler enhancements, mainly the ability to only reparse
            xml files that have changed since the archive was last
            generated. This significantly speeds up the processing.
            Specifying '--rebuild' on the command line will rebuild the
            entire archive from scratch.

            *** POTENTIAL INCOMPATIBILITY ***
            Big simplification of the various smart pointer types.
            PathPointer<T> is gone; now just use Pointer<T> for all object
            references. PathPointerBase is not PointerBase, and what was
            originally PointerBase is now ReferencedPointer (although you
            shouldn't need to use these classed directly).

