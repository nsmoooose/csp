// Combat Simulator Project
// Copyright (C) 2004 The Combat Simulator Project
// http://csp.sourceforge.net
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.


/**
 * @file glDiagnostics.cpp
 *
 **/


#include <csp/cspsim/glDiagnostics.h>

#include <csp/csplib/util/Log.h>
#include <csp/csplib/util/Verify.h>

#include <sstream>

#ifdef _MSC_VER
#include <windows.h>
#endif

#ifndef __APPLE__
#include <GL/gl.h>
#else // apple
#include <OpenGL/gl.h>
#endif

namespace csp {

namespace {
	enum {
		INTv,
		BOOLv,
		FLOATv,
		DOUBLEv,
		INTv2,
		INTv4,
		BOOLv4,
		FLOATv4,
		FLOATv16,
		TEXENViv,
		TEXENVfv4,
		TEXGENiv
	};
}


GlStateSnapshot::GlStateSnapshot() {
	capture();
}


void GlStateSnapshot::log(std::string id, unsigned key, int type) {
	GLint ival[4];
	GLboolean bval[4];
	GLdouble dval[4];
	GLfloat fval[16];
	ival[0] = ival[1] = ival[2] = ival[3] = 0;
	fval[0] = fval[1] = fval[2] = fval[3] = 0;
	dval[0] = dval[1] = dval[2] = dval[3] = 0;
	bval[0] = bval[1] = bval[2] = bval[3] = false;
	std::ostringstream os;
	switch (type) {
		case INTv:
			glGetIntegerv(key, ival);
			os << "GL state: " << id << " " << ival[0];
			break;
		case BOOLv:
			glGetBooleanv(key, bval);
			os << "GL state: " << id << " " << (bval[0] ? "yes" : "no");
			break;
		case FLOATv:
			glGetFloatv(key, fval);
			os << "GL state: " << id << " " << fval[0];
			break;
		case DOUBLEv:
			glGetDoublev(key, dval);
			os << "GL state: " << id << " " << dval[0];
			break;
		case INTv2:
			glGetIntegerv(key, ival);
			os << "GL state: " << id << " " << ival[0] << " " << ival[1];
			break;
		case INTv4:
			glGetIntegerv(key, ival);
			os << "GL state: " << id << " " << ival[0] << " " << ival[1] << " " << ival[2] << " " << ival[3];
			break;
		case BOOLv4:
			glGetBooleanv(key, bval);
			os << "GL state: " << id << " " << (bval[0] ? 'y':'n') << " " << (bval[1] ? 'y':'n') << " " << (bval[2] ? 'y':'n') << " " << (bval[3] ? 'y':'n');
			break;
		case FLOATv4:
			glGetFloatv(key, fval);
			os << "GL state: " << id << " " << fval[0] << " " << fval[1] << " " << fval[2] << " " << fval[3];
			break;
		case FLOATv16:
			glGetFloatv(key, fval);
			os << "GL state: " << id << "0 " << fval[0] << " " << fval[1] << " " << fval[2] << " " << fval[3] << "\n";
			os << "GL state: " << id << "1 " << fval[4] << " " << fval[5] << " " << fval[6] << " " << fval[7] << "\n";
			os << "GL state: " << id << "2 " << fval[8] << " " << fval[9] << " " << fval[10] << " " << fval[11] << "\n";
			os << "GL state: " << id << "3 " << fval[12] << " " << fval[13] << " " << fval[14] << " " << fval[15];
			break;
		case TEXENViv:
			glGetTexEnviv(GL_TEXTURE_ENV, key, ival);
			os << "GL state: " << id << " " << ival[0];
			break;
		case TEXENVfv4:
			glGetTexEnvfv(GL_TEXTURE_ENV, key, fval);
			os << "GL state: " << id << " " << fval[0] << " " << fval[1] << " " << fval[2] << " " << fval[3];
			break;
		case TEXGENiv:
			glGetTexGeniv(GL_Q, key, ival); ival[3] = ival[0];
			glGetTexGeniv(GL_R, key, ival); ival[2] = ival[0];
			glGetTexGeniv(GL_T, key, ival); ival[1] = ival[0];
			glGetTexGeniv(GL_S, key, ival);
			os << "GL state: " << id << " " << ival[0] << " " << ival[1] << " " << ival[2] << " " << ival[3];
			break;
	}
	m_StateLog.push_back(os.str());
}


#define GLSTATESNAPSHOT_LOG(id, type) log(#id, id, type)

void GlStateSnapshot::capture() {
	m_StateLog.clear();
	GLSTATESNAPSHOT_LOG(GL_ACCUM_ALPHA_BITS, INTv);
	GLSTATESNAPSHOT_LOG(GL_ACCUM_BLUE_BITS, INTv);
	GLSTATESNAPSHOT_LOG(GL_ACCUM_CLEAR_VALUE, FLOATv4);
	GLSTATESNAPSHOT_LOG(GL_ACCUM_GREEN_BITS, INTv);
	GLSTATESNAPSHOT_LOG(GL_ACCUM_RED_BITS, INTv);
	GLSTATESNAPSHOT_LOG(GL_ALPHA_BIAS, FLOATv);
	GLSTATESNAPSHOT_LOG(GL_ALPHA_BITS, INTv);
	GLSTATESNAPSHOT_LOG(GL_ALPHA_SCALE, FLOATv);
	GLSTATESNAPSHOT_LOG(GL_ALPHA_TEST, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_ALPHA_TEST_FUNC, INTv);
	GLSTATESNAPSHOT_LOG(GL_ALPHA_TEST_REF, INTv);
	GLSTATESNAPSHOT_LOG(GL_ATTRIB_STACK_DEPTH, INTv);
	GLSTATESNAPSHOT_LOG(GL_AUTO_NORMAL, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_AUX_BUFFERS, INTv);
	GLSTATESNAPSHOT_LOG(GL_BLEND, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_BLEND_DST, INTv);
	GLSTATESNAPSHOT_LOG(GL_BLEND_SRC, INTv);
	GLSTATESNAPSHOT_LOG(GL_BLUE_BIAS, FLOATv);
	GLSTATESNAPSHOT_LOG(GL_BLUE_BITS, INTv);
	GLSTATESNAPSHOT_LOG(GL_BLUE_SCALE, FLOATv);
	GLSTATESNAPSHOT_LOG(GL_CLIENT_ATTRIB_STACK_DEPTH, INTv);
	GLSTATESNAPSHOT_LOG(GL_CLIP_PLANE1, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_CLIP_PLANE2, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_CLIP_PLANE3, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_CLIP_PLANE4, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_COLOR_ARRAY, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_COLOR_ARRAY_SIZE, INTv);
	GLSTATESNAPSHOT_LOG(GL_COLOR_ARRAY_STRIDE, INTv);
	GLSTATESNAPSHOT_LOG(GL_COLOR_ARRAY_TYPE, INTv);
	GLSTATESNAPSHOT_LOG(GL_COLOR_CLEAR_VALUE, FLOATv4);
	GLSTATESNAPSHOT_LOG(GL_COLOR_LOGIC_OP, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_COLOR_MATERIAL, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_COLOR_MATERIAL_FACE, INTv);
	GLSTATESNAPSHOT_LOG(GL_COLOR_MATERIAL_PARAMETER, INTv);
	GLSTATESNAPSHOT_LOG(GL_COLOR_WRITEMASK, BOOLv4);
	GLSTATESNAPSHOT_LOG(GL_CULL_FACE, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_CULL_FACE_MODE, INTv);
	GLSTATESNAPSHOT_LOG(GL_CURRENT_COLOR, FLOATv4);
	GLSTATESNAPSHOT_LOG(GL_CURRENT_INDEX, INTv);
	GLSTATESNAPSHOT_LOG(GL_CURRENT_NORMAL, FLOATv4);
	GLSTATESNAPSHOT_LOG(GL_CURRENT_RASTER_COLOR, FLOATv4);
	GLSTATESNAPSHOT_LOG(GL_CURRENT_RASTER_DISTANCE, FLOATv);
	GLSTATESNAPSHOT_LOG(GL_CURRENT_RASTER_INDEX, INTv);
	GLSTATESNAPSHOT_LOG(GL_CURRENT_RASTER_POSITION, FLOATv4);
	GLSTATESNAPSHOT_LOG(GL_CURRENT_RASTER_POSITION_VALID, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_CURRENT_RASTER_TEXTURE_COORDS, FLOATv4);
	GLSTATESNAPSHOT_LOG(GL_CURRENT_TEXTURE_COORDS, FLOATv4);
	GLSTATESNAPSHOT_LOG(GL_DEPTH_BIAS, FLOATv);
	GLSTATESNAPSHOT_LOG(GL_DEPTH_BITS, INTv);
	GLSTATESNAPSHOT_LOG(GL_DEPTH_CLEAR_VALUE, FLOATv);
	GLSTATESNAPSHOT_LOG(GL_DEPTH_FUNC, INTv);
	GLSTATESNAPSHOT_LOG(GL_DEPTH_RANGE, FLOATv);
	GLSTATESNAPSHOT_LOG(GL_DEPTH_SCALE, FLOATv);
	GLSTATESNAPSHOT_LOG(GL_DEPTH_TEST, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_DEPTH_WRITEMASK, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_DITHER, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_DOUBLEBUFFER, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_DRAW_BUFFER, INTv);
	GLSTATESNAPSHOT_LOG(GL_EDGE_FLAG, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_EDGE_FLAG_ARRAY, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_EDGE_FLAG_ARRAY_STRIDE, INTv);
	GLSTATESNAPSHOT_LOG(GL_FOG, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_FOG_COLOR, FLOATv4);
	GLSTATESNAPSHOT_LOG(GL_FOG_DENSITY, FLOATv);
	GLSTATESNAPSHOT_LOG(GL_FOG_END, FLOATv);
	GLSTATESNAPSHOT_LOG(GL_FOG_HINT, INTv);
	GLSTATESNAPSHOT_LOG(GL_FOG_INDEX, INTv);
	GLSTATESNAPSHOT_LOG(GL_FOG_MODE, INTv);
	GLSTATESNAPSHOT_LOG(GL_FOG_START, FLOATv);
	GLSTATESNAPSHOT_LOG(GL_FRONT_FACE, INTv);
	GLSTATESNAPSHOT_LOG(GL_GREEN_BIAS, FLOATv);
	GLSTATESNAPSHOT_LOG(GL_GREEN_BITS, INTv);
	GLSTATESNAPSHOT_LOG(GL_GREEN_SCALE, FLOATv);
	GLSTATESNAPSHOT_LOG(GL_INDEX_ARRAY, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_INDEX_ARRAY_STRIDE, INTv);
	GLSTATESNAPSHOT_LOG(GL_INDEX_ARRAY_TYPE, INTv);
	GLSTATESNAPSHOT_LOG(GL_INDEX_BITS, INTv);
	GLSTATESNAPSHOT_LOG(GL_INDEX_CLEAR_VALUE, INTv);
	GLSTATESNAPSHOT_LOG(GL_INDEX_LOGIC_OP, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_INDEX_MODE, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_INDEX_OFFSET, INTv);
	GLSTATESNAPSHOT_LOG(GL_INDEX_SHIFT, INTv);
	GLSTATESNAPSHOT_LOG(GL_INDEX_WRITEMASK, INTv);
	GLSTATESNAPSHOT_LOG(GL_LIGHT0, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_LIGHT1, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_LIGHT2, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_LIGHTING, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_LIGHT_MODEL_AMBIENT, FLOATv4);
	GLSTATESNAPSHOT_LOG(GL_LIGHT_MODEL_LOCAL_VIEWER, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_LIGHT_MODEL_TWO_SIDE, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_LINE_SMOOTH, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_LINE_SMOOTH_HINT, INTv);
	GLSTATESNAPSHOT_LOG(GL_LINE_STIPPLE, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_LINE_STIPPLE_PATTERN, INTv);
	GLSTATESNAPSHOT_LOG(GL_LINE_STIPPLE_REPEAT, INTv);
	GLSTATESNAPSHOT_LOG(GL_LINE_WIDTH, FLOATv);
	GLSTATESNAPSHOT_LOG(GL_LINE_WIDTH_GRANULARITY, FLOATv);
	GLSTATESNAPSHOT_LOG(GL_LINE_WIDTH_RANGE, FLOATv4);
	GLSTATESNAPSHOT_LOG(GL_LIST_BASE, INTv);
	GLSTATESNAPSHOT_LOG(GL_LIST_INDEX, INTv);
	GLSTATESNAPSHOT_LOG(GL_LIST_MODE, INTv);
	GLSTATESNAPSHOT_LOG(GL_LOGIC_OP, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_LOGIC_OP_MODE, INTv);
	GLSTATESNAPSHOT_LOG(GL_MAP1_COLOR_4, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_MAP1_GRID_DOMAIN, FLOATv4);
	GLSTATESNAPSHOT_LOG(GL_MAP1_GRID_SEGMENTS, INTv);
	GLSTATESNAPSHOT_LOG(GL_MAP1_INDEX, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_MAP1_NORMAL, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_MAP1_TEXTURE_COORD_1, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_MAP1_TEXTURE_COORD_2, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_MAP1_TEXTURE_COORD_3, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_MAP1_TEXTURE_COORD_4, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_MAP1_VERTEX_3, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_MAP1_VERTEX_4, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_MAP2_COLOR_4, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_MAP2_GRID_DOMAIN, FLOATv4);
	GLSTATESNAPSHOT_LOG(GL_MAP2_GRID_SEGMENTS, INTv2);
	GLSTATESNAPSHOT_LOG(GL_MAP2_INDEX, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_MAP2_NORMAL, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_MAP2_TEXTURE_COORD_1, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_MAP2_TEXTURE_COORD_2, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_MAP2_TEXTURE_COORD_3, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_MAP2_TEXTURE_COORD_4, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_MAP2_VERTEX_3, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_MAP2_VERTEX_4, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_MAP_COLOR, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_MAP_STENCIL, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_MATRIX_MODE, INTv);
	GLSTATESNAPSHOT_LOG(GL_MAX_CLIENT_ATTRIB_STACK_DEPTH, INTv);
	GLSTATESNAPSHOT_LOG(GL_MAX_ATTRIB_STACK_DEPTH, INTv);
	GLSTATESNAPSHOT_LOG(GL_MAX_CLIP_PLANES, INTv);
	GLSTATESNAPSHOT_LOG(GL_MAX_EVAL_ORDER, INTv);
	GLSTATESNAPSHOT_LOG(GL_MAX_LIGHTS, INTv);
	GLSTATESNAPSHOT_LOG(GL_MAX_LIST_NESTING, INTv);
	GLSTATESNAPSHOT_LOG(GL_MAX_MODELVIEW_STACK_DEPTH, INTv);
	GLSTATESNAPSHOT_LOG(GL_MAX_NAME_STACK_DEPTH, INTv);
	GLSTATESNAPSHOT_LOG(GL_MAX_PIXEL_MAP_TABLE, INTv);
	GLSTATESNAPSHOT_LOG(GL_MAX_PROJECTION_STACK_DEPTH, INTv);
	GLSTATESNAPSHOT_LOG(GL_MAX_TEXTURE_SIZE, INTv);
	GLSTATESNAPSHOT_LOG(GL_MAX_TEXTURE_STACK_DEPTH, INTv);
	GLSTATESNAPSHOT_LOG(GL_MAX_VIEWPORT_DIMS, INTv2);
	GLSTATESNAPSHOT_LOG(GL_MODELVIEW_MATRIX, FLOATv16);
	GLSTATESNAPSHOT_LOG(GL_MODELVIEW_STACK_DEPTH, INTv);
	GLSTATESNAPSHOT_LOG(GL_NAME_STACK_DEPTH, INTv);
	GLSTATESNAPSHOT_LOG(GL_NORMAL_ARRAY, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_NORMAL_ARRAY_STRIDE, INTv);
	GLSTATESNAPSHOT_LOG(GL_NORMAL_ARRAY_TYPE, INTv);
	GLSTATESNAPSHOT_LOG(GL_NORMALIZE, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_PACK_ALIGNMENT, INTv);
	GLSTATESNAPSHOT_LOG(GL_PACK_LSB_FIRST, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_PACK_ROW_LENGTH, INTv);
	GLSTATESNAPSHOT_LOG(GL_PACK_SKIP_PIXELS, INTv);
	GLSTATESNAPSHOT_LOG(GL_PACK_SKIP_ROWS, INTv);
	GLSTATESNAPSHOT_LOG(GL_PACK_SWAP_BYTES, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_PERSPECTIVE_CORRECTION_HINT, INTv);
	GLSTATESNAPSHOT_LOG(GL_PIXEL_MAP_A_TO_A_SIZE, INTv);
	GLSTATESNAPSHOT_LOG(GL_PIXEL_MAP_B_TO_B_SIZE, INTv);
	GLSTATESNAPSHOT_LOG(GL_PIXEL_MAP_G_TO_G_SIZE, INTv);
	GLSTATESNAPSHOT_LOG(GL_PIXEL_MAP_I_TO_A_SIZE, INTv);
	GLSTATESNAPSHOT_LOG(GL_PIXEL_MAP_I_TO_B_SIZE, INTv);
	GLSTATESNAPSHOT_LOG(GL_PIXEL_MAP_I_TO_G_SIZE, INTv);
	GLSTATESNAPSHOT_LOG(GL_PIXEL_MAP_I_TO_I_SIZE, INTv);
	GLSTATESNAPSHOT_LOG(GL_PIXEL_MAP_I_TO_R_SIZE, INTv);
	GLSTATESNAPSHOT_LOG(GL_PIXEL_MAP_R_TO_R_SIZE, INTv);
	GLSTATESNAPSHOT_LOG(GL_PIXEL_MAP_S_TO_S_SIZE, INTv);
	GLSTATESNAPSHOT_LOG(GL_POINT_SIZE, INTv);
	GLSTATESNAPSHOT_LOG(GL_POINT_SIZE_GRANULARITY, INTv);
	GLSTATESNAPSHOT_LOG(GL_POINT_SIZE_RANGE, INTv4);
	GLSTATESNAPSHOT_LOG(GL_POINT_SMOOTH, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_POINT_SMOOTH_HINT, INTv);
	GLSTATESNAPSHOT_LOG(GL_POLYGON_MODE, INTv2);
	GLSTATESNAPSHOT_LOG(GL_POLYGON_OFFSET_FACTOR, FLOATv);
	GLSTATESNAPSHOT_LOG(GL_POLYGON_OFFSET_UNITS, FLOATv);
	GLSTATESNAPSHOT_LOG(GL_POLYGON_OFFSET_FILL, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_POLYGON_OFFSET_LINE, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_POLYGON_OFFSET_POINT, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_POLYGON_SMOOTH, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_POLYGON_SMOOTH_HINT, INTv);
	GLSTATESNAPSHOT_LOG(GL_POLYGON_STIPPLE, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_PROJECTION_MATRIX, FLOATv16);
	GLSTATESNAPSHOT_LOG(GL_PROJECTION_STACK_DEPTH, INTv);
	GLSTATESNAPSHOT_LOG(GL_READ_BUFFER, INTv);
	GLSTATESNAPSHOT_LOG(GL_RED_BIAS, FLOATv);
	GLSTATESNAPSHOT_LOG(GL_RED_BITS, INTv);
	GLSTATESNAPSHOT_LOG(GL_RED_SCALE, FLOATv);
	GLSTATESNAPSHOT_LOG(GL_RENDER_MODE, INTv);
	GLSTATESNAPSHOT_LOG(GL_RGBA_MODE, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_SCISSOR_BOX, FLOATv4);
	GLSTATESNAPSHOT_LOG(GL_SCISSOR_TEST, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_SHADE_MODEL, INTv);
	GLSTATESNAPSHOT_LOG(GL_STENCIL_BITS, INTv);
	GLSTATESNAPSHOT_LOG(GL_STENCIL_CLEAR_VALUE, INTv);
	GLSTATESNAPSHOT_LOG(GL_STENCIL_FAIL, INTv);
	GLSTATESNAPSHOT_LOG(GL_STENCIL_FUNC, INTv);
	GLSTATESNAPSHOT_LOG(GL_STENCIL_PASS_DEPTH_FAIL, INTv);
	GLSTATESNAPSHOT_LOG(GL_STENCIL_PASS_DEPTH_PASS, INTv);
	GLSTATESNAPSHOT_LOG(GL_STENCIL_REF, INTv);
	GLSTATESNAPSHOT_LOG(GL_STENCIL_TEST, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_STENCIL_VALUE_MASK, INTv);
	GLSTATESNAPSHOT_LOG(GL_STENCIL_WRITEMASK, INTv);
	GLSTATESNAPSHOT_LOG(GL_STEREO, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_SUBPIXEL_BITS, INTv);
	GLSTATESNAPSHOT_LOG(GL_TEXTURE_1D, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_TEXTURE_2D, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_TEXTURE_COORD_ARRAY, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_TEXTURE_COORD_ARRAY_SIZE, INTv);
	GLSTATESNAPSHOT_LOG(GL_TEXTURE_COORD_ARRAY_STRIDE, INTv);
	GLSTATESNAPSHOT_LOG(GL_TEXTURE_COORD_ARRAY_TYPE, INTv);
	// the following two states generate a gl error:
	//   Warning: detected OpenGL error 'invalid enumerant' after applying attribute
	//GLSTATESNAPSHOT_LOG(GL_TEXTURE_ENV_COLOR, FLOATv4);
	//GLSTATESNAPSHOT_LOG(GL_TEXTURE_ENV_MODE, INTv);
	GLSTATESNAPSHOT_LOG(GL_TEXTURE_GEN_Q, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_TEXTURE_GEN_R, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_TEXTURE_GEN_S, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_TEXTURE_GEN_T, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_TEXTURE_MATRIX, FLOATv16);
	GLSTATESNAPSHOT_LOG(GL_TEXTURE_STACK_DEPTH, INTv);
	GLSTATESNAPSHOT_LOG(GL_UNPACK_ALIGNMENT, INTv);
	GLSTATESNAPSHOT_LOG(GL_UNPACK_LSB_FIRST, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_UNPACK_ROW_LENGTH, INTv);
	GLSTATESNAPSHOT_LOG(GL_UNPACK_SKIP_PIXELS, INTv);
	GLSTATESNAPSHOT_LOG(GL_UNPACK_SKIP_ROWS, INTv);
	GLSTATESNAPSHOT_LOG(GL_UNPACK_SWAP_BYTES, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_VERTEX_ARRAY, BOOLv);
	GLSTATESNAPSHOT_LOG(GL_VERTEX_ARRAY_SIZE, INTv);
	GLSTATESNAPSHOT_LOG(GL_VERTEX_ARRAY_STRIDE, INTv);
	GLSTATESNAPSHOT_LOG(GL_VERTEX_ARRAY_TYPE, INTv);
	GLSTATESNAPSHOT_LOG(GL_VIEWPORT, FLOATv4);
	GLSTATESNAPSHOT_LOG(GL_ZOOM_X, FLOATv);
	GLSTATESNAPSHOT_LOG(GL_ZOOM_Y, FLOATv);
	
	GLSTATESNAPSHOT_LOG(GL_TEXTURE_ENV_COLOR, TEXENVfv4);
	GLSTATESNAPSHOT_LOG(GL_TEXTURE_ENV_MODE, TEXENViv);
	GLSTATESNAPSHOT_LOG(GL_TEXTURE_GEN_MODE, TEXGENiv);
}

#undef GLSTATESNAPSHOT_LOG


void GlStateSnapshot::logDiff(std::string const &label, GlStateSnapshot const *other) {
	if (!other) {
		GlStateSnapshot current_state;
		_logDiff(label, current_state);
	} else {
		_logDiff(label, *other);
	}
}


void GlStateSnapshot::_logDiff(std::string const &label, GlStateSnapshot const &other) {
	CSP_VERIFY_EQ(m_StateLog.size(), other.m_StateLog.size());
	bool first = true;
	for (unsigned i = 0; i < m_StateLog.size(); ++i) {
		if (m_StateLog[i] != other.m_StateLog[i]) {
			if (first) {
				CSPLOG(WARNING, SCENE) << "GL_STATE_DIFF -- " << label;
				first = false;
			}
			CSPLOG(WARNING, SCENE) << "GL_STATE_DIFF < " << m_StateLog[i];
			CSPLOG(WARNING, SCENE) << "GL_STATE_DIFF > " << other.m_StateLog[i];
		}
	}
}

bool GlStateSnapshot::_hasChanged(GlStateSnapshot const &other) {
	CSP_VERIFY_EQ(m_StateLog.size(), other.m_StateLog.size());
	for (unsigned i = 0; i < m_StateLog.size(); ++i) {
		if (m_StateLog[i] != other.m_StateLog[i]) return true;
	}
	return false;
}

bool GlStateSnapshot::hasChanged(GlStateSnapshot const *other) {
	if (!other) {
		GlStateSnapshot current_state;
		return _hasChanged(current_state);
	} else {
		return _hasChanged(*other);
	}
}

} // namespace csp

