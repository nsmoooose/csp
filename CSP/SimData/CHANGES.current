Version 0.4.0 (in progress)
===========================

2004-06-20: onsight
  * Doxygen and copyright notice updates.

  * Refactored Referenced class to a templated base class, allowing
    different counter types to be used in anticipation of adding
    thread-safe reference counting.

  * Moved fast-timing code out of Date.h/cpp, into Timing.h/cpp.
===>WINDOWS users please add Source/Timing.cpp to the project.

2004-06-16: onsight
  * Doxygen cleanups.

  * Minor cleanup of initial version string display (now logged).

  * Updated some copyright notices.

2004-06-13: onsight
  * Fixup python call for saving/restoring ints from archives (now
    _int32).

  * Logging now checks SIMDATA_LOGFILE environment variable when
    opening the log.  If not set or empty, log messages are initially
    directed to stderr (log output can also be redirected at runtime).

  * Change the initial "SimData [version] loaded @ xxx" message to be
    a log message.  With the SIMDATA_LOGFILE this makes it possible to
    suppress display of this message on startup while still allowing
    the version and load address to be determined..

2004-06-12: onsight
  * Commented out throw statement for assignment to Ref<> from an
    incompatible type.  Callers must check that the ref is not null
    after assignment.

  * Added isNull() method to Ref.

  * Minor tweaks to unsigned Reader/Writer classes to used fixed
    size integers.

  * Added tagged record compiler and associated header.

  * Disallowed copying of Referenced derived classes (should always
    use Ref<> pointers); then reverted because we already inherit
    from NonCopyable.

  * Minor fix to DataManager cleanup.

  * TaggedRecord.h copyright notice.

  * Singleton now NonCopyable, with const accessor.

2004-16-12: wolverine
  * added a MemoryWriter class to write out a SimData object to
    a binary memory buffer.  Added a MemoryReader class. Added
    unsigned methods to all the Reader and Writer classes in Archive
    which fixes a compile error.

2004-06-12: delta
  * Added Properties.h to SimData.vcproj header folder.

2004-06-11: onsight
  * Fixed up the ArchiveTest to use ArchiveReader and ArchiveWriter,
    and also changed the import statements in the test suite a bit.
    Should be slightly cleaner now, but more importantly the tests
    should run against the local copy of SimData rather than the
    one installed in site-packages (if any).

  * Move the static initializer for object interface pointers
    outside of the anonymous namespace that encloses the interface
    instance declaration.  Should fix compile problems under VC.

2004-06-11: onsight
  * Major refactoring of object and basetype serialization.  Archive,
    Packer, and UnPacker are replaced by Reader and Writer abstract
    classes, and ArchiveReader and ArchiveWriter subclasses.  The
    serialize method is now split in two: one non-const method that
    takes a Reader reference, and one method that takes a Writer
    reference.  Object serialization is now automated, meaning that
    all variables declared in the XML interface are saved and loaded
    internally.  Object subclasses only need to extend the two
    serialize() methods to save additional state that isn't included
    in the public XML interface.

  * Fixed a swig warning from Ref.i.

2004-06-03: onsight
  * Small cleanups in Ref.h.  More substantive changes still
    to come.  Adds a new header Properties.h.
===> WINDOWS users please test.

2004-05-28: wolverine
  * It was determined that Vector3 and Quad have extra bytes
    to handle there virtual function tables. The networking
    code now has matching transfer functions that mimic the 
    corresponding SimData ones minus the virtual functions. A
    slight change was made to Vector3 and Quad so that the 
    check during WriteBinary and ReadBinary looks for a size
    that only includes the functamental members. So that a
    to read and write a Vector3 a 24 bytes binary buffer would
    be passed in to the proper Vector3 functions.

2004-04-25: delta
  * Removed obsolete SimDataMSVC folder.
  
2004-04-17: wolverine
  * made changes to Vector3, Quad and Matrix3 to write data
    to binary buffers that are used to serialize and deserialize
    the object for network packets.

2004-03-31: delta
  * Namespace & SIMDATA_EXPORT symbol hacks cleaned in 
    SimData/Include/SimData/ExceptionBase.h :-)
  
  * Minor changes to SimData/VisualStudio2003/SimData.vcproj.
  
2004-03-30: onsight
  * Fixed some indentation issues.  Other than that the ExceptionBase
    change builds fine under Linux.  Some namespace hacks still need
    to be cleaned out of ExceptionBase.h though.

2004-03-30: delta
  * Changed Exception.* files to ExceptionBase.* to avoid
    swig's conflicts between exception.* and Exception.* 
    under Windows. This change is pretty invasive and 
    needs double checking on GNU/Linux.
    
  * The previous renaming simplifies (and unifies with GNU/Linux) 
    the swig's command line in the vs.net custom build step.
    
  * Renamed PYTHONPATH environment variable to PYTHON_PATH and
    SWIG to SWIG_PATH (it doesn't affect GNU/Linux platform).
    
  * Changed Exception to ExceptionBase in SimData/Source/Makefile.
  
  * Tweaked scons scripts to reflect the current options in
    vs.net 7.1 project file. A lot of scons' features have been 
    disabled to make it work under Windows. A command to generate 
    vs.net 7.1's .sln/.vcproj (currently commented out) has been 
    added to SConstruct. 

2004-03-18: onsight
  * After some effort debugging the scons scripts under windows
    with delta, I've checked in some of the necessary changes.
    This should be a step in the right direction, but isn't the
    full answer.

2004-03-13: onsight
  * Some enhancements to the scons script (e.g. building
    debian packages, fix a popen3 issue under windowns).
  * Minor swig interface cleanup of std_vector.i includes.
  * Added source code file and line numbers to log output.

2004-02-03: delta
  * Added a quick hack in Exception.h to fix a weird 
  behaviour of swig1.3.21 when it parses this file on
  windows/vc++7.1.
  
  * (vc++7.1) Added a -lexceptions.i in swig command line 
  such that it uses this dependency instead of 
  SimData/Exception.i on windows. Removed -DWIN32 to the 
  command line. The path to swig executable is no more 
  hardcoded in the custom build step but instead it relies 
  on an environment variable (SWIG) the user must define. 
  
  * (vc++7.1) Removed PostBuilt.bat; user must install and 
  test by command line the SimData site-package installation 
  as before.
  
2003-02-01: onsight
  * Renamed CHANGELOG* to ChangeLog* to be slightly more GNUish,
    plus vim picks up the syntax highlighting automatically now.

  * Readded a Swig builder to scons to properly track dependencies
    between the module, the wrapper, and the interface.
  * Fixed the return value of the dist wrapper; dists will now be
    reassembled only if necessary.
  * Added a very basic debs target, which extracts the sdist archive
    and builds the deb.  No dependency tracking yet, so it does all
    the work everytime.

2003-01-31: onsight
  * Added debian packaging files (experimental).

  * Added 'docs --clean' target to scons.
  * Fixed the source directory for building scons sdist.
  * Added 'test' target to scons to run the unittests.
  * Reenabled swig dependency tracking in scons.
  
  * Cleaned up swig std includes in the various interface
    files.  Now all loaded up front in cSimData.i.

2003-01-30: onsight
  * Starting with version 1.3.20 of SWIG, the python runtime
    library support has changed.  The swigpy library is no
    longer distributed with SWIG, and must be built locally
    if needed.  SimData relies on having a single runtime
    library library loaded, that is shared by all client
    modules.  As a first attempt at solving this problem,
    SimData will directly incorporate the python runtime
    code.  This may or may not work under Windows, depending
    on how the associated symbols are resolved when linking
    modules that depend on SimData.

  * Added 'swigopts' and 'ldopts' options to setup.py to dump
    swig and linker options to stdout.  The Makefile now gets
    these options from setup.py.  The options strings are now
    dependent on the installed version of SWIG, to account for
    the renaming of the '-c' command line option and optional
    linking with an external python runtime library.  The
    setup.py script also deals with this change in SWIG
    behavior when building under distutils.

==> NOTE: These changes have not been tested under Windows,
    and no changes have been made to the VC project file
    yet.  If you are using Windows and would like to help
    improve support for new versions of SWIG, please post
    a message to the developers forum at
      http://csp.sourceforge.net/forum

2003-12-30: delta
  * Added an environment variable to the project in lieu of 
    hardcoded Python path; windows users must have defined 
    PYTHONPATH variable pointing to the current Python install 
    dir root.
    
  * Removed link onto useless specific windows libs. Tweaked 
    the project file (release build) toward speed optimizations 
    (note: enabling sse2 optimizations leads to a dll loading 
    failed on an athlon XP2k+).
    
2003-12-25: delta
  * Updated msvc 7.1 project file with a post built step 
    (PostBuild.bat) to install SimData and run tests.
    
  * Added const& qualifiers in hash string functor parameters
    (inherited from stdext::hash_compare) for vs.net. 
    
2003-11-02: onsight
  * Added #include <algorithm> in InterfaceRegistry.cpp (as 
    suggested by delta).

2003-11-01: onsight
  * Some tweaking of the Scons scripts.  Added a platform-specific
    configuration (see build_config.py).  Seems to work well under
    Linux, but the MSVC side is untested.

  * Changed the SCons swig version check to reject versions 1.3.18 
    and 1.3.19.

2003-10-25: onsight
  * Added a unit conversion test and tweaked some of the conversion
    functions to be more accurate.  The test ensures that inverse
    conversions are accurate to at least one part in 10^6.

2003-10-24: onsight
  * Moved some inline set() methods out of TypeAdapter.h to avoid
    including all the data type headers.  Code using SimData that
    implicitly relies on these data type headers will now need to
    exclicitly include the required types.

  * Added a C++ testing framework under SimData/Tests.  Any file
    named test_*.cpp is treated as a test, and can be built and
    run from a toplevel 'make tests'.  Failed tests should exit
    with a non-zero status code.

  * Expanded test_Objects.cpp test to check the interface
    registry and object introspection.

2003-10-23: onsight
  * Separated Singleton class into Singleton.h (was InterfaceRegistry.h).

  * Added Trace.h for generating callstack back traces on error.

2003-10-22: onsight
  * Fixed a few of the (many) warnings generated by msvc 7.1 /W4.

2003-10-21: onsight
  * Fixed InterfaceRegistry ctor to properly initialize the registry
    pointers to zero.

2003-10-21: onsight
  * Changed Packer to accept PackFile instead of FILE*.  PackFile is
    a thin wrapper around FILE* which shouldn't affect other c++ code
    (it allows coercion to and from FILE*), but prevents Python code
    from passing file objects to Packer.  The latter is necessary,
    since under windows Python is currently built with MSVC 1200, and
    SimData is built with MSVC 1310+.  The runtime libraries for these
    two versions of MSVC are incompatible with respect to certain FILE* 
    operations, causing segfaults.  Using PackFile ensures that FILE*
    are created and used only by the MSVC 1310 library when dealing
    with data archives.

  * Started adding new data type unit tests.  Key and some SimDate
    tests so far.

2003-10-20: onsight
  * Removed Pack.cpp from the vcproj file.

  * Removed the __NO_LUT__ define from swig command line in the vcproj
    file.  This flag was used to prevent errors with older versions of 
    MSVC during testing of the new lookup table code.

  * Changed the default path to swig to c:\Program Files\swig-1.3.17
    in vcproj.  The previous path was to swig-1.3.19, but this version
    of swig has a bug that causes problems with simdata.

  * Started a new test suite for data type functionality

  * Added SIMDATA_API_VERSION define to Version.h.  This number will
    be bumped for all backwards-incompatible API changes.

  * Updated README

2003-10-20: onsight
  * Added a log message when the interface registry is destroyed.

2003-10-19: onsight
  * Merged b0_4_0 into the trunk.  The old head was tagged as r0_3_5,
    then branched to b0_3.

2003-10-19: onsight
  * Fixed error message in data compiler for the deprecated <Table> tag.

2003-10-13: onsight
  * Changed the 'static' property of Objects from an object property to a
    class property.  The use of the 'static' attribute in Object xml tags 
    is now deprecated.  To specify a static Object class, use the
    SIMDATA_STATIC_OBJECT macro instead of SIMDATA_OBJECT.

  * Added '--force' option to Compile.py, allowing warnings to be ignored.

  * Added a deprecation warning to 'static' attribute of the Object tag.

  * Added a more informative message in Compile.py if there are warnings
    that exceed the current warning level, explaining how to use the
    '--warn=X' option.

  * Changed the format of the CHANGES.current file.  Main points are now
    prefixed by a '*', and subpoints by a '+'.  Indent is now 2 spaces,
    and the max line width is 78.  A syntax highlighting file for vim to
    support this format can be downloaded from:
           http://csp.sourceforge.net/downloads/CHANGES.vim

  * Added deprecation warnings for <Curve> and <Table> xml tags.

  * Improved and added some doxygen comments.

  * Made InterfaceRegistry::addInterface private.
   
  * Made Referenced copy and assignment operators private (and 
    unimplemented).

==> NOTE all data archives must be fully rebuilt to use these changes.

2003-10-09: onsight
  * Added simdata:: prefix to Ref<N> in class FindVisitor and FindAllVisitor
    (Composite.h) to fix msvc namespace resolution problems.

  * Renamed 'interface' variables in InterfaceRegistry to 'objectinterface'
    to avoid a msvc reserved keyword.

2003-09-27: onsight
  * Added the VisualStudio2003 directory from the main trunk, along with
    Stormbringer's patches to the project file.

2003-09-17: onsight
  * Changed Real::asString() to use std::stringstream instead of snprintf.

  * Changed DataArchive to use std::stringstream for an error message.

  * Fixed including std headers into simdata namespace in Date.cpp.

  * Fixed numerous double->float conversions (mostly in LUT.cpp).

  * Fixed numerous shadowed variables/methods in Quat, Matrix, Vector, UTM, 
    GeoPos, and others.

  * Added additional warning flags for g++.

==> NOTE changes to the ObjectInterface templates trigger a regression in 
    swig 1.3.19. Use either 1.3.16 or the most recent cvs (pre-1.3.20).

==> NOTE that Quaternion.h/cpp are now Quat.h/cpp

2003-09-07: onsight
  * Fixed signed/unsigned comparisons in Composite.h

2003-09-05: onsight
  * Added Composite.h, which contains template classes for implementing 
    the Composite/Visitor design pattern.

  * Improved doxygen comments, small bug fixes, added isContainer and 
    canBeAdded properties, adding logging of warning messages.

2003-09-04: onsight
  * Changed Referenced from a nonvirtual to a virtual base class of Object.

2003-08-25: onsight
  * Refactored InterfaceProxy, moving most of the functionality into the 
    InterfaceProxyBase class.  The base class now maintains a list of 
    ObjectInterface instances that is used to access externalized member 
    variables.  MemberAccessor classes are now fully encapsulated within 
    the templated ObjectInterface classes, so that the ObjectInterfaceBase
    class can be extended in Python without any of the template meta-
    programming trickery that C++ demands.  

  * ObjectInterfaceBase now also keeps track of the object interface 
    hierarchy (both by class name and hash).

  * Access to the ObjectInterface corresponding to a particular member 
    variable name is now via a std::map lookup, which should be faster than 
    the previous implementation involving a linear search via base class 
    method calls.

2003-08-21: onsight
  * Convertied from pack/unpack to serialize for BaseType serialization:
    + Removed Pack.i, Pack.h, Pack.cpp
    + Added Archive.h, Archive.i
    + Appropriate changes to  setup.py and Source/Makefile

  * Object classes should now only implement serialize(Archive&) to save 
    and load themselves from data archives.  The Archive parameter is a 
    functor, which handles both saving and loading transparently.  So 
    instead of one list of Packer.pack(...) methods, and another identical 
    list of UnPacker.unpack(..) methods, you now just make one list of
    archive(..) calls:
   
     void MyClass::serialize(Archive& archive) {
        MyBaseClass::serialize(archive);
         archive(member_var1);
         archive(member_var2);
         ...
     }

    See the basic data type implementations for additional examples.
    Note however that the basic data types generally have more complicated 
    serialization routines than most object classes will require.  Many 
    basic data types test whether the archive is loading or saving and 
    respond differently depending on the situation.  For object classes 
    this should almost always be unnecessary.
   
  * Added equality and inequality operators to several base types.

  * Modified the Python serialization interface (still subject to further 
    changes).

  * Added a unit testing framework based on Python's unittest module:
    + runtests.py runs all the tests (not many so far)
    + SimData/Tests contains the unit test modules
    + SimData/Tests/ArchiveTests tests storage and retrieval
      of many basic data types (not complete yet)

2003-08-20: onsight
  * Tagged r0_3_4, version 0_3_5 started.
  * Version 0.4.0 branch started.
