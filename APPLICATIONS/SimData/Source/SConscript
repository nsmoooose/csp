# -*-python-*-

# SimData: Data Infrastructure for Simulations
# Copyright (C) 2002, 2003 Mark Rose <tm2@stm.lbl.gov>
# 
# This file is part of SimData.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

# source dist

import os.path
from build_support import *

Import('env')

headers = Prefix("#/Include/SimData",
	"""
	Archive.h
	BaseType.h
	Composite.h
	Conversions.h
	DataArchive.h
	DataManager.h
	Date.h
	Enum.h
	Exception.h
	Export.h
	External.h
	FileUtility.h
	GeoPos.h
	hash_map.h
	HashUtility.h
	Integer.h
	InterfaceRegistry.h
	Interpolate.h
	Key.h
	Link.h
	List.h
	LUT.h
	Log.h
	LogStream.h
	Math.h
	Matrix3.h
	Noise.h
	Namespace.h
	Object.h
	ObjectInterface.h
	osg.h
	Path.h
	PTS.h
	Quat.h
	Random.h
	Real.h
	Ref.h
	Singleton.h
	String.h
	Trace.h
	TypeAdapter.h
	Types.h
	Uniform.h
	Vector3.h
	Version.h
	""")

sub_interfaces = Prefix("#/Include/SimData",
	"""
	Archive.i
	BaseType.i
	Conversions.i
	cSimData.i
	DataArchive.i
	DataManager.i
	Date.i
	Enum.i
	Exception.i
	External.i
	filemap.i
	GeoPos.i
	HashUtility.i
	InterfaceRegistry.i
	Interpolate.i
	Key.i
	Link.i
	List.i
	Log.i
	LUT.i
	Matrix3.i
	Noise.i
	Object.i
	Path.i
	Quat.i
	Random.i
	Real.i
	String.i
	Types.i
	vector.i
	Vector3.i
	""")

sources = """
	BaseType.cpp
	DataArchive.cpp
	DataManager.cpp
	Date.cpp
	Enum.cpp
	Exception.cpp
	External.cpp
	FileUtility.cpp
	GeoPos.cpp
	HashUtility.cpp
	InterfaceRegistry.cpp
	Interpolate.cpp
	Key.cpp
	Link.cpp
	List.cpp
	LogStream.cpp
	LUT.cpp
	Math.cpp
	Matrix3.cpp
	Noise.cpp
	Object.cpp
	Path.cpp
	Quat.cpp
	Random.cpp
	Real.cpp
	TypeAdapter.cpp
	Vector3.cpp
	Version.cpp
	""".split()

package_files = Prefix("#/SimData", 
	"""
	__init__.py
	Parse.py
	Compile.py
	Debug.py
	cSimData.py
	""")

extra_files = Prefix("#",
	"""
	README
	COPYING
	TODO
	SConstruct
	build_support.py
	build_config.py
	setup.py
	Source/SConscript
	""")

doc_files = Prefix("#/Doc",
	"""
	Doxyfile
	SConscript
	footer.html
	""")

deb_files = Prefix("#/debian",
	"""
	control
	rules
	copyright
	changelog
	docs
	files
	""")

# extension module
extension_interface = "#/Source/cSimData.i"
extension_wrapper, extension_module = env.Swig([], extension_interface)
package_module = env.CopyFile('#/SimData/cSimData.py', extension_module)

# main libraries
shared_library = env.SharedLibrary('#/SimData/_cSimData', 
                                   sources + [extension_wrapper],
				   SHLIBPREFIX = '', 
				   LIBS=env.get('LIBS',[])+env.get('SHLINKLIBS',[]))

static_library = env.StaticLibrary('#/SimData/libSimData', sources)

libraries = [shared_library, static_library]
package_targets = libraries + [package_module]

# installation
package = env['PACKAGE']
package.installTarget(package_files + libraries, headers + sub_interfaces)
package.add(Prefix('#/Source', sources), 'source')
package.add(extension_interface, 'source')
package.add(deb_files, 'source')
package.add(libraries, 'binary')
package.add(package_files + headers + sub_interfaces + extra_files + doc_files, 'both')
package.setTargets(package_targets)
package.unitTests('./runtests.py')

