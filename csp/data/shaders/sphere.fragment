// -*-c-*-
// Combat Simulator Project
// Copyright (C) 2006 The Combat Simulator Project
// http://csp.sourceforge.net
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.


varying vec3 normal;
varying vec3 halfvector;

uniform sampler2D tex0;

void main() {
	vec4 tc0 = texture2D(tex0, gl_TexCoord[0].st);

	vec3 N = normalize(normal);
	vec3 HV = normalize(halfvector);
	float NdotL0 = max(dot(N, normalize(vec3(gl_LightSource[0].position))), 0.0);
	float NdotL1 = max(dot(N, normalize(vec3(gl_LightSource[1].position))), 0.0);
	float NdotHV = max(dot(N, HV), 0.0);

	vec4 ambient = gl_FrontMaterial.ambient * gl_LightSource[0].ambient;
	vec4 diffuse0 = gl_FrontMaterial.diffuse * gl_LightSource[0].diffuse;
	vec4 diffuse1 = gl_FrontMaterial.diffuse * gl_LightSource[1].diffuse;
	vec4 specular = gl_FrontMaterial.specular * gl_LightSource[0].specular;
	vec4 emission = gl_FrontMaterial.emission;

	vec4 color = (ambient + diffuse0 * NdotL0 + diffuse1 * NdotL1 + emission);
	color += tc0 * gl_LightSource[0].ambient;

	color.rgb += 8.0 * specular.rgb * pow(NdotHV, gl_FrontMaterial.shininess);
	color.a = tc0.a * gl_FrontMaterial.diffuse.a;

	gl_FragColor = color;
}



