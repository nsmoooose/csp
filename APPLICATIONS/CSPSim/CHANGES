CSPSim release change log.  See CHANGES.current for the latest updates
to CVS.

Version 0.3.3 (2003-08-04)
===========================

2003-07-26: onsight
            Renamed several utilities to help with distribution
	    and installation (particularly under Linux at this
	    point):
	    	map2hid 		-> cspinput
		tile			-> csptile
		RecCSP.py		-> csprec
		falcon_acdata.py	-> cspf4dat

2003-07-23: onsight
            Added wireframe toggle keybinding (alt-w by default).
	    Note you have to rebuild your input maps to use newly
	    added keybindings.  If you are using the default
	    bindings you can just delete them (in Data/Input) and 
	    run make (Linux only) to generate a new set.  

	    Some general cleanup in Bin/*.py.  
	    
	    Added MakeDefaultInputMaps.py to regenerate the
	    default hid input maps in a cross-platform way.

	    Minor cleanup in map2hid.

2003-07-23: onsight
            Committed changes to GameScreen to enable toggling of
	    the DataRecorder.  By default this function is mapped
	    to the 'r' key.  The output goes to data-xxx.rec where
	    xxx is a sequential index starting at 000.  A new
	    output file is started each time the recorder is
	    toggled.  Use Tools/Recorder/RecCSP to convert the
	    .rec files into readable formats.

	    Added "RECORD" indicator to ScreenInfoManager.

	    Added 'r' key binding to gamescreen-core.map

	    Added Tools/Recorder, which contains utilities for
	    converting data recorder output into more useful
	    formats:
	    
	    Under Windows, just run:

	         RecCSP --tab data-xxx.rec

	    and load the resulting file into Excel.  You can do 
	    the same under Linux (substitue your favorite plotting
	    program for Excel).  If you happen to have jgraph, 
	    ghosstscript, and (optionally) latex installed you can 
	    create nice pdf plots of all the recorded data very
	    easily by running:

	         graph data-xxx.rec

2003-07-22: onsight
	    Increased the default window size to 800x600 so that
	    the splash screen will show properly.

	    Added a name and version number to the XML metadata
	    for terrains.  The name is used by TestObjects.py to
	    create theater-specific vehicles at startup until a
	    proper campaign engine is written to generate them.

	    The default vehicle construction in CSPSim.cpp has
	    been removed.  The first vehicle created in
	    TestObjects.py now serves this purpose.

	    Lat/Lon removed from CSPSim.ini.  These were used
	    to set the mean seasonal temperature in Atmosphere.cpp,
	    but the center of the terrain (set in the terrain XML
	    metadata) is used directly now.

2003-07-22: onsight
            Modified CSPSim.ini to reduce the default window
	    size to 640x480.
	    
	    Added additional path roots to allow for more flexible
	    installation.  ConfigPath points to the root directory
	    containing global configuration data (such as input
	    device mappings), CachePath points to the directory 
	    containing compiled runtime data (sim.dar).  DataPath 
	    points to the root directory for "static" data (terrain, 
	    images, models, etc).  Based on a patch by Verok Istvan.

	    Changed ScreenInfo back to using screeninfo.ttf.  We 
	    cannot freely distribute ltype.ttf, so screeninfo.ttf
	    acts as a generic name for the onscreen text font.  By
	    default a GPL'd font (freemono currently) will be
	    distributed using this name.  Users are free to replace
	    this file locally with any font they choose.

	    CSPSim.py now searches for CSPSim.ini in a slightly
	    more elaborate, platform-dependent way.  The current
	    directory always takes precedence.  On Linux systems,
	    the search order then continues with ~/.cspsim, 
	    /etc/cspsim, and finally ../Data.  On Windows just
	    ../Data is checked.  If the ini file does not set
	    an explicit ConfigPath, the directory in which the 
	    config file was found will be used.

	    Added exception handling to the SWIG wrapper for 
	    createVehicles().  Errors due to missing data archive
	    paths specified in TestObjects.py display diagnostic
	    error messages and won't crash the program anymore.

2003-07-22: onsight
            Actually checked in a bunch of changes from the last
	    changelog entry that I had forgotten to commit.

	    Slight tweaks to acinclude.m4 and configure.in.  The
	    checks for GNU CC++ are now in place but commented.

	    Added Animation.cpp, FlightModel.cpp, and 
	    FlightDynamics.cpp to Makefile.in

	    LogoScreen now throws a DataError if the splashscreen
	    image can not be found.  This provides an early catch
	    for missing Data/*, and a somewhat useful error message.

2003-07-21: onsight
            Moved a couple accessor methods in Theater and 
	    FeatureLayout out of the class declarations.  This
	    fixes two compiler errors under GCC 3.3 related to
	    the use of simdata::Ref<T> where T is a forward class
	    declaration.  CSPSim now builds correctly with 3.3.

	    Added GPL license in COPYING

	    Removed nommgr.h, mmgr.h, and mmgr.cpp.  These libraries
	    were not being used and are incompatible with the GPL.

	    Removed stdinc.h which wasn't being used.

	    Removed compiler.h, which had some compiler-specific
	    portability macros which were only minimally used
	    by SimpleConfig.cpp.

	    Added missing license statement to Colorspace.cpp.

	    Added missing license statement to cCSP.i.

	    Added missing license statements to Bin/CSPSim.py,
	    Bin/CompileData.py, Bin/RebuildData.py, Bin/Shell.py,
	    Bin/ShellEnvironment.py, and Bin/TestObjects.py

            Removed Include/OGLText.h, which seemed to have been
	    misplaced (part of TerrainTools?).
	    
2003-07-21: onsight
            Added Tools/Terrain directory for terrain tools used in
	    processing DEM data to ChunkLod and other formats.

	    Added Tools/Terrain/dem2dat which has a utility for
	    converting DEM to an intermediate binary format.  This
	    format is similar to .bt but preserves additional
	    metadata.  This is just an initial check in of the code;
	    the Makefile is very immature and no msvc project files
	    exist yet.

	    Added Tools/Terrain/tile which has a utility for combining
	    many DEM quads (in DAT format) into a large terrain 
	    elevation map, using a secant gnomonic projection.  The
	    output can either be 16-bit image tiles (for use with
	    Demeter) or a .bt format terrain map that can be converted
	    to the .chu format of osgChunkLod using tools in TU's
	    original ChunkLod package.

2003-07-19: delta
	    Commented out setTextureAttributeAndModes in SCreenInfo class.
	    Reenabled TEXDOME with those lines commented out.
	    Added back ltype.ttf (and commented out screeninfo.ttf lines).
	    Added mapping for rudder.
	    Updated .net project (CSPSimAppli is not yet updated).
	    Fix two forward declaration causing error on .net 2002.

2003-07-17: onsight
            Added speedbrake and data recording bindings
	    to the default input mappings.

	    Revised the m2k xml files to use the new FM
	    classes and define various animation.

            Added some comments to NumericalMethod and 
	    VectorField.

            Inlined a few accessor methods in VirtualScene.

            Revisions to SceneObject to support animations.

            Revisions to DynamicObject to support animations
	    and data recording.

            Revised AircraftDynamics to use FlightDynamics
	    instead of PrimaryAeroDynamics.  Added support in
	    AircraftObject for animations and data recording.
	    
	    Added speedbrake support to AircraftObject and 
	    the FlightModel.

            Added Animation, which provides a framework for
	    3D model animations.

            Added FlightDynamics, FlightModel, and DataRecorder.
	    The first two implement an alternate flight model
	    layout in which the static flight model data is
	    reused by all aircraft of a given type.  The
	    DataRecorder class allows arbitrary data output
	    channels to be defined and saved efficiently to
	    disk.  An external tool (not yet checked in) parses
	    the files to produce tab-delimited tables or
	    pdf charts (linux only for the latter).

2003-07-17: onsight
            Changed SimpleConfig.h to use windows-specific hash 
	    code for msvc version >= 1300 (instead of == 1300).

2003-07-09: onsight
	    
	    Added DataRecorder and RecorderInterface classes for
	    saving runtime data to disk.  DynamicObject has basic
	    support and hooks for using a data recorder, and 
	    AircraftObject and FlightDynamics defines several
	    output channels.  Gamescreen toggles the recorder on
	    and off for the active object using the 
	    TOGGLE_RECORDING input hook, which is bound to the 
	    'r' key by default.  A new screeninfo tag in the
	    upper right corner of the screen displays "RECORD"
	    when the recorder is on.
	    
	    The output from each recording goes to a sequentially 
	    numbered file in the current directory: data-XXX.rec,
	    where XXX starts at 000 each time CSPSim is run.  A
	    utility called rec under Tools/Recorder can convert
	    the data recording to either tab-delimited text or
	    jgraph (a text based graph description language for
	    generating postscript).  The shell script 'graph'
	    in the same directory will run the output of rec
	    through jgraph and ps2pdf to generate a pdf file
	    containing plots of all the data in one shot (if
	    you have jgraph and ghostscript installed that is).

2003-07-07: onsight

            Various animation improvements.  Using cull callback
	    now instead of update so that only visible models are
	    animated.  Changed simulation-animation binding to use
	    a shared (ref counted) instance to transfer the 
	    animation control variable. 

	    Static model transforms (offset, scale, orientation)
	    are now applied to the contact points and view point.
	    Thus these points should be specified in the original
	    model coordinates in the XML file.

2003-07-03: onsight

            Initial animation infrastructure.  Added Animation.h
	    and Animation.cpp, plus changes to ObjectModel and
	    SceneModel.  AircraftObject also has hooks into the
	    model animation to set control surface deflections.

	    The m2k model.xml file has been modified to add control
	    surface animation parameters, and a new model is used
	    that implements transformation nodes around the major
	    control surfaces and speed brakes.

	    Speedbrake support added to AircraftObject.  This is
	    hooked into new input commands: 
	    	* OPEN_AIRBRAKE
		* CLOSE_AIRBRAKE
		* INC_AIRBRAKE
		* DEC_AIRBRAKE
		* AIRBRAKE (continuous axis)
	    
	    PrimaryAeroDynamics now receives speedbrake deflection
	    from AicraftObject and adds a new linear drag term to
	    the drag coefficient (Cd_db * db).

==========> VC users add Animation.cpp to the project.

2003-07-02: onsight

            Reverted to Sky.cpp 1.15, disabled TEXDOME, and fixed
	    a bug that applied a texture to the sky dome even when 
	    TEXDOME was not defined.

2003-07-02: onsight

            Added an automatic build target to the main Makefile to
	    generate default hid mappings for aircraft.hid and 
	    gamescreen.hid if they don't already exist.  These are
	    created from the examples in Tools/HID/Examples, and
	    include reasonably up-to-date mappings for the keyboard
	    commands.  The joystick mappings may or may not work on
	    any given system, and this is not meant as a substitute
	    for reading Tools/HID/README and building your own custom
	    map files.  A similar step should be added to the Windows
	    build if possible.

            Added backface culling to model debug markers so that
	    the initial view is not obstructed by the view placement
	    marker.

	    Changed ScreenInfo font to use screeninfo.ttf instead of
	    ltype.ttf (which is cannot be freely distributed).  A new
	    supplemental data pack CSPSim-Data-Supplement-0.2.1.tgz
	    is available from the SF project page that includes a
	    GPL'd screeninfo.ttf font as well as other needed data
	    files that are missing from the older 0.2.tgz data release.
	    The fps info character spacing is slightly changed to
	    accomodate the new font, but this needs is just a bandaid
	    and needs additional work.

2003-07-01: onsight
   
            Changed Makefile.in and Source/Makefile.in to link
	    to the ChunkLod library the same way the Demeter
	    link is done.  The ChunkLod static library that is
	    used is now CSPChunkLod/lib/libosgChunkLod_csp.a.

	    Added a README file that points to the wiki
	    VBuildingCSP page, as well as the forums.

2003-07-01: delta

==========> VC USERS: you need to reinstall simdata.

	    Changed VectorField::m_dimension to protected and 
	    class DynamicalSystem now publicly inherites from 
	    VectorField.
	    Changed general stats implementation to use some 
	    "static" texts.
	    Corrected a bug in ScreenInfo ctor (m_Text allocated 
	    2 times).
	    Added a conditional test in PrimaryAeroDynamics::updateAngles() 
	    to check for a division by 0 (!).
	    Changed updating m_InfoView every 3 frame.
	    Changed ObjectStats implementation to use osg::ref_ptr 
	    and clean up data when changin object.
	    Changed XML/Data/m2k/fm.xml.
	    Added SWIG_NOINCLUDE on ccSP_wrap.cpp to enable log 
	    level from python scripts
	    Merged Onsight changes.
	    When TEXDOME is defined, sky color is not correctly updated; 
	    this happens only on windows.

2003-06-25: onsight
            
	    Small but important fixes to Source/Makefile.in:
	    Added a line to create .deps/Theater if it doesn't 
	    exist, and commented the gnucc2 flags since these
	    aren't part of autoconf yet.

2003-06-25: onsight

==========> GCC: Large parts of ChunkLodTerrain are checked in
            now, but actually running it requires that the shared
            library and vertex program be available in the Bin
	    directory.  I have this setup with symlinks in my
	    working copy, but it isn't a good long term solution.
	    Also, several XML files needed for ChunkLodTerrain
	    to run are not in cvs.  Stick with Demeter for now
	    and I'll work on getting the the interface to
	    ChunkLod cleaned up soon.

2003-06-24: onsight
            Added Profile.h which has simple but handy profiling 
	    macros.  There's a new PROFILE log target in Log.h as
	    well.

	    CSPSim.py now takes a --log parameter to specify which
	    log targets to record.  E.g.:

	        CSPSim.py --log=PROFILE,PHYSICS

	    Note that if multiple targets are specified they must
	    be separated by commas (,) with no spaces.  The target
	    names are the same as in Log.h, but without the leading
	    'CSP_'.

	    Changed EngineDynamics to only reevaluate the thrust
	    during the preSimulationStep() call, rather than during
	    update().  This should still provide more than enough time 
	    resolution.

	    Reimplemented the ground collision code to simplify the
	    design and fix some bugs.
	    
	    Reimplemented the landing gear dynamics code.  The design
	    is somewhat saner now, and most importantly it does not
	    make internal state changes during the rk evaluations.
	    The monolithic simulation method is now broken into more
	    manageable pieces, and some new features such as brake
	    temperature modeling have been added.  There is still
	    some numerical instability when the wheels are locked and
	    the system behaves as a stiff harmonic oscillator (tires).
	    When the damping is too high, extreme instabilities can
	    occur.  Even without violent behavior, the rk code generally
	    slows down and works too hard trying to simulate the
	    oscillation.  Not sure at this point how best to fix the
	    problem.

	    Updated the GCC Makefile.in.  Probably more changes still
	    needed to integrate CSPChunkLod smoothly.

==========> WIN: Changed *PhysicModel to *PhysicsModel.  Update the 
            project files accordingly:
	    	PhysicsModel.cpp
		AircraftPhysicsModel.cpp

==========> WIN: Theater code now in separate subdirectories under
            Include/Theater and Source/Theater.  All the files in
	    Source/Theater need to be added to the project.

==========> WIN: Add ChunkLodTerrain.cpp and DemeterTerrain.cpp to
            the project.

            Changed BaseDynamics::update(dt) to computeForceAndMoment(x)
	    to reduce confusion with other update methods in the sim
	    that take real (sequential) time interval parameters.

2003-06-22: onsight
            Added StateSet to text objects to disable texturing with
	    tex units 1-3.  Shouldn't be necessary, but it helps to keep
	    the text from disappearing when terrain multitexturing is
	    enabled.  This is just a bandaid, not a cure.

	    Implemented brake_limit for landing gear.  This is the
	    maximum static force (in newtons) that each brake can produce
	    (independent of tire friction).  It should be set to zero
	    for wheels that do not have brakes.

	    Fixed a bug in the brake lowpass filter that reduced the
	    brake setting by 1/2.

	    Added brake-steering linkage, which allows much tighter
	    turning radii.  Set brake_steering_linkage to -1.0 for
	    left-side gear and +1.0 for right-side gear.  An additional
	    multiplier is passed as the second parameter to setSteering.
	    Brake-steering adds to normal braking, but the total
	    braking force is still constrained to [0, brake_limit] of
	    course.

2003-06-20: delta
	    Moved updateNearGround() outside loop in AircraftPhysicModel::doSimStep.
	    Corrected kinetic parameters update in AircraftPhysicModel::doSimStep.
	    Reenabled position update in _f.
	    Changed RungeKuttaCK::MAXSTP = 16.
	    Changed binding methods for throttle in EngineDynamics/Engine class: added 
	    a postCreate() method to bind every engine with EngineDynamics::m_Throttle; 
	    added EngineDynamics::setThrottle.

2003-06-19: onsight
            Fixes in AircraftPhysicModel::doSimStep to correctly update
	    position when multiple internal timesteps are used.

	    Added missing Feature.cpp.  Together with the postCreate
	    fix to SimData, makeFeatures is now running correctly.

	    The postCreate fix also cures the gear sprite placement
	    problem when starting in the air.

	    Renamed osgChunkLod-double director to CSPChunkLod, which
	    is now in cvs.

2003-06-19: delta
==========> GCC USERS: add Engine.cpp, BaseDynamics.cpp, Collision.cpp,
	    PrimaryAeroDynamics.cpp (and remove AeroDynamics.cpp from),
	    PhysicModel.cpp, AircraftPhysicModel.cpp to the project.

==========> ALL USERS: update APPLICATIONS/CSPSim/Tools/HID/Maps/aircraft-core.map 
	    and APPLICATIONS/CSPSim/Data/XML/vehicles/aircraft directory then
	    (python) map2hid aircraft.map and RebuildData(.py).

	    Fixed a depth buffer bug on info view.
	    Added some optimize calls in VirtualScene.cpp and ObjectModel.cpp.
	    Added a basic Engine class (it uses F4 data from SP3).    
	    Added BaseDynamics.cpp to the project which is a base class for 
	    dynamics.  
	    Added a GearDynamics class (and removed old one).
	    Added a post built step in .net project to copy 
	    VisualStudio/CSPSim*/cCSP.py to Bin.
	    Added a basic ground Collision class.
	    Added #ifndef CSP_NDEBUG/#endif blocks to avoid warnings in case 
	    it s defined in CSPSim.cpp (due to macro CSP_LOG).
	    Added an altitude information in GeneralStats.
	    Added a premice of multi smoke_emitter_location support (see 
	    Engine class).
	    Hacked debug markers code to gear up/down 'g', and toggle markers 
	    with 'm'.
	    Added PrimaryAeroDynamics classes in replacement to AeroDynamics. 
	    Added AircraftPhysicModel.cpp to the project (it is not entirely 
	    clear if this derived class will subsist).
	    Added a serialized class AircraftDynamics which encapsulates 
	    dynamic aircraft classes.
	    Distinguished between air speed and speed in aircraft stats and 
	    general stats.
	    In an attempt to limit fps drop with info on screen, InfoView will 
	    be updated only every x (at the moment 5) frame and a 
	    setDisplayList(false) has been added to every text on screen. Need 
	    feedback from users about that. Also, some "static" osgText::Texts 
	    take place in Framerate ...
	    Removed #include "windows.h" in CSPSim.cpp.
	    Changed position - attitude initialization.
	    Changed /Zm1000 to 200.
	    Moved enabling/disabling smoke osg code into SceneModel.
	    Made SceneModel to derive from simdata::Referenced.
	    Made ~ScreenInfo() protected (and its subsequent children); same for
	    ~SmokeTrailSystem() and ~SceneModel().

2003-06-11: onsight
            Added a link from Feature to the associated FeatureObjectModel.

	    Added an "elevation correction" option to ObjectModel.  The
	    default is true, which means that features will be floated
	    relative to the local terrain elevation.  If false, Z=0 is
	    the reference elevation for the model.  This can be used for
	    models that are decaled to the terrain surface and already
	    incorporate the local elevation variations.  In principle,
	    this functionality and some other parts (e.g. contacts) should
	    be separated into subclases of ObjectModel (VehicleObjectModel,
	    DecalObjectModel, FeatureObjectModel, etc).

2003-05-14: onsight
            Some battlefield code cleanup.

	    New --log=XXX:YYY option for CSPSim to set the logging
	    classes.  For example: --log=APP:BATTLEFIELD:PROFILE
          
	    Use for the new SimData LLA class to specify object coordinates
	    in latitude, longitude, altitude.  TerrainObject now defines
	    a center latitude and longitude (set in XML), and the geographic
	    coordinates around this point are mapped into the sim's flat
	    coordinate space using a secant gnomonic projection.  This
	    projection is not the same as was used for the Balkan terrain, 
	    so object coordinates will not exactly match the terrain.
	    Internally, the (x, y) coordinate system is now relative to the
	    center of the terrain rather than the southwestern corner.  The
	    internal coordinates used by demeter are unchanged, so an 
	    offset is applied whenever camera positions are passed to 
	    demeter.

2003-05-06: onsight
            New RandomForestModel for building random assortments of
	    'X' quads.  I haven't been able to turn of back-face culling
	    (not sure the normals would work out right even if I could),
	    so I'm drawing 4 quads per tree (both sides of each plane of
	    the 'X').  Seems to work, and is faster than billboarding,
	    but doesn't look as nice especially wrt lighting.

	    Added normals to billboard quads, renamed the class to
	    FeatureQuad.

	    Changed the interactions of LayoutTransform, FeatureSceneModel,
	    and ElevationCorrection.  Fixed the elevation correction.

            Renamed m_fdisToObject and m_fangleRot* to m_DistanceToObject
	    and m_AngleRot* in GameScreen.  Added m_MinimumDistance which
	    is set to the active object's bounding sphere radius plus a
	    couple meters.  The prevents clipping of the model by the
	    near plane in external views.  You can still clip into other 
	    models that are nearby of course.

            Added a second SceneView to VirtualScene. The original SceneView
            is now called m_FarView, and the new one is m_NearView. NearView
            has the lighting group, and a group for objects near the camera.
            NearView is only used if this later group is not empty.
            VirtualScene::draw() first renders the FarView with the near
            clip plane set to 1-3 m. This relatively large value helps to
            reduce Z-fighting far from the camera. Then the depth buffer is
            cleared and NearView is rendered with the depth frustum from 1
            cm to 100 m. Typically the player's vehicle and interface is
            rendered in the NearView for internal views. GameScreen manages
            whether the NearView or FarView is used based on the current
            viewing mode (internal or external).

	    Additional fixes to the HID keystate tracker. 

2003-05-05: onsight
            Added HID::translate to keep track of the keyboard modifier
	    state for each key that is pressed, and force that modifier
	    state again when the key is released.   So for example, if
	    PRESS{NUM-6} maps to "begin pan-right", and RELEASE{NUM-6}
	    maps to "end pan-right", then:
	    
	      PRESS{NUM-6}, PRESS{SHIFT}, RELEASE{NUM-6}, RELEASE{SHIFT}

	    never sent the "end pan-right" message since the modifier state
	    when RELEASE{NUM-6} arrived included the shift state.  The new
	    translate method records that PRESS{NUM-6} occurred with no
	    modifiers, and temporarily overrides the modifier state when
	    the key is released.  This method is currently only called by
	    CSPSim::doInput().  It is called for all input events, and may
	    eventually find uses for other event types (e.g. joystick).
	    
2003-05-04: onsight
            Small fix to the camera positioning correction that prevents it
	    from getting "stuck" to the ground.

	    Added FeatureQuad class to Terrain.h for creating textured quads
	    used in billboards (e.g. trees).

	    Similified RandomLayoutModel to use FeatureQuad.

	    Added a couple XML files for trees under Data/XML/theater/trees

	    Moved the osgDB search path setup out of VirtualScene and into
	    CSPSim::init().  All the paths are now relative to DataPath,
	    and there is a new accessor function in Config.h to make it
	    easier to access them.  For example, getDataPath("ImagePath") 
	    will return the full path for images (DataPath + ImagePath, if 
	    ImagePath is not absolute).

2003-05-04: delta
	    Added a naive control of camera such that it keeps above ground.

	    Updated .net project. 

	    Added a /Zm 1000 parameter in .net projects to avoid fatal 
	    compiler error.

	    Changed vehicle orientation at start.

	    Changed some Atmosphere function members to return float instead
	    double to avoid some warnings.

	    Updated CSPSim.py to take account set_output <-> setOuput for 
	    log file.

	    Added a vehicle to load in testing item in ini file. The vehicle 
	    is specified in Vehicle.

2003-05-03: onsight
            Replaced CSP's logging facilities with SimData's (which 
	    originally came from CSP).  Some tweaks to the logging
	    classes needed to be made to support multiple logs at once,
	    but this seems to work fine now.  The CSP_LOG macro is
	    a little easier to use now, since it inserts the CSP_
	    prefix automatically for the class and priority levels:

	        CSP_LOG(APP, DEBUG, "a message");

	    instead of

	        CSP_LOG(CSP_APP, CSP_DEBUG, "a message");


2003-05-02: onsight
==========> VC USERS: add Theater.cpp to the project.

==========> Requires a few new 3D models that can be downloaded from
	    http://csp.sourceforge.net/new-models.tgz

            I've been making many changes and additions, but have been too
	    lax in updating the changelog.  Here's what I can remember and
	    I will try to fill in the missing pieces as I come across them.

	    Jitter fix.  The scene graph has been restructured so that the 
	    eyepoint is at the origin.  Dynamic objects, feature cells
	    (more on that below), and the terrain transform are updated 
	    every frame to compensate for motion of the camera.  Terrain
	    lattice boundaries (the old local coordinate system) only affect
	    terrain, so other objects can now move/exist continuously in
	    adjacent terrain blocks.  Particle effects are now in a global 
	    coordinate system which causes the to jitter somewhat.  This
	    could still be improves somewhat by moving the global origin
	    to the center of the theater.
	    
	    Some fixes to CSPSim::cleanup() to avoid segfaults at program
	    exit.

	    Added much infrastructure to VirtualBattlefield.  The battlefield
	    now consists of a grid of cells that track static and dynamic
	    objects, manage bubbles and aggregation/deaggregation, and 
	    dynamically add and remove objects from the scene graph.  

	    Added theater infrastructure to load static objects into the
	    battlefield from XML.  The terrain object is now part of the
	    theater.  There are some new files in Data/XML/theater to
	    provide some very basic groups of static features for testing.

	    Added aggregate(), deaggregate(), and setVisible() methods to
	    DynamicObject.  These are called automatically by the battlefield.
	    They don't do anything in DynamicObject, but can be extended
	    in subclasses to implement aggregation logic.

            Made DynamicObject::setHuman() private, and setAir() and
            setGrounded() protected. Changes of the 'human' state (when the
            active object changes) must now go through VirtualBattlefield's
            setHuman() method so that the bubbles are updated correctly.

            New WindEmitter for smoke trails that is more efficient and
	    also incorporates the current wind velocity (and gusts) when
	    generating the smoke stream.

	    New XML files in Data/XML/theater to support theater loading.

	    CSPSim finds the theater to load from the ini file.  The
	    terrain is specified in the theater.

            The model path in the ini file is now set to Models, so this
	    prefix shouldn't be specified in the xml files anymore.



Version 0.3.2 (2003-05-02)
===========================

2003-04-23: delta
	    Added m_CharacterSize to ScreenInfo to control size of character
	    (m_FontSIze controls now font resolution). 

	    Cleaned a bit this code.

	    Added average fps.

2003-04-23: onsight 
            Upgraded configure.in to check for OSG 0.9.4.  The full test,
	    which was broken in 0.9.3, works again.  The test for osgGLUT
	    has been removed since it is no longer needed.

	    Removed osgGLUT from the Linux makefile.

2003-04-22: onsight 
            Port to OSG 0.9.4, mostly changes to text display code. The new
            osgText code seems a bit inefficient, causing a frame rate hit
            for the onscreen status display. Text under Linux appears to be
            working again though.

            Changed classes that had been inheriting from simdata::Object
            just for reference counting to use simdata::Referenced instead.

            All non-XML simdata references now use simdata::Ref<>, and the
            XML refences use simdata::Link<>. simdata::Pointer<>, which had
            been used for both purposes, is no longer available. Ref is the
            basic smart-pointer class with reference counting. Link is
            similar but meant only for simdata::Objects that are creating
            automatically as part of the data archive loading process (ie.
            members that have SIMDATA_XML(...) lines in the interface.

            Some general header cleanups, which managaed to eliminate some
            unnecessary interdependency.

2003-04-21: delta
            Removed non necessaray calls to DegreesToRadians and
            RadiansToDegrees. Now angles must be specified in radians. If it
            is needed to display angle in degree call
            simdata::RadiansToDegrees at this stage.

2003-04-19: delta
            Got ride of more than one hundred of warnings (complaining about
            casting from double to float) in ColorSpace.cpp while compiling
            with vc++.

2003-04-19: onsight
            Changed AircraftObject:: m_heading, m_pitch, m_roll to
            m_Heading, m_Pitch, m_Roll. These are now in radians, and
            converted to degrees only if necessary (for display).
            setAttitude(x, y, z) still takes degrees.

2003-04-18: delta
            Added Runge-Kutta Cask-Karp numerical method.doSimStep2() is now
            calling it.

            Added a note on initialization of 'pause'.

            Added a simdata::Pointer<DynamicalObject> parameter in
            ObjectStats methods.

            Added a check to non nullitty of m_GameScreen in
            CSPSim::setActiveObject.

            Fixed a getStats non const method in AircraftObject class.

            Checked Onsight changes: a couple of forward class declarations
            causing compilation problems in vc++ have been fixed thanks to
            Onsight.

            Updated .NET project.
2003-04-18: onsight
            Lots of changes to many parts of CSPSim. First and foremost, the
            scene graph is now in VirtualScene. VirtualBattlefield no longer
            contains scene graph code. Much of VB still needs to be replaced
            though.

            The scene graph is reorganized slightly, in anticipation of
            adding more static and dynamic objects:

                    +------------ ROOT -------------+
                    |                               |
               BACKGROUND               +--------OBJECTS-----+
                    |                   |           |        |
              EYE_TRANSFORM          TERRAIN     STATIC    DYNAMIC
               |       |
              SKY  SKYLIGHTS
                     /    \
                 SUNLIGHT MOONLIGHT

            Fixed an initialization error in AeroDynamics that could cause
            m_GE to be NAN.

            Fixed the initialization of the gear retract state.

            Moved the first object update out of the main simloop so that
            the pause (several seconds) occurs before time starts counting.
            Limited the FrameTime to 0.2 seconds (was 1.0), which prevents
            the FM from exploding. Removed the initial 'paused' state.

            Changed SimObject to use quaternions for attitude, no 3x3
            matrices anymore.

            Added a SceneModel class to separate the model transform and
            switch from SimObject. The SceneModel member is only constructed
            if the object is added the scene. The ObjectModel is always
            loaded, so that bounds checking, collision tests, and model
            related data are available independent of the scene graph.
            SceneModel now uses osg::PositionAttitudeTransform instead of
            MatrixTransform.

            Set a default joystick environment variable for SDL if none is
            specified. (Linux only)

            Fixed AircraftObject::setAttitude(pitch, roll, heading)
            parameter order and units. This order is now correct, and the
            units are degrees. Previously the parameters were mislabelled
            and doubly converted from degrees to radians (resulting in very
            small angles).

            Moved access to the core components (Battlefield, Scene, etc)
            out of various classes that had been storing copies. Most access
            is now through CSPSim::theSim.

            Switched CSPSim to use simdata::DataManager instead of
            simdata::DataArchive.

            Major rewrite of the smoke trail code. The design is much
            cleaner now, but more work remains to be done.

            Various method name changes to conform to the standard case
            convensions (mixed with lower first letter).

            Removed "m_Army" from SimObject. This will eventually be
            replaced with a full object class, not just an integer.

            Made several bools in SimObject into bit flags.

            Greater use of smart-pointers (simdata::Pointer and
            osg::ref_ptr)

            Corrected handling of Terrain object pointers (now all smart
            pointers). Changed demeter to use osg::Referenced instead of
            it's own home-built work- alike.

            Moved the eye position in view <1> to the correct cockpit
            position. The 3D model remains on in the interior view now. The
            offset to the pilot's head is specified in the ObjectModel XML
            data. (There's a temporary contact point at the same location to
            make it easy to see where this is).

            Fixed ThrottleInput so that the throttle starts at zero for
            keyboard-only input, and has the correct sense ('=' increases,
            '-' decreases).

            Changed the log sync and closing to ensure that the log is
            flushed properly under all circumstances and that it doesn't
            segfault when the program quits. I still don't fully understand
            all the issues, and it may not work perfectly under Windows as
            is.

            Reordered various ctor initializers to silence gcc warnings.

            Added Bin/TestObjects.py to allow objects to be added to the sim
            for testing purposes. Currently, only the active object (created
            in CSPSim::init at startup) has physics. All other aircraft
            objects are frozen (this is set in AircraftObject---the physics
            code is commented out for non-human controlled a/c). To switch
            the active object, hit <spacebar>.

            Started a Falcon 4 aircraft data file converter in Tools/XML. It
            is currently can be used to convert the thrust tables to
            simdata's XML format.

*********** VC USERS: please add VirtualScene.cpp to the VC project files

Version 0.3.1 (2003-04-18)
===========================

2003-04-12: onsight
            Added Exception.h and Exception.cpp to provide exception
	    classes and error messages.  (Requires latest SimData CVS)

	    Try/catch blocks in CSPSim::Init now display semi-informative
	    messages (more work to be done).  Only one throw() so far in
	    Sky.cpp for missing moon.png (fairly common at the moment!)

*********** VC USERS: please add Exception.cpp to the VC project files

2003-04-11: delta
	    update .net projects.

	    Cleaned code.

2003-04-11: onsight
            Modified autoconf scripts to get the actual python
	    include path using distutils, rather than just using 
	    PYTHON_PREFIX/include/python2.2, which is version
	    dependent.

*********** VC USERS: please remove Platform.cpp from the VC project
            files.

2003-04-11: onsight
            Fixed two coordinate system bugs in the impact code during
	    hard crashes that could cause numerical overflows and lead
	    to segfaults.  There's still somewhat odd behaviour at
	    times, so this should be revisited at some point.

            Reordered member initializers in NumericalMethod ctors to
	    silence gcc warnigns.

	    Made DynamicalSystem dtor virtual.

	    Added global try/catch block around CSPSim::Init.

	    Added trilinear filtering option to ObjectModel.

	    Added #! shell escape to the python scripts in Bin
	    so they can be run directly from the commandd line
	    under linux (assuming your python path is the same
	    as mine ;-).

	    Removed Platform.cpp from the build.  None of the files
	    should include Platform.h;  from now on you should use
	    SimData/FileUtility.h to provide the ospath functions.
	    These are in the simdata namespace, so they look like:

	        simdata::ospath::join(...)

            Stripped all the includes out of stdinc.h which were
	    not needed by any of the source files that included
	    it.  I also removed the #include "stdinc.h" from these.
	    stdinc.h now just contains the lines to enable mmgr
	    which are commented out.

*********** ALL USERS: you will need to remake your aircraft.hid file.
	    Go to Tools/HID, and run map2hid aicraft.map, then copy the
	    resulting aicraft.hid file to your Data/Input directory.

2003-04-10: onsight
            NumericalMethods.cpp added.

	    Sim.dar renamed to sim.dar.

	    Data archive paths now use the new 'sim:' prefix.  See
	    SimData CHANGES.current for details.

	    Updates to aircraft-core to use the new 'sim:' prefix
	    when binding to the m2k and other aircraft.

*********** LINUX USERS: you need to add NumericalMethod.cpp to your 
            Makefile.

2003-04-09: delta
	    updated .net project.

2003-04-03: delta
	    updated .net project; debug and release are maintained. 

            Rewritten DynamicalSystem interface; you need now, to define a
            vector field as a method of DynamicalSystem (which inherites
            from VectorField). You need to furnish the NumericalMethod used
            to approximate the exact solution of your ODE (use
            setNumericalMethod). AeroDynamics is now a DynamicalSystem.

            Merging Onsight code on airflow, collision and landing gear;
            this code is not yet enabled.

            Cleaning code in CSPSim.cpp, AeroDynamics.cpp and .h; added
            NumericalMethod.cpp and NumericalMethod.h.

2003-03-28: delta
            .net project updated: CSPSimDLL (release mode is maintained) You
            can run python scripts from commandline without invoking python
            interpreter. For example, to rebuild data: "RebuildData.py <CR>"
            or to run CSP, "CSPSim.py <CR>".

            Removed CSPWin.py, CompileData.py and RebuildData.py from
            /VisualStudio.

2003-03-27: onsight
            Created Bin directory and moved all Python scripts and 
	    libraries there.  
	    
	    Renamed CSP.i, CSP.py, _CSP.so/dll to cCSP to avoid confusion 
	    as to which is the real application to run the sim.  To run
	    the sim now, change to Bin and run CSPSim.py (or, under
	    Windows, run 'python CSPSim.py' or double-click on CSPSim.py).
	    The Linux Makefile is updated but the Windows project file 
	    still needs to be changed.

	    Removed references to x36.map from gamescreen-core.map.
	    
2003-03-26: onsight
            Reorganized the Tools/HID directory.  The "standard" maps are
	    now under Tools/HID/Maps.  This are the files that have
	    generic binding that are updated as new features are added.
	    There are templates for creating custom maps in the
	    Tools/HID/Examples directory.  These are my own custom maps,
	    but should be changed to make them as general as possible.
	    Probably the windows joystick axis bindings (assuming these are 
	    the same for all sticks) used.

	    The README.map file now has info on the map scripting language
	    and the README file has instructions for setting up your own
	    maps.  See README for some of the rational behind these changes.

	    GameScreen.* -> gamescreen.*

            Improved the map2hid utility to allow an output file to be
	    specified on the command line.  If the output file is '-',
	    stdout will be used.  If no output file is specified and the
	    input file ends with '.map', then the corresponding filename
	    ending with '.hid' will be used.

	    Added a slightly more useful usage output and '--help' option
	    to map2hid.

	    Fixed map2hid to use relative paths for included map files.
	    
2003-03-25: onsight
            Pushed the "look-at" point out to 50 m in front of the aircraft
	    for view #1, which eliminates jitter at low fov.

	    Added a couple extra contact points to the bottom of the M2K.
	    Turning off the landing gear while on the ground looks quite
	    cool now, as there are several different stable configurations
	    the plane can end up in.

2003-03-23: onsight
            Changed turbulence from air density fluctuations to 3D wind
	    gusts.  The fluctuations are still indexed by distance travelled.
	    Also, scaled the altitude variation of turbulence to peak in
	    the 3000-10000 m range.  Also, the perlin noise function is now
	    shaped as X*ABS(X).

	    Right justified the fps display in a 5 digit field so that 100.0
	    doesn't make the display jitter.

2003-03-23: delta
	    added a key to toggle diamond contact marks

	    added initialization of pause text

2003-03-22: onsight
            Added mute option to CSPSim.ini.

	    Enabled winds, gusts, and turbulence.

2003-03-21: onsight
            CSPSim.PYTHON now compiles the data automatically if Sim.dar is
            not found. You still need to run with the --compile-data option
            whenever the XML files change, or when the CPSim object storage
            format changes. In the latter case, also specify the --rebuild
            option to recompile all the source data.

	    Added configure.win.py.  This simple script does some minimal
	    checking and setup to prepare the build under Windows/MSVC.

            Added CSPWin.py, CompileData.py, and RebuildData.py to
            VisualStudio. It should be possible to double-click on these
            from Windows to launch CSPSim, compile changes to the data, or
            rebuild the data from scratch. This assumes of course that
            Python has hooked the .py extension properly.

2003-03-21: delta
            CSPSim is back on windows (thx a lot Onsight).
           
2003-03-21: onsight
            Merged delta's changes.

2003-03-19: onsight
            *** Project Change ***
            Added LandingGear.cpp and Console.cpp

            Cleanup up Linux build a bit:
       
            - Removed SDL_console check.
            - Added test for correct Python path.
            - Removed files related to Automake.
            - Adapted to new SimData installation path.  There should
              be no more relative paths to SimData in the configure
              script and Makefiles.

2003-03-14: onsight
            *** SimData library and data incompatibility ***

            Added ContactList to ObjectModel for bounding hardpoints that
            interact with the ground. There is a new osg::Switch called
            m_DebugMarkers that will contain various visual cues for
            debugging. Currently you can enable visual markers for the
            contact points, and eventually other geometries like
            hierarchical bounding boxes can be added.

            Added ground interaction code for model contact points to
            AeroDynamics. This should probably be abstracted to a base class
            for use with other vehicles. Right now the ground acts as a
            hard, highly damped spring on the points. There is also a large
            (ad-hoc) tangential friction component. Forces beyond a
            threshold need to be passed to a damage model for further
            processing (not yet implemented).

            Added landing gear to AircraftObject. This is implemented in two
            new classes: LandingGearSet and LandingGear. The first is just a
            container that provides several methods to act on all the gear
            at once. Each landing gear has a complex physics model (need to
            add a simplified model as well) including shock absorption,
            braking, and steering. Gear damage, aerodynamic drag, and
            continuous retraction/extension are not yet modelled. Hooks in
            Aerodynamics activate the gear simulation (in the inner loop)
            when the a/c is near the ground.

            Added a simple ground effect model to AeroDynamics.

            Added a wind vector to the AeroDynamics calculations. The
            magnitude and direction are hard coded right now for testing.

            Changes to all the object pack and unpack methods to ensure that
            they are inverse operations. Added postCreate() methods as
            needed (see recent SimData changes for details).

            New input hooks for wheel brakes.

            Added new (experimental) Python runtime console.

            Added landing gear parameters to XML/vehicles/aircraft/m2k.xml
       

2003-03-12: delta
            Cleaning code for ScreenInfo and ScreenInfoManager. It still
            needs some improvements but it should be better now. Note that
            osgText has been entirely reimplemented. Although, we didn t use
            it yet, we ll need to switch to it soon: more flexible interface,
            robuster and faster code.

            Added a Runge-Kutta method RK_24, with a predictive step and a
            corrective one; it is implemented as an abstract class in
            DynamicalSystem (.cpp & .h). A dynamical system is roughly
            speaking a system of differential equations (ODE); a pure
            virtual method is the vector field which looks like vector
            f(time,vector); here, vector is a std::vector<double> of any
            dimension; you need to pass its size when you instantiate a
            DynamicalSystem. This class is generic and could be use as soon
            as a vector field may be defined.

            Aerodynamics inherites now from DynamicalSystem. Done some
            minor cleaning in code and implement some helper functions to
            use with dynamical system. Call to this numerical method occurs
            in doSimStep2; it will be keep until others will have tested it
            enough (so, old code is still available and functional - just 1
            line to be changed to switch back).

            Added a line in CSPSim.ini to read sound files (still
            hardcoded). At the moment, SDL API is used but it should be
            replaced by OpenAL soon (Wolverine is working on it). Looks like
            that here:

            SoundPath = ../Data/Sounds

            Changed the radius of skydome to 64000 (hardcoded!, plz Onsight,
            check it)

            Others changes are minor.


Version 0.3.0 (2003-03-14)
===========================
2003-03-14: onsight
            CHANGES and CHANGES.current started. First tagged version of
            CSPSim: 0.3.0

2003-03-14: onsight
            - Include file fix in GameScreen.cpp (LogStream.h)
	    - Removed -march flag from Makefile.in
	    - Temporary fix for osg lib version tests in configure.in
	    - Removed Source/FX/Makefile.in from configure targets.
	    - Added DynamicalObject.cpp to Makefile.
	    - Set sounds path to Data/Sounds in ini.
	    
2003-03-12: delta
            Cleaning code for ScreenInfo and ScreenInfoManager. It still
            needs some improvements but it should be better now. Note that
            osgText has been entirely reimplemented. Although, I didn t use
            it, we ll need to switch to it soon: more flexible interface,
            robuster and faster code.

            I added a Runge-Kutta method RK_24, with a predictive step and a
            corrective one; it is implemented as an abstract class in
            DynamicalSystem (.cpp & .h). A dynamical system is roughly
            speaking a system of differential equations (ODE); a pure
            virtual method is the vector field which looks like vector
            f(time,vector); here, vector is a std::vector<double> of any
            dimension; you need to pass its size when you instantiate a
            DynamicalSystem. This class is generic and could be use as soon
            as a vector field may be defined.

            Aerodynamics inherites now from DynamicalSystem. I ve done some
            minor cleaning in code and implement some helper functions to
            use with dynamical system. Call to this numerical method occurs
            in doSimStep2; it will be keep until others will have tested it
            enough (so, old code is still available and functional - just 1
            line to be changed to switch back).

            I added a line in CSPSim.ini to read sound files (still
            hardcoded). At the moment, SDL API is used but it should be
            replaced by OpenAL soon (Wolverine is working on it). Looks like
            that here:

            SoundPath = ../Data/Sounds

            Changed the radius of skydome to 64000 (hardcoded!, pkz Onsight,
            check it)

            Others changes are minor.

2003-02-18: onsight
            Checked in new sky code, improved virtual hid script handling,
            and a bunch of miscellaneous fixes.

            In order for it to run, you need to get the image file moon.png
            from http://stm.lbl.gov/~tm2/csp/moon.png. make sure it is saved
            as a png file, and not converted to bmp by IE.

            There are some new keyboard commands. take a look at
            aircraft.map and GameScreen.map in Tools/HID for details. the
            new hid files are in Data/Input, so be sure to check them out or
            use map2hid to regenerate them.

            The autoconf scripts are broken on linux, you may need to copy
            Makefile.in to Makefile and tweak it by hand. i'm still working
            on a fix.
